{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/icarus/source/css/back-to-top.css","path":"css/back-to-top.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/progressbar.css","path":"css/progressbar.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/insight.css","path":"css/insight.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/search.css","path":"css/search.css","modified":1,"renderable":1},{"_id":"themes/icarus/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/animation.js","path":"js/animation.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/clipboard.js","path":"js/clipboard.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/back-to-top.js","path":"js/back-to-top.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/icarus/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/images/audit.png","path":"images/audit.png","modified":1,"renderable":0},{"_id":"source/images/Golang.png","path":"images/Golang.png","modified":1,"renderable":0},{"_id":"source/images/clean.jpg","path":"images/clean.jpg","modified":1,"renderable":0},{"_id":"source/images/connections.jpg","path":"images/connections.jpg","modified":1,"renderable":0},{"_id":"source/images/golang-ports-and-adapters.png","path":"images/golang-ports-and-adapters.png","modified":1,"renderable":0},{"_id":"source/images/loki.jpg","path":"images/loki.jpg","modified":1,"renderable":0},{"_id":"source/images/multi.jpg","path":"images/multi.jpg","modified":1,"renderable":0},{"_id":"source/images/nodejs.png","path":"images/nodejs.png","modified":1,"renderable":0},{"_id":"source/images/legos-2.jpg","path":"images/legos-2.jpg","modified":1,"renderable":0},{"_id":"source/images/thumbnail.svg","path":"images/thumbnail.svg","modified":1,"renderable":0},{"_id":"source/images/what.jpg","path":"images/what.jpg","modified":1,"renderable":0},{"_id":"source/about/index/avatar.png","path":"about/index/avatar.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"2ec171fbd29fa697db201b20f9dc4493e9a72b1a","modified":1611313675924},{"_id":"source/.DS_Store","hash":"b077f5a2942477d500a85cc56fcd4f6a51878ecd","modified":1617569682335},{"_id":"source/_drafts/Concurrency-in-Golang.md","hash":"474391f0f9d309901572023eff158c014c0c0093","modified":1611313675924},{"_id":"source/favicon.ico","hash":"b42c639eb37200d1ba13eee45c4276c83b984033","modified":1611313675956},{"_id":"source/_drafts/Docker-Deep-Dive.md","hash":"fcbb2f57b7e17caa9b3656ab505f6f6ab22fb249","modified":1611313675924},{"_id":"source/_drafts/Event-Storming.md","hash":"46b451d60a39c4d339e8aeffe6dca5a0275dca80","modified":1612828456536},{"_id":"source/_drafts/Long-Running-Processes.md","hash":"fa465093012595fc1aa319d445fa2e06820a6700","modified":1611313675924},{"_id":"source/_posts/Auditing-in-Microservices.md","hash":"a9c65b09ea9180a12874bbef95fabcc817b116f1","modified":1626714014288},{"_id":"source/_drafts/Microservices-Health-Checks.md","hash":"62330bd823ce23d2be2bc77d934bcef806943b4f","modified":1611313675924},{"_id":"source/_posts/Authentication-Middleware-In-Elixir.md","hash":"ee7c77037642ec4d4b5b6de9247fd2227f413c20","modified":1611313675924},{"_id":"source/_drafts/Tackling-Auditing-in-Microservices.md","hash":"e340a3e3fc861d206e203823cdb3728269ccbf31","modified":1626711103975},{"_id":"source/_drafts/Open-Policy-Agent.md","hash":"5cde056a5e996b544eafd1b49262b38bcd0eb6e9","modified":1617659672019},{"_id":"source/_posts/Collecting-Docker-Logs-With-Loki.md","hash":"ea4ad20262b89e6b587f0ee3a3c76b1828f37571","modified":1611313675924},{"_id":"source/_posts/Context-Maps-In-Domain-Driven-Design.md","hash":"37eb363ef78a7b323a6083883f4a4f4187b1ee2d","modified":1611313675933},{"_id":"source/_posts/Functional-Programming-in-10-minutes.md","hash":"bf41a6a89af068fef2e30722530a0c75585a4c97","modified":1611313675933},{"_id":"source/_posts/Golang-Memory-Leaks.md","hash":"d48e673c93c3e20b917652f8003e089ab5282534","modified":1611313675934},{"_id":"source/_posts/Microservices-Epiphany.md","hash":"a2f72fc8be20eec58af71fd51d040175cfc78321","modified":1611313675951},{"_id":"source/_posts/Switching-From-Node.js-To-Elixir.md","hash":"37e05dbdf07926bbdb639bb62442ae00fcde77e1","modified":1625766919471},{"_id":"source/_posts/Implementing-Clean-Architecture.md","hash":"0b9c96173780017b50f101e88001d7e6eb962f21","modified":1611313675949},{"_id":"source/_posts/The-Javascript-Event-Loop.md","hash":"9da96561c2a0d38c49cc5163268125d0a7880ee7","modified":1611313675951},{"_id":"source/_posts/Implementing-Ports-and-Adapters.md","hash":"d6997d379ce5849faf64e70ce15ff2f64b22e901","modified":1611313675950},{"_id":"source/_posts/what-are-microservices.md","hash":"679dd786669b79542f69569c15193659804c00b6","modified":1611313675953},{"_id":"source/_posts/User-Space-Scheduling.md","hash":"0cc2252a644cc57ef64a9434dddaf65dee80f166","modified":1611313675953},{"_id":"source/images/thumbnail.svg","hash":"036b981b3a9b26e8e473f38d91c931a0fc168978","modified":1611313675961},{"_id":"source/images/legos-2.jpg","hash":"9ebeaf7cdebaa0df52f60332129c0b8b10dd920d","modified":1611313675959},{"_id":"source/about/index.md","hash":"be6f7e413d7a826e8d7ee0e74dfb640944122462","modified":1625766912611},{"_id":"source/_posts/Context-Maps-In-Domain-Driven-Design/sddd.jpg","hash":"22f4584b5ad00debe6c952f922b36109b7b7e1d2","modified":1611313675933},{"_id":"source/_posts/Golang-Memory-Leaks/leak.png","hash":"b2c35a757f1bb581cf2ee5b21b3d67576291186d","modified":1611313675936},{"_id":"source/_posts/Golang-Memory-Leaks/malg2.png","hash":"3d358abbf724cf0444195eb42dbd468594525df7","modified":1611313675940},{"_id":"source/_posts/what-are-microservices/api-composer.png","hash":"702467360548f724747ea6d1c9aab6d8967b40ab","modified":1611313675953},{"_id":"source/_posts/what-are-microservices/bff.png","hash":"aa86eca24836cea00127afbf58e67df38016c246","modified":1611313675954},{"_id":"source/_posts/what-are-microservices/gateway.png","hash":"1a9c504086bd84dd8975f22180190bc85a6de60d","modified":1611313675954},{"_id":"source/_posts/what-are-microservices/side-car.png","hash":"67b6c59d23d295209fe272489a9c4a19604294c1","modified":1611313675954},{"_id":"source/images/Golang.png","hash":"0c0637b6c597bec8608e3aecf464ce2d10dc6345","modified":1611313675956},{"_id":"source/images/audit.png","hash":"d5a45bf045fd8e1c62f274762afd310362e375c5","modified":1626713594868},{"_id":"source/images/golang-ports-and-adapters.png","hash":"5cfa5137f9d384b5f7502460960ad53ee1e35b6e","modified":1611313675959},{"_id":"source/images/loki.jpg","hash":"f26077af7b06cffaab4341503592de927895e1a3","modified":1611313675959},{"_id":"source/images/multi.jpg","hash":"53322bf498762aeb4e5fe039c19834ee68d87103","modified":1611313675960},{"_id":"source/_posts/Implementing-Clean-Architecture/CleanArchitecture.jpg","hash":"35d11d882fe10293ead30f70989bd831cf1d0044","modified":1611313675950},{"_id":"themes/icarus/_config.yml","hash":"0b234fc778ac3b41706ebed324365dc7310a8ea4","modified":1625243618914},{"_id":"themes/icarus/.gitignore","hash":"542aaea07afe90211c6a45c90b7d6879a4503043","modified":1611313757617},{"_id":"themes/icarus/README.md","hash":"c351bc76d3b4a138989c50f57bd3c52fa95eaa56","modified":1611313757617},{"_id":"themes/icarus/package.json","hash":"4167e65682af257bdf8531a05730e6c42339996d","modified":1611313757625},{"_id":"themes/icarus/LICENSE","hash":"41f72cd544612bc4589c924c776422b800a4eff7","modified":1611313757617},{"_id":"themes/icarus/.github/ISSUE_TEMPLATE.md","hash":"6b17b84116938367757928087a09dcb8489d06f6","modified":1611313757617},{"_id":"themes/icarus/languages/en.yml","hash":"b69c91878f30937f50438ff64dffd3f6bf91bcf5","modified":1611313757620},{"_id":"themes/icarus/languages/es.yml","hash":"8827823e5b2ce967566854c9bfebc7c69098b4ac","modified":1611313757620},{"_id":"themes/icarus/languages/fr.yml","hash":"0017f93a5d491a9c0e55911cdc35316762c5a94e","modified":1611313757621},{"_id":"source/_posts/The-Javascript-Event-Loop/loop_iteration.png","hash":"b1d06a5e6d9965267cbddc95219a325e85b3ad2b","modified":1611313675952},{"_id":"themes/icarus/languages/id.yml","hash":"92d2d19a62a17b6e99f82a014309bbf6c13c9ae8","modified":1611313757621},{"_id":"themes/icarus/languages/ja.yml","hash":"6eed7771de2353d71b720c6e605cceb3f230b12e","modified":1611313757621},{"_id":"themes/icarus/languages/pt-BR.yml","hash":"bcf5bc81ca855d26bbc3b3bfabc7d84429e74b85","modified":1611313757621},{"_id":"themes/icarus/languages/ko.yml","hash":"eef426a7d580058024260ccc111476d5b1b688d1","modified":1611313757621},{"_id":"themes/icarus/languages/tr.yml","hash":"eff1c0b3d5c4b328f6dd74a195ff378c898f4d29","modified":1611313757621},{"_id":"themes/icarus/languages/ru.yml","hash":"ba8b4f7d77eb1d1e28aa1f9107bd0bbbdc4cba99","modified":1611313757621},{"_id":"themes/icarus/languages/zh-CN.yml","hash":"804f6a1edee49bb6a5ecb8e9d14d3e93eaca37c0","modified":1611313757621},{"_id":"themes/icarus/languages/zh-TW.yml","hash":"79fab0bff625634fb6bb6cadf9c547bd36226dcf","modified":1611313757621},{"_id":"themes/icarus/languages/vn.yml","hash":"6d9f4fabca711a6cb0a0efd72aa75c3641beb4a6","modified":1611313757621},{"_id":"themes/icarus/layout/archive.ejs","hash":"64a81f4c6ca9517169413408d076371e8e09c63a","modified":1611313757622},{"_id":"themes/icarus/layout/categories.ejs","hash":"29d304f2b95a04fbc5e7529f9bdce9648e3545ef","modified":1611313757622},{"_id":"themes/icarus/layout/category.ejs","hash":"bda344da0e6c03899f53abc20ae2a2efab5ab243","modified":1611313757622},{"_id":"themes/icarus/layout/layout.ejs","hash":"da63c914247eba116ea5263bfc27a69e96f859b6","modified":1611313757623},{"_id":"themes/icarus/layout/page.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1611313757623},{"_id":"themes/icarus/layout/index.ejs","hash":"71120f41d019bf2866a5556747e5e671c8147f85","modified":1611313757623},{"_id":"themes/icarus/scripts/index.js","hash":"9203e2ba1f821d945edf20fc277f3c58d22bfd00","modified":1611313757625},{"_id":"themes/icarus/includes/common/ConfigGenerator.js","hash":"451397efc7808787419fa3eb6b043c0bd8bbdf30","modified":1611313757618},{"_id":"themes/icarus/includes/common/ConfigValidator.js","hash":"cd3cd12bc042b401825fd7bfd9a6434c8b14e092","modified":1611313757618},{"_id":"themes/icarus/includes/common/utils.js","hash":"c0aeaeb57a42bcc71a92da2249762f91abd83ffe","modified":1611313757618},{"_id":"themes/icarus/includes/filters/highlight.js","hash":"19a4dcd2dee7388544b57e473cfb0fc9eea9623e","modified":1611313757618},{"_id":"themes/icarus/includes/generators/categories.js","hash":"7cb370ac53a05d6b1b9203579716c0ca83d35c36","modified":1611313757618},{"_id":"themes/icarus/includes/generators/category.js","hash":"313e170e55d74526c4e1be7181ef7a21439147c9","modified":1611313757618},{"_id":"themes/icarus/includes/generators/insight.js","hash":"c4b981443927b87cc14a3a583029e13f819d6d71","modified":1611313757618},{"_id":"themes/icarus/layout/post.ejs","hash":"50170783bac99946ae8af483920568de9b2d9801","modified":1611313757624},{"_id":"themes/icarus/includes/generators/tags.js","hash":"8195322c208706427a1cf56361669dca4d86f6f1","modified":1611313757618},{"_id":"themes/icarus/includes/helpers/cdn.js","hash":"7d34ea6400cb3611c374c135304abcb65ef291b7","modified":1611313757618},{"_id":"themes/icarus/layout/tags.ejs","hash":"0c527c6b72386f11c18e8aa5249be8c601e69906","modified":1611313757624},{"_id":"themes/icarus/layout/tag.ejs","hash":"1feac7aa842882757a479b8ad427f6a72fce70c4","modified":1611313757624},{"_id":"themes/icarus/includes/helpers/layout.js","hash":"afdf5e9704cfc087526b4a0403fe7eb04f22190e","modified":1611313757619},{"_id":"themes/icarus/includes/helpers/config.js","hash":"173e02987e7a7d5df1e686f6ee4edd8cf494bdd3","modified":1611313757618},{"_id":"themes/icarus/includes/helpers/override.js","hash":"726cf99612fd060753d9da08db2776aec1802e20","modified":1611313757619},{"_id":"themes/icarus/includes/helpers/page.js","hash":"4ce98c781bcbc132672e6d16bf02df5bebcea7b3","modified":1611313757619},{"_id":"themes/icarus/includes/specs/article.spec.js","hash":"a805c1a6f03ccb07d73512aef40d38541ddbb0eb","modified":1611313757619},{"_id":"themes/icarus/includes/specs/comment.spec.js","hash":"b0ef033e363b918134fb5a003143e9bd8fafa300","modified":1611313757619},{"_id":"themes/icarus/includes/helpers/site.js","hash":"35dd41260dce178a171f6c360fa6d3840bfb1507","modified":1611313757619},{"_id":"themes/icarus/includes/specs/config.spec.js","hash":"7a9bac384a73cf9f39173fdb2dfc2813784d8891","modified":1611313757619},{"_id":"themes/icarus/includes/specs/footer.spec.js","hash":"8e6d7c5f9a13ce03241b6562259d210b389cb88e","modified":1611313757619},{"_id":"themes/icarus/includes/specs/donate.spec.js","hash":"722cb2662569957e8b1d1a467d9632b8cc6e69d6","modified":1611313757619},{"_id":"themes/icarus/includes/specs/navbar.spec.js","hash":"7de29c0031738a4de4d31ed4f7b0c43447c7961c","modified":1611313757620},{"_id":"themes/icarus/includes/specs/icon_link.spec.js","hash":"f2a83ac5ccb74fc6f3dfbd25430e142297d8491c","modified":1611313757620},{"_id":"themes/icarus/includes/specs/providers.spec.js","hash":"820cc6936ba75e3104cc2e8641716ed65ada8b6f","modified":1611313757620},{"_id":"themes/icarus/includes/specs/meta.spec.js","hash":"28863042ad8fcf9ecb86d5288ecd3ce5250a984d","modified":1611313757620},{"_id":"themes/icarus/includes/specs/search.spec.js","hash":"1e3995cdc471e6a2817cd45e2b6f0fd39b4540ec","modified":1611313757620},{"_id":"themes/icarus/includes/specs/share.spec.js","hash":"5ec65409a17ead13974140fc5ddc19e526586d9f","modified":1611313757620},{"_id":"themes/icarus/includes/specs/sidebar.spec.js","hash":"630c9701affe2549abc61cd4d1e5153af2224fb6","modified":1611313757620},{"_id":"themes/icarus/includes/specs/plugins.spec.js","hash":"2f33728c24d3076dbbd48a7aeb467d2600d07577","modified":1611313757620},{"_id":"themes/icarus/includes/tasks/check_config.js","hash":"ce7626d643737c90dee6b75435ccdec26b89dacf","modified":1611313757620},{"_id":"themes/icarus/includes/specs/widgets.spec.js","hash":"48ceaab9ef8221bfffd7baabc57c4d6de7240750","modified":1611313757620},{"_id":"themes/icarus/includes/tasks/welcome.js","hash":"00d1ef8c9609552b82e9a5140b838a9057c59508","modified":1611313757620},{"_id":"themes/icarus/includes/tasks/check_deps.js","hash":"cfc357f27116d1b9285a3b0bec35c3e89ae73711","modified":1611313757620},{"_id":"themes/icarus/layout/common/article.ejs","hash":"18407831551e9766024eaadea971409a466db8ce","modified":1611313757622},{"_id":"themes/icarus/layout/common/footer.ejs","hash":"57cd672861fbe4c92ce44711e5f8fddb9e195506","modified":1611313757622},{"_id":"themes/icarus/layout/common/head.ejs","hash":"eb22178f5c80ca1c1f5c8b96d2b3b6b28481c62f","modified":1611313757622},{"_id":"themes/icarus/layout/common/paginator.ejs","hash":"7837d80b27f166161b3deeffb571680025c7d723","modified":1611313757623},{"_id":"themes/icarus/layout/common/navbar.ejs","hash":"24f23b434ceb5514f9fa8c7e2c8af20ae01ff2df","modified":1611313757623},{"_id":"themes/icarus/layout/common/widget.ejs","hash":"5417af9f208d2fb5aaeb96031caa261e9683557c","modified":1611313757623},{"_id":"themes/icarus/layout/common/scripts.ejs","hash":"5414d6bfbf88efa7e72ccf7e44a79d0378ddeb77","modified":1611313757623},{"_id":"themes/icarus/layout/donate/alipay.ejs","hash":"3290058879973e403a05472a0fe2ac0219d5b961","modified":1611313757623},{"_id":"themes/icarus/layout/donate/patreon.ejs","hash":"8e52a9c28ffaf4b0b786a20977b848c5f60f2274","modified":1611313757623},{"_id":"themes/icarus/layout/donate/paypal.ejs","hash":"3975dee39f9378975b9c10f37d118ad7cb6f5bf6","modified":1611313757623},{"_id":"themes/icarus/layout/donate/wechat.ejs","hash":"051b873e1fc28c1d7c2d6443991b6a2f43813e6b","modified":1611313757623},{"_id":"themes/icarus/layout/comment/disqus.ejs","hash":"b5fff46e453d58baa20028a47fd85923494bb85c","modified":1611313757622},{"_id":"themes/icarus/layout/comment/changyan.ejs","hash":"9ccc7ec354b968e60bdcfcd1dba451d38de61f12","modified":1611313757622},{"_id":"themes/icarus/layout/comment/facebook.ejs","hash":"b38ea86a1cae48f671501af74d7f109f63fb3d72","modified":1611313757622},{"_id":"themes/icarus/layout/comment/gitalk.ejs","hash":"8a9172d7c9a8f050dc978a06e0f0998ba2e9c61a","modified":1611313757622},{"_id":"themes/icarus/layout/comment/gitment.ejs","hash":"886026a36495f3c57cdef46bc9e9a94a0e390eb0","modified":1611313757622},{"_id":"themes/icarus/layout/comment/isso.ejs","hash":"cc6a43bd24be764086f88ad7c5c97ff04df87e0b","modified":1611313757622},{"_id":"themes/icarus/layout/comment/livere.ejs","hash":"12ff9a345f6bba2f732f592e39508c2afde89b00","modified":1611313757622},{"_id":"themes/icarus/layout/comment/valine.ejs","hash":"a29cf2e69f66a37ddcec8343c60af1e676dcb77d","modified":1611313757622},{"_id":"themes/icarus/layout/plugin/animejs.ejs","hash":"198062ef863c96aa4d6a8225d575afcb60dfb1d1","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/baidu-analytics.ejs","hash":"eb66e313ad43ec4424b2d75bae94e5c8a7568428","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/back-to-top.ejs","hash":"79d1118a3d3ebc521ffce452b986b504f0e7d6b7","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/busuanzi.ejs","hash":"205dedf8f97e328bb3182dc8daebd2e2b2204aca","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/gallery.ejs","hash":"ad68fafd923747d6b7c1b5873d00989d1639678c","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/google-analytics.ejs","hash":"282cecb28ac458b71b56cf429c72ffac0f820199","modified":1611313757624},{"_id":"themes/icarus/layout/plugin/clipboard.ejs","hash":"8662ed9c211f3993b93eedcf5e41c2a1ddbede57","modified":1611313757623},{"_id":"themes/icarus/layout/plugin/hotjar.ejs","hash":"2b97737d802984750a7b4461fcf68818a57a2439","modified":1611313757624},{"_id":"themes/icarus/layout/plugin/progressbar.ejs","hash":"e594ed6705bccbef27f49d84b6153f6443efbecd","modified":1611313757624},{"_id":"themes/icarus/layout/share/addthis.ejs","hash":"f1c5f337333009d5f00dfbac4864a16ef8f9cb8d","modified":1611313757624},{"_id":"themes/icarus/layout/plugin/outdated-browser.ejs","hash":"fe051093893c64c8575bcc67dc1c146d409e8e80","modified":1611313757624},{"_id":"themes/icarus/layout/plugin/mathjax.ejs","hash":"667aabb6b9cb4d707b37975af794d4a3c66b5264","modified":1611313757624},{"_id":"themes/icarus/layout/share/sharejs.ejs","hash":"65d08316cc479910ea4f526cd1c299d0104daf7f","modified":1611313757624},{"_id":"themes/icarus/layout/share/addtoany.ejs","hash":"04cb247d8c83ca7c5b52f3b11bb3ac155b1bc3ab","modified":1611313757624},{"_id":"themes/icarus/layout/share/bdshare.ejs","hash":"f14c8084b7ee16a091f0bd2ae9039e3bfff7e7b7","modified":1611313757624},{"_id":"themes/icarus/layout/widget/archive.ejs","hash":"eb738a2ac2935ce7a542964d90088613b281dd15","modified":1611313757624},{"_id":"themes/icarus/layout/widget/category.ejs","hash":"c2a9f2211a21a168c54b0563cdfd58bd25fa39fe","modified":1611313757625},{"_id":"themes/icarus/layout/widget/links.ejs","hash":"2b707fd65c94b00d8b4c6755fbc6c19709f3d49a","modified":1611313757625},{"_id":"themes/icarus/layout/share/sharethis.ejs","hash":"4f2c40f790f3be0a4e79db04f02ea41ba2f4d4c0","modified":1611313757624},{"_id":"themes/icarus/layout/widget/profile.ejs","hash":"ef66b06afb0c350901c7d55e091d1b2718540706","modified":1611313757625},{"_id":"themes/icarus/layout/widget/recent_posts.ejs","hash":"2166f3190e47bf4746775b5d16654564a88c2041","modified":1611313757625},{"_id":"themes/icarus/layout/widget/tag.ejs","hash":"8c5b8020ca776cc3ebbc7b723915f3173efc28d4","modified":1611313757625},{"_id":"themes/icarus/layout/widget/tagcloud.ejs","hash":"d32e7c56e8e2074da16d9141f9a597841d28d07d","modified":1611313757625},{"_id":"themes/icarus/layout/widget/toc.ejs","hash":"bdc6f22602cdabe7c740f1818e0681ff8508fb64","modified":1611313757625},{"_id":"themes/icarus/layout/search/baidu.ejs","hash":"850aa91778100d693a52b10eaa8586c8e3215ee6","modified":1611313757624},{"_id":"themes/icarus/layout/search/google-cse.ejs","hash":"4b881a99325a6a0cebf97ac53e09d8fc67f87d29","modified":1611313757624},{"_id":"themes/icarus/layout/search/insight.ejs","hash":"9a27db2a007582ceee7ca4b1eebddbd456893568","modified":1611313757624},{"_id":"themes/icarus/source/css/insight.css","hash":"7d2ea63ff691619c9a18bafc7f09b8c6f3af680e","modified":1611313757625},{"_id":"themes/icarus/source/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1611313757625},{"_id":"themes/icarus/source/css/back-to-top.css","hash":"51c4769018192f9acdde240bfbc5e3b50d353de0","modified":1611313757625},{"_id":"themes/icarus/source/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1611313757625},{"_id":"themes/icarus/source/css/search.css","hash":"a51096a31af10f9498a993ad4f01cfebb4dad92a","modified":1611313757625},{"_id":"themes/icarus/source/css/style.styl","hash":"33f6f2a1a84d75a13c173fefd2a790056a1ce761","modified":1611313757625},{"_id":"themes/icarus/source/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1611313757626},{"_id":"themes/icarus/source/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1611313757626},{"_id":"themes/icarus/source/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1611313757626},{"_id":"themes/icarus/source/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1611313757626},{"_id":"themes/icarus/source/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1611313757626},{"_id":"source/images/connections.jpg","hash":"6c0f1442ea85628398a98ca6815ef579a66d29cf","modified":1611313675958},{"_id":"source/images/nodejs.png","hash":"9a21376580dff07986f8db06b1ff9b90cdc25662","modified":1611313675961},{"_id":"source/images/what.jpg","hash":"db49aa552d90b7c74da974107a498ea8f7cb81ef","modified":1611313675962},{"_id":"source/_posts/Implementing-Ports-and-Adapters/goland.png","hash":"e379d4ada7b39286853de1c14026d644911b7b33","modified":1611313675951},{"_id":"source/_posts/Golang-Memory-Leaks/goroutines.png","hash":"b02501e8f81ce85ad54ba1a899a1cf493e59fb67","modified":1611313675935},{"_id":"source/_posts/Golang-Memory-Leaks/malg3.png","hash":"cdcc8003c490127155313be1ac77771ae55438cd","modified":1611313675941},{"_id":"source/_posts/The-Javascript-Event-Loop/nodejs-event-loop-workflow.png","hash":"c77f398ce5bd65d93c552bc6c72c9bebe14162e0","modified":1611313675953},{"_id":"source/images/clean.jpg","hash":"c825dffc8de93d32c471f05bc0007170a9cbae01","modified":1611313675957},{"_id":"source/_posts/Collecting-Docker-Logs-With-Loki/adding-loki.png","hash":"2568c62c12a072710e940c1694e8f08d3dc75c9d","modified":1611313675926},{"_id":"source/_posts/Golang-Memory-Leaks/malg.png","hash":"169843a101f540e3a52cf26b632b447dff1c6a21","modified":1611313675939},{"_id":"source/_posts/Golang-Memory-Leaks/pprof_inuse_space.png","hash":"24ddda884cc7ba95dcbedd1c2cfaebba9477511d","modified":1611313675949},{"_id":"source/_posts/Golang-Memory-Leaks/pprof_alloc_space.png","hash":"ea9b3fb614f7990f726384e0bfb2ec22752ef81a","modified":1611313675945},{"_id":"source/_posts/Collecting-Docker-Logs-With-Loki/grafana-loki.png","hash":"6660fca1d98ec1e1a30ea95b8bf5279a83d8fccb","modified":1611313675932},{"_id":"source/about/index/avatar.png","hash":"e92596b58d5a7949f96a9d52809a2a3824058f86","modified":1611313675956},{"_id":"public/atom.xml","hash":"aef4a96e523d4438e31733a4f45598b7be6acb74","modified":1626714022745},{"_id":"public/post-sitemap.xml","hash":"b193393b5cc0de698a4d731277abe3806737e7ff","modified":1626714022745},{"_id":"public/page-sitemap.xml","hash":"4da70f15b9d54052c75b7c278369f78845fbb34f","modified":1626714022745},{"_id":"public/category-sitemap.xml","hash":"5bcf00a6097feb0418fcff07ebb221757514e305","modified":1626714022745},{"_id":"public/tag-sitemap.xml","hash":"2e0df0b0a9757dd79f680423c5d48995606890ff","modified":1626714022745},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1626714022745},{"_id":"public/sitemap.xml","hash":"d1976eece32b42a9dfa7bfd8f1e09ac70a62ab60","modified":1626714022745},{"_id":"public/content.json","hash":"e7122d6a2dc146483c8ffb2500f71d50177a6505","modified":1626714022745},{"_id":"public/2021/07/19/Auditing-in-Microservices/index.html","hash":"c1f93b2443fad5eddfbeb8450a6a261e81f34cb3","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/index.html","hash":"38f05645eb2b523c87acd23d6a529ff4356d4fd4","modified":1626714022745},{"_id":"public/about/index.html","hash":"7a02521acb767853c9742b4675b0298f786a9ef4","modified":1626714022745},{"_id":"public/2020/03/21/Collecting-Docker-Logs-With-Loki/index.html","hash":"2b5876905c4d67198a3fa8b128ddc458bcb3158b","modified":1626714022745},{"_id":"public/2020/03/07/User-Space-Scheduling/index.html","hash":"2a82b9722d8675edded389818c4304a11a0fd988","modified":1626714022745},{"_id":"public/2019/11/05/what-are-microservices/index.html","hash":"eb5570bb48c02bdaea04d1a02234dd800c3bc005","modified":1626714022745},{"_id":"public/2020/02/01/Implementing-Ports-and-Adapters/index.html","hash":"1ad1a283a5d7f271f76748ab940058077b3fb31b","modified":1626714022745},{"_id":"public/2019/07/16/Microservices-Epiphany/index.html","hash":"a0cf748a0edb2e2fb7ed478ba1bae50e037c8468","modified":1626714022745},{"_id":"public/2019/07/03/Authentication-Middleware-In-Elixir/index.html","hash":"bfdf58b1d1d9d429dfe5a91bad5cf398baa90534","modified":1626714022745},{"_id":"public/2019/07/10/Context-Maps-In-Domain-Driven-Design/index.html","hash":"6f5d48f8d832b4991f310701172cf795d7cb1379","modified":1626714022745},{"_id":"public/2019/06/22/Functional-Programming-in-10-minutes/index.html","hash":"6f2b940115a0853ec3783030dad940c9c008b079","modified":1626714022745},{"_id":"public/2019/06/17/Switching-From-Node.js-To-Elixir/index.html","hash":"5a340ae703d5b9d4be9f1b5ff37f714f82ac6824","modified":1626714022745},{"_id":"public/2019/06/11/Implementing-Clean-Architecture/index.html","hash":"f2b606b0f8c35d056e2acbb0fa8e1c2b5bc25355","modified":1626714022745},{"_id":"public/2019/06/09/The-Javascript-Event-Loop/index.html","hash":"8d2b28cdde45720762570520e1c69e42deab16a5","modified":1626714022745},{"_id":"public/archives/index.html","hash":"4aaad4a35d031413054494631a3f200d490d3b78","modified":1626714022745},{"_id":"public/archives/page/2/index.html","hash":"7d896905a28b087e416cae165cd960ddd21b7662","modified":1626714022745},{"_id":"public/archives/2019/index.html","hash":"09ce7f9983f2e2867d918686cf93e1b208b8282d","modified":1626714022745},{"_id":"public/archives/2019/06/index.html","hash":"6bbfafea03160244ee0ae918d7f5a89b260d6a1b","modified":1626714022745},{"_id":"public/archives/2019/07/index.html","hash":"06246b6abc35303d6b0aa070a5c47ed176c33cdb","modified":1626714022745},{"_id":"public/archives/2019/11/index.html","hash":"261ea9f7875df16f3c6919375f97a70c3c024e0a","modified":1626714022745},{"_id":"public/archives/2020/index.html","hash":"6e82993c0d5fbf9535979163af1dcc3bb200da57","modified":1626714022745},{"_id":"public/archives/2020/11/index.html","hash":"497fbef3ee358e095a8c376b0439eca2fd1012af","modified":1626714022745},{"_id":"public/archives/2021/index.html","hash":"2498e6f6b37f65a0c99c87313cf0f35cebde3efb","modified":1626714022745},{"_id":"public/archives/2021/07/index.html","hash":"fc8402dd2a720306951d137aeedf032e06e93ccf","modified":1626714022745},{"_id":"public/archives/2020/02/index.html","hash":"9f1009b3ae08667729f299c79b0301fc9ddf6c55","modified":1626714022745},{"_id":"public/index.html","hash":"c729aa6a006a18685ae6ac5da63d0c86af3db03c","modified":1626714022745},{"_id":"public/archives/2020/03/index.html","hash":"2f544a80587d5415f4b5523d6a11f086d9bd81c9","modified":1626714022745},{"_id":"public/page/2/index.html","hash":"c955383e5d9743d4939c51c43c84195545fbcd42","modified":1626714022745},{"_id":"public/categories/Architecture/index.html","hash":"4e7d1a9d2a25405b42e2509b1a05851812195c69","modified":1626714022745},{"_id":"public/categories/Programming/index.html","hash":"b0a13434cd1d0ff61101990a7b2acd8931b447d9","modified":1626714022745},{"_id":"public/categories/DevOps/index.html","hash":"85f63198e1c793d717ab4f605dc6ce07a7863652","modified":1626714022745},{"_id":"public/categories/Paradigms/index.html","hash":"a3c2c204db22d8b6b4067da39766b92a896ee805","modified":1626714022745},{"_id":"public/tags/Software-Architecture/index.html","hash":"9ed033c85b1987c9a4e794c373fb8daa31c20be1","modified":1626714022745},{"_id":"public/tags/Microservices/index.html","hash":"c2f417a4503aa5b6c721ca91538705c26eecaa32","modified":1626714022745},{"_id":"public/tags/Auditing/index.html","hash":"bc6b901246c690eea95c5b7795321dcdbc4ecceb","modified":1626714022745},{"_id":"public/tags/Event-Sourcing/index.html","hash":"7096f80e049589ef45d2d45e86813d0adf25bad7","modified":1626714022745},{"_id":"public/tags/Golang/index.html","hash":"a76c2af04ed2a6422fc6a06d133ddb430ea024a0","modified":1626714022745},{"_id":"public/tags/Elixir/index.html","hash":"8bdde65c2b7f401b05dc2960689f87bad6fefcf5","modified":1626714022745},{"_id":"public/tags/Middleware/index.html","hash":"2d1430a6f509ae89ba57799cc4abd4e44bd6284a","modified":1626714022745},{"_id":"public/tags/Tutorial/index.html","hash":"005654525ef8e25868a2e38835d84fb655005919","modified":1626714022745},{"_id":"public/tags/Programming-Paradigms/index.html","hash":"80dd65d99d216f6000ce08db09a0e21091fb0319","modified":1626714022745},{"_id":"public/tags/Functional/index.html","hash":"ad8474b722da4d79dc13a7a00c812fccd9ddc160","modified":1626714022745},{"_id":"public/tags/Authentication/index.html","hash":"18338d7f2260661764afebe5ab608b30637ff623","modified":1626714022745},{"_id":"public/tags/DDD/index.html","hash":"40973ced6359531ca5ccef7c61a4ae28be5a5a66","modified":1626714022745},{"_id":"public/tags/Context-Maps/index.html","hash":"36d10df2adb6aa147ae5d21a1c8f97fb8a57265c","modified":1626714022745},{"_id":"public/tags/Docker/index.html","hash":"286c11bc5c3201562db38946a4f6e931179c8dca","modified":1626714022745},{"_id":"public/tags/Logging/index.html","hash":"06cb23da275a0a841be55fa43f265f3e66daecb4","modified":1626714022745},{"_id":"public/tags/Development/index.html","hash":"4015a44b14d60406b2c78700ddd9806e07186f08","modified":1626714022745},{"_id":"public/tags/Loki/index.html","hash":"6b34a2035df4acaf903366e444680ecea48d0433","modified":1626714022745},{"_id":"public/tags/Memory-Leak/index.html","hash":"e528038c4dd27cafa89dcf3f4a928e41104a5139","modified":1626714022745},{"_id":"public/tags/Green-Threads/index.html","hash":"e83be698ca6cf4bbc586523c8c694e5c9bb4f8ad","modified":1626714022745},{"_id":"public/tags/Investigation/index.html","hash":"0c2c7bfe9a60655824ab5df20164d2b0bfdc77cc","modified":1626714022745},{"_id":"public/tags/Profiling/index.html","hash":"77b6b42bd6ad629966f2b64e94fd1144e93f3265","modified":1626714022745},{"_id":"public/tags/Containers/index.html","hash":"e4f058024a869d4e3ceb3fec2d3af6bf70763ee5","modified":1626714022745},{"_id":"public/tags/Actor-Model/index.html","hash":"4eb7a04cf84b5019a2dd3d6e5941ebe2397b19ea","modified":1626714022745},{"_id":"public/tags/Maybe-a-rant/index.html","hash":"c617d4d22a4776c54f2c2e7f8e2e35f880d207f3","modified":1626714022745},{"_id":"public/tags/Node-js/index.html","hash":"aac1f91646b783b88c543ba089176085e066c46b","modified":1626714022745},{"_id":"public/tags/Design/index.html","hash":"2278bc1cf2394e2b63882f87ebc13ea1eec7cc58","modified":1626714022745},{"_id":"public/tags/Backend-For-Frontend/index.html","hash":"1dd23572255df5d0fa9dba26e0cfc2c95d25cdc8","modified":1626714022745},{"_id":"public/tags/Sidecar-Pattern/index.html","hash":"3b38dbf27451ee5ff26e129532cb9d7dadf3dcf0","modified":1626714022745},{"_id":"public/tags/Concurrency/index.html","hash":"1cdd17c7b222bb0658b94a1ff1a413645d7f382c","modified":1626714022745},{"_id":"public/tags/Parallelism/index.html","hash":"e4b82475b35a29299d08b8e6c0e555ecaa4dbf9b","modified":1626714022745},{"_id":"public/tags/Threads/index.html","hash":"647c9590482fb469a012df974430f81e883c7975","modified":1626714022745},{"_id":"public/tags/API-Gateway/index.html","hash":"2580553103edeca61df31fe580ff8a40344c5e62","modified":1626714022745},{"_id":"public/tags/Scheduler/index.html","hash":"a10b3287deba426fe49df304b58d58392db2d145","modified":1626714022745},{"_id":"public/tags/Kernel-Threads/index.html","hash":"f7118433ed8480f5cefdc5454d68fb61b03b2a97","modified":1626714022745},{"_id":"public/tags/Threading-Models/index.html","hash":"bc1dad67368a56104d36aa79710b47bf39c78d53","modified":1626714022745},{"_id":"public/tags/Ports-and-Adapters/index.html","hash":"c68705617585c0ea19216040066720e65a42169e","modified":1626714022745},{"_id":"public/tags/Hexagonal/index.html","hash":"a8e7d3e5eaa0249f66030f44403fdcf97f18c61e","modified":1626714022745},{"_id":"public/tags/Typescript/index.html","hash":"76524d61a7b4ad866553ab6ee48245826308347c","modified":1626714022745},{"_id":"public/tags/Uncle-Bob/index.html","hash":"cb452550cb4954a5575b58846ec48f98eafe077c","modified":1626714022745},{"_id":"public/tags/Clean-Architecture/index.html","hash":"3a801e9f54f21f70b6bc55367caecdeaaf875375","modified":1626714022745},{"_id":"public/tags/Javascript/index.html","hash":"b9a55c234508a49fc5551d0d9713cbd793184f42","modified":1626714022745},{"_id":"public/tags/Event-Loop/index.html","hash":"9c338bb03bf29a4b14ed7e2bd530f319af46ffd4","modified":1626714022745},{"_id":"public/tags/libuv/index.html","hash":"14cad528a2f321928919f91ae7214dba245d4ed1","modified":1626714022745},{"_id":"public/tags/index.html","hash":"02d5d706214b0e6780c45301db9ffd9e7c5a0a8e","modified":1626714022745},{"_id":"public/categories/index.html","hash":"f6314627339cc9e57c5995f48f7a3e233aaefc9f","modified":1626714022745},{"_id":"public/CNAME","hash":"2ec171fbd29fa697db201b20f9dc4493e9a72b1a","modified":1626714022745},{"_id":"public/favicon.ico","hash":"b42c639eb37200d1ba13eee45c4276c83b984033","modified":1626714022745},{"_id":"public/images/legos-2.jpg","hash":"9ebeaf7cdebaa0df52f60332129c0b8b10dd920d","modified":1626714022745},{"_id":"public/images/thumbnail.svg","hash":"036b981b3a9b26e8e473f38d91c931a0fc168978","modified":1626714022745},{"_id":"public/2019/07/10/Context-Maps-In-Domain-Driven-Design/sddd.jpg","hash":"22f4584b5ad00debe6c952f922b36109b7b7e1d2","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/malg2.png","hash":"3d358abbf724cf0444195eb42dbd468594525df7","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/leak.png","hash":"b2c35a757f1bb581cf2ee5b21b3d67576291186d","modified":1626714022745},{"_id":"public/2019/11/05/what-are-microservices/api-composer.png","hash":"702467360548f724747ea6d1c9aab6d8967b40ab","modified":1626714022745},{"_id":"public/2019/11/05/what-are-microservices/gateway.png","hash":"1a9c504086bd84dd8975f22180190bc85a6de60d","modified":1626714022745},{"_id":"public/2019/11/05/what-are-microservices/bff.png","hash":"aa86eca24836cea00127afbf58e67df38016c246","modified":1626714022745},{"_id":"public/2019/11/05/what-are-microservices/side-car.png","hash":"67b6c59d23d295209fe272489a9c4a19604294c1","modified":1626714022745},{"_id":"public/images/audit.png","hash":"d5a45bf045fd8e1c62f274762afd310362e375c5","modified":1626714022745},{"_id":"public/images/Golang.png","hash":"0c0637b6c597bec8608e3aecf464ce2d10dc6345","modified":1626714022745},{"_id":"public/images/golang-ports-and-adapters.png","hash":"5cfa5137f9d384b5f7502460960ad53ee1e35b6e","modified":1626714022745},{"_id":"public/images/multi.jpg","hash":"53322bf498762aeb4e5fe039c19834ee68d87103","modified":1626714022745},{"_id":"public/images/loki.jpg","hash":"f26077af7b06cffaab4341503592de927895e1a3","modified":1626714022745},{"_id":"public/2019/06/11/Implementing-Clean-Architecture/CleanArchitecture.jpg","hash":"35d11d882fe10293ead30f70989bd831cf1d0044","modified":1626714022745},{"_id":"public/2019/06/09/The-Javascript-Event-Loop/loop_iteration.png","hash":"b1d06a5e6d9965267cbddc95219a325e85b3ad2b","modified":1626714022745},{"_id":"public/images/nodejs.png","hash":"9a21376580dff07986f8db06b1ff9b90cdc25662","modified":1626714022745},{"_id":"public/css/progressbar.css","hash":"bbc737b7a8feb19901e792c447a846273779d5c3","modified":1626714022745},{"_id":"public/css/search.css","hash":"a51096a31af10f9498a993ad4f01cfebb4dad92a","modified":1626714022745},{"_id":"public/css/back-to-top.css","hash":"51c4769018192f9acdde240bfbc5e3b50d353de0","modified":1626714022745},{"_id":"public/css/insight.css","hash":"7d2ea63ff691619c9a18bafc7f09b8c6f3af680e","modified":1626714022745},{"_id":"public/js/animation.js","hash":"d744581909d2d092a584be07c39f9d3f0d009ec7","modified":1626714022745},{"_id":"public/js/clipboard.js","hash":"6fdd602268727744b6b2c8ad79d684aab3cffda5","modified":1626714022745},{"_id":"public/js/main.js","hash":"7ff7b7fcde5f6d17e0bb5a2a6baf3633c6420c0c","modified":1626714022745},{"_id":"public/js/back-to-top.js","hash":"b1dcf30577cefe833dc6151757c0a05ea5b5a643","modified":1626714022745},{"_id":"public/js/insight.js","hash":"8ba56fd5e4232a05ccef5f8b733c7ecca0814633","modified":1626714022745},{"_id":"public/css/style.css","hash":"cf1fe806cd033e030578a19f02b03fdac72d950e","modified":1626714022745},{"_id":"public/js/gallery.js","hash":"88b23abfc3b519413be54533ed0f39e0c68fcdd1","modified":1626714022745},{"_id":"public/images/connections.jpg","hash":"6c0f1442ea85628398a98ca6815ef579a66d29cf","modified":1626714022745},{"_id":"public/images/what.jpg","hash":"db49aa552d90b7c74da974107a498ea8f7cb81ef","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/goroutines.png","hash":"b02501e8f81ce85ad54ba1a899a1cf493e59fb67","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/malg3.png","hash":"cdcc8003c490127155313be1ac77771ae55438cd","modified":1626714022745},{"_id":"public/2020/02/01/Implementing-Ports-and-Adapters/goland.png","hash":"e379d4ada7b39286853de1c14026d644911b7b33","modified":1626714022745},{"_id":"public/2019/06/09/The-Javascript-Event-Loop/nodejs-event-loop-workflow.png","hash":"c77f398ce5bd65d93c552bc6c72c9bebe14162e0","modified":1626714022745},{"_id":"public/2020/03/21/Collecting-Docker-Logs-With-Loki/adding-loki.png","hash":"2568c62c12a072710e940c1694e8f08d3dc75c9d","modified":1626714022745},{"_id":"public/images/clean.jpg","hash":"c825dffc8de93d32c471f05bc0007170a9cbae01","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/malg.png","hash":"169843a101f540e3a52cf26b632b447dff1c6a21","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/pprof_inuse_space.png","hash":"24ddda884cc7ba95dcbedd1c2cfaebba9477511d","modified":1626714022745},{"_id":"public/2020/11/07/Golang-Memory-Leaks/pprof_alloc_space.png","hash":"ea9b3fb614f7990f726384e0bfb2ec22752ef81a","modified":1626714022745},{"_id":"public/2020/03/21/Collecting-Docker-Logs-With-Loki/grafana-loki.png","hash":"6660fca1d98ec1e1a30ea95b8bf5279a83d8fccb","modified":1626714022745},{"_id":"public/about/index/avatar.png","hash":"e92596b58d5a7949f96a9d52809a2a3824058f86","modified":1626714022745}],"Category":[{"name":"Architecture","_id":"ckravj1mm000978ta1uuud5uu"},{"name":"Programming","_id":"ckravj1mx000n78ta9web59e5"},{"name":"Paradigms","_id":"ckravj1my000s78ta8wwk59xi"},{"name":"DevOps","_id":"ckravj1n1000y78ta5q0v9w43"},{"name":"..","_id":"ckravj1or004478ta4a9k2d7p"},{"name":"_drafts","parent":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1ov004878ta94yjgfvw"}],"Data":[],"Page":[{"title":"About & Contact","date":"2019-06-09T17:30:47.000Z","toc":false,"_content":"Hey, My name is Yuri Khomyakov.\nI am a senior software developer / tech lead, and an aspiring software architect. I have been coding for the past 7 years. I like reading books about software architecture, design patterns, algorithms, programming paradigms, implementing what I have learned and progress as a software architect. I like building complex applications, cracking tough challenges and creating presentations and talks for my coworkers. I am open to open source collaborations, giving talks and talking over a cup of coffee.\n\nEmail: yurik1776@gmail.com\nGithub: https://github.com/yuraxdrumz\nLinkedIn: https://www.linkedin.com/in/yuri-khomyakov-383278125/\n","source":"about/index.md","raw":"---\ntitle: About & Contact\ndate: 2019-06-09 20:30:47\ntoc: false\n---\nHey, My name is Yuri Khomyakov.\nI am a senior software developer / tech lead, and an aspiring software architect. I have been coding for the past 7 years. I like reading books about software architecture, design patterns, algorithms, programming paradigms, implementing what I have learned and progress as a software architect. I like building complex applications, cracking tough challenges and creating presentations and talks for my coworkers. I am open to open source collaborations, giving talks and talking over a cup of coffee.\n\nEmail: yurik1776@gmail.com\nGithub: https://github.com/yuraxdrumz\nLinkedIn: https://www.linkedin.com/in/yuri-khomyakov-383278125/\n","updated":"2021-07-08T17:55:12.611Z","path":"about/index.html","comments":1,"layout":"page","_id":"ckravj1ma000078ta23ez47b8","content":"<p>Hey, My name is Yuri Khomyakov.<br>I am a senior software developer / tech lead, and an aspiring software architect. I have been coding for the past 7 years. I like reading books about software architecture, design patterns, algorithms, programming paradigms, implementing what I have learned and progress as a software architect. I like building complex applications, cracking tough challenges and creating presentations and talks for my coworkers. I am open to open source collaborations, giving talks and talking over a cup of coffee.</p>\n<p>Email: <a href=\"mailto:yurik1776@gmail.com\">yurik1776@gmail.com</a><br>Github: <a href=\"https://github.com/yuraxdrumz\">https://github.com/yuraxdrumz</a><br>LinkedIn: <a href=\"https://www.linkedin.com/in/yuri-khomyakov-383278125/\">https://www.linkedin.com/in/yuri-khomyakov-383278125/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hey, My name is Yuri Khomyakov.<br>I am a senior software developer / tech lead, and an aspiring software architect. I have been coding for the past 7 years. I like reading books about software architecture, design patterns, algorithms, programming paradigms, implementing what I have learned and progress as a software architect. I like building complex applications, cracking tough challenges and creating presentations and talks for my coworkers. I am open to open source collaborations, giving talks and talking over a cup of coffee.</p>\n<p>Email: <a href=\"mailto:yurik1776@gmail.com\">yurik1776@gmail.com</a><br>Github: <a href=\"https://github.com/yuraxdrumz\">https://github.com/yuraxdrumz</a><br>LinkedIn: <a href=\"https://www.linkedin.com/in/yuri-khomyakov-383278125/\">https://www.linkedin.com/in/yuri-khomyakov-383278125/</a></p>\n"}],"Post":[{"title":"Concurrency in Golang","_content":"","source":"_drafts/Concurrency-in-Golang.md","raw":"---\ntitle: Concurrency in Golang\ntags:\n---\n","slug":"Concurrency-in-Golang","published":0,"date":"2021-01-22T11:07:55.924Z","updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1mc000178ta0gui1c4r","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Docker Deep Dive","_content":"","source":"_drafts/Docker-Deep-Dive.md","raw":"---\ntitle: Docker Deep Dive\ntags:\n---\n","slug":"Docker-Deep-Dive","published":0,"date":"2021-01-22T11:07:55.924Z","updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1mf000278tabespb9l6","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Long Running Processes","_content":"","source":"_drafts/Long-Running-Processes.md","raw":"---\ntitle: Long Running Processes\ntags:\n---\n","slug":"Long-Running-Processes","published":0,"date":"2021-01-22T11:07:55.924Z","updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1mh000378ta4wji3kou","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Event Storming","_content":"","source":"_drafts/Event-Storming.md","raw":"---\ntitle: Event Storming\ntags:\n---\n","slug":"Event-Storming","published":0,"date":"2021-02-08T23:54:16.535Z","updated":"2021-02-08T23:54:16.536Z","_id":"ckravj1mi000478ta6mwb4bay","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tackling Auditing in Microservices","_content":"## Use Case (Audit Issues No One Talks About)\n\nWe provide zero trust network access at my current company. Any organization can run a docker container, which we provide, inside its vLANs [5] and then they gain access to my company's SaaS UI, which allows administrators to limit users to various resources in the organization, with full visibility in a secure fashion, all without using VPNs. Working with zero trust access means auditing is a first class citizen. Each time a user or an administrator (a person who manages its users), does an operation, it must be available for viewing with as much detail as possible.\n\n### Asynchronous, Synchronous Or Both ?\n\nDue to various security and compliance concerns, our proxies, which are responsible for the ZTNA [6] solution my company provides, are completely isolated from the cluster where all the users, applications, audit and 2x more services reside. This means, I had to decouple the sending and receiving of audits for the proxies.\nThe services that did have access to the audit service called it directly in a sychronous manner, while the proxies received a secret and a key for an SNS topic in AWS on startup, which they sent the audits to in an asynchronous manner.\n\nThe audit service knew to listen both on a network port for direct communication as well as asynchronously poll an SQS queue, which was subscribed to the SNS topic. When receiving an audit synchronously, the audit service would save the audit in MongoDB and publish it to the SNS like the proxies would with a filter policy to avoid consuming the audit again via the asynchronous route.\n\n### How Many Structs Do I Keep ?\n\nBefore the audit refactor, each audit message had its own golang struct.\nEach message sent from the proxies was read from the SQS as json, unmarshalled to its appropriate Golang struct, marshalled back to bson and then saved to MongoDB.\n\nThis solution posed several issues:\n\n1. Each new audit must be added as a new struct both on the proxies as well as the audit service.\n2. MongoDb is a main-follower topology, meaning all writes will go to the main db and all reads will occur in the followers. With the audits, we were heavy on writes and had very few reads.\n3. Reading the data back was a pain, as we had to extract the bson from MongoDB, derive what type of bson it is, create the appropriate struct for it and populate it. This meant, a large switch case, which had to be modified with each addition of an audit.\n\nInsert example\n\n```golang\n\nconst (\n    UserLoggedIn = iota + 1\n    AppRemovedFromGroup\n)\n\ntype AuditType struct {\n    AuditType string `json:\"audit_type\" bson:\"audit_type\"`\n}\n\ntype BaseAudit struct {\n    Id string `json:\"id\" bson: \"id\"`\n    Name string `json:\"name\" bson: \"name\"`\n    CreatedAt string `json:\"created_at\" bson: \"created_at\"`\n    ProcessedAt string `json:\"processed_at\" bson: \"processed_at\"`\n    Description string `json:\"description\" bson: \"description\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n}\n\ntype UserLoggedIn struct {\n    BaseAudit string `json:\",inline\" bson:\",inline\"`\n    UserId string `json:\"user_id\" bson: \"user_id\"`\n    Organization string `json:\"organization\" bson: \"organization\"`\n}\n\ntype AppRemovedFromGroup struct {\n    BaseAudit string `json:\",inline\" bson:\",inline\"`\n    AppId string `json:\"app_id\" bson: \"app_id\"`\n    GroupId string `json:\"group_id\" bson: \"group_id\"`\n    Organization string `json:\"organization\" bson: \"organization\"`\n    Initiator string `json:\"initiator\" bson: \"initiator\"`\n}\n\nfunc (a *Audit) ReadMessage() error {\n    message := a.sqs.ReadMessage(...opts)\n    \n    auditType := &AuditType{}\n\n    err := json.Unmarshal(auditType)\n    if err != nil {\n        return err\n    }\n\n    switch auditType.AuditType{\n        case *UserLoggedIn:\n            userLoggedIn := &UserLoggedIn{}\n            err := json.Unmarshal(userLoggedIn)\n            if err != nil {\n                return err\n            }\n        case *AppRemovedFromGroup:\n            appRemovedFromGroup := &AppRemovedFromGroup{}\n            err := json.Unmarshal(appRemovedFromGroup)\n            if err != nil {\n                return err\n            }       \n    }\n}\n\n```\n\nReading\n\n```golang\n\nfunc (a *Audit) GetAudits() ([]interface{}, error) {\n    var audits []interface{}\n    retrieved, err := a.auditStore.GetAudits()\n    for _, doc := range retrieved {\n        docType, ok := doc[\"type\"]\n        if !ok {\n            return nil, errors.New(fmt.Sprintf(\"bson doc must have a type, doc=%+v\", doc))\n        }\n        switch docType {\n            ...\n        }\n    }\n    return audits\n}\n```\n\nAs you can see, it was a nightmare to maintain.\n\nBecause we had about 40 types of audit logs and all of them had the BaseAudit plus a few fields, I decided to unify all audit types to a single audit struct. That way, the sending and receiving sides can send any string value in the audit_type field and no further changes are needed. Upon inserting or querying the audit data, if a field doesn't exist, it will be omitted.\n\n```golang\n\nconst (\n    UserLoggedIn = iota + 1\n    AppRemovedFromGroup\n)\n\ntype AuditType struct {\n    AuditType string `json:\"audit_type\" bson:\"audit_type\"`\n}\n\ntype Audit struct {\n    Id string `json:\"id,omitempty\" bson: \"id,omitempty\"`\n    Name string `json:\"name,omitempty\" bson: \"name,omitempty\"`\n    CreatedAt string `json:\"created_at,omitempty\" bson: \"created_at,omitempty\"`\n    ProcessedAt string `json:\"processed_at,omitempty\" bson: \"processed_at,omitempty\"`\n    Description string `json:\"description,omitempty\" bson: \"description,omitempty\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n    UserId string `json:\"user_id,omitempty\" bson: \"user_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    AppId string `json:\"app_id,omitempty\" bson: \"app_id,omitempty\"`\n    GroupId string `json:\"group_id,omitempty\" bson: \"group_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    Initiator string `json:\"initiator,omitempty\" bson: \"initiator,omitempty\"`\n}\n\nfunc (a *Audit) ReadMessage() error {\n    message := a.sqs.ReadMessage(...opts)\n    \n    audit := &Audit{}\n\n    err := json.Unmarshal(audit)\n    if err != nil {\n        return err\n    }\n\n    err := a.db.Save(audit)\n    if err != nil {\n        return err\n    }\n}\n\n```\n\nReading\n\n```golang\n\nfunc (a *Audit) GetAudits() ([]*Audit, error) {\n    var audits []*Audit\n    retrieved, err := a.auditStore.GetAudits()\n    if err != nil {\n        return nil, err\n    }\n\n    for _, doc := range retrieved {\n        audits = append(audits, doc.ToAudit())\n    }\n    return audits, nil\n}\n```\n\n### Enrichment\n\nWhen creating an audit like the one below, an administrator expects to see something like `System configuration under site X changed from Y to Z` or `User X accessed resource Y`.\n\n```golang\ntype Audit struct {\n    Id string `json:\"id,omitempty\" bson: \"id,omitempty\"`\n    Name string `json:\"name,omitempty\" bson: \"name,omitempty\"`\n    CreatedAt string `json:\"created_at,omitempty\" bson: \"created_at,omitempty\"`\n    ProcessedAt string `json:\"processed_at,omitempty\" bson: \"processed_at,omitempty\"`\n    Description string `json:\"description,omitempty\" bson: \"description,omitempty\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n    UserId string `json:\"user_id,omitempty\" bson: \"user_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    AppId string `json:\"app_id,omitempty\" bson: \"app_id,omitempty\"`\n    GroupId string `json:\"group_id,omitempty\" bson: \"group_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    Initiator string `json:\"initiator,omitempty\" bson: \"initiator,omitempty\"`\n}\n```\n\nThe issue here, is, we only have `x_id` fields without the actual data.\nThis meant, for each administrator that requested to see the audit log, we needed to enrich each user_id, app_id, etc. from their respective micro-services.\n\nAnother issue was that with each audit sent via the SNS, there are several consumers, apart from the audit service. For instance, we allow customers to receive the audits as they happen to any endpoint / S3 bucket, which posed serious performance issues to the micro-services, which were part of the data enrichment process.\nFor each new consumer subscribed to the SNS topic, the services received more queries. At first a redis cache was added to help with the performance issues.\n\nThe issue above really reminds me of querying in event sourcing, where without CQRS we must reconstruct the state all over again for each query.\n\nThe possible solutions to mitigate the issue were:\n\n1. Keep a snapshot db for the audits, similar to CQRS. But, because we send the audit to several consumers at once, keeping a snapshot db would not really help for consumers other than the audit service.\n\n2. Pass the data enriched. This solution increases the amount of data we send, but removes the load on the micro-services needed for data enrichment afterwards. On top of that, we can add any number of consumers and all will receive data already enriched.\n\nI went with passing the data enriched. Because of the nature of the product, all places that call the audit service in a synchronous manner already have the data at hand, either by querying in advance or by receiving it from another service.\n\nThe last piece of the puzzle was the proxies, which do not have access to any of the services that own the data needed.\nOn each user connection, the proxies ask our control plane, if the user is allowed. The control plane, which is where all of our services reside returns a rule to the proxy, which is an instruction on what the user is allowed to do and where he/she is allowed to access. I added all the audit data on the rule, which the proxy then sent to SNS together with its data.\n\n## Summary\n\nWe saw several implementation options for auditing together with a summary table that shows the implementation complexity, scalability and integration with existing architecture levels. Afterwards, I introduced a real world use case, I had the chance to implement. We saw how we can integrate with the audit service both synchronously and asynchronously. Afterwards, we saw how a unified audit struct helped with introduction of new audits and maintenance of existing ones. At last, we saw how enriching the data beforehand, removed a lot of stress from the system and future proofed new consumers that subscribe to the auditing topic.\n\n## Bibliography\n\n1. [logging-levels](https://sematext.com/blog/logging-levels)\n2. [event-sourcing](https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing)\n3. [event-sourcing-microservices](https://microservices.io/patterns/data/event-sourcing.html)\n4. [cqrs](https://martinfowler.com/bliki/CQRS.html)\n5. [vLAN](https://en.wikipedia.org/wiki/Virtual_LAN)\n6. [ZTNA](https://www.gartner.com/en/information-technology/glossary/zero-trust-network-access-ztna-)\n","source":"_drafts/Tackling-Auditing-in-Microservices.md","raw":"---\ntitle: Tackling Auditing in Microservices\ntags:\n---\n## Use Case (Audit Issues No One Talks About)\n\nWe provide zero trust network access at my current company. Any organization can run a docker container, which we provide, inside its vLANs [5] and then they gain access to my company's SaaS UI, which allows administrators to limit users to various resources in the organization, with full visibility in a secure fashion, all without using VPNs. Working with zero trust access means auditing is a first class citizen. Each time a user or an administrator (a person who manages its users), does an operation, it must be available for viewing with as much detail as possible.\n\n### Asynchronous, Synchronous Or Both ?\n\nDue to various security and compliance concerns, our proxies, which are responsible for the ZTNA [6] solution my company provides, are completely isolated from the cluster where all the users, applications, audit and 2x more services reside. This means, I had to decouple the sending and receiving of audits for the proxies.\nThe services that did have access to the audit service called it directly in a sychronous manner, while the proxies received a secret and a key for an SNS topic in AWS on startup, which they sent the audits to in an asynchronous manner.\n\nThe audit service knew to listen both on a network port for direct communication as well as asynchronously poll an SQS queue, which was subscribed to the SNS topic. When receiving an audit synchronously, the audit service would save the audit in MongoDB and publish it to the SNS like the proxies would with a filter policy to avoid consuming the audit again via the asynchronous route.\n\n### How Many Structs Do I Keep ?\n\nBefore the audit refactor, each audit message had its own golang struct.\nEach message sent from the proxies was read from the SQS as json, unmarshalled to its appropriate Golang struct, marshalled back to bson and then saved to MongoDB.\n\nThis solution posed several issues:\n\n1. Each new audit must be added as a new struct both on the proxies as well as the audit service.\n2. MongoDb is a main-follower topology, meaning all writes will go to the main db and all reads will occur in the followers. With the audits, we were heavy on writes and had very few reads.\n3. Reading the data back was a pain, as we had to extract the bson from MongoDB, derive what type of bson it is, create the appropriate struct for it and populate it. This meant, a large switch case, which had to be modified with each addition of an audit.\n\nInsert example\n\n```golang\n\nconst (\n    UserLoggedIn = iota + 1\n    AppRemovedFromGroup\n)\n\ntype AuditType struct {\n    AuditType string `json:\"audit_type\" bson:\"audit_type\"`\n}\n\ntype BaseAudit struct {\n    Id string `json:\"id\" bson: \"id\"`\n    Name string `json:\"name\" bson: \"name\"`\n    CreatedAt string `json:\"created_at\" bson: \"created_at\"`\n    ProcessedAt string `json:\"processed_at\" bson: \"processed_at\"`\n    Description string `json:\"description\" bson: \"description\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n}\n\ntype UserLoggedIn struct {\n    BaseAudit string `json:\",inline\" bson:\",inline\"`\n    UserId string `json:\"user_id\" bson: \"user_id\"`\n    Organization string `json:\"organization\" bson: \"organization\"`\n}\n\ntype AppRemovedFromGroup struct {\n    BaseAudit string `json:\",inline\" bson:\",inline\"`\n    AppId string `json:\"app_id\" bson: \"app_id\"`\n    GroupId string `json:\"group_id\" bson: \"group_id\"`\n    Organization string `json:\"organization\" bson: \"organization\"`\n    Initiator string `json:\"initiator\" bson: \"initiator\"`\n}\n\nfunc (a *Audit) ReadMessage() error {\n    message := a.sqs.ReadMessage(...opts)\n    \n    auditType := &AuditType{}\n\n    err := json.Unmarshal(auditType)\n    if err != nil {\n        return err\n    }\n\n    switch auditType.AuditType{\n        case *UserLoggedIn:\n            userLoggedIn := &UserLoggedIn{}\n            err := json.Unmarshal(userLoggedIn)\n            if err != nil {\n                return err\n            }\n        case *AppRemovedFromGroup:\n            appRemovedFromGroup := &AppRemovedFromGroup{}\n            err := json.Unmarshal(appRemovedFromGroup)\n            if err != nil {\n                return err\n            }       \n    }\n}\n\n```\n\nReading\n\n```golang\n\nfunc (a *Audit) GetAudits() ([]interface{}, error) {\n    var audits []interface{}\n    retrieved, err := a.auditStore.GetAudits()\n    for _, doc := range retrieved {\n        docType, ok := doc[\"type\"]\n        if !ok {\n            return nil, errors.New(fmt.Sprintf(\"bson doc must have a type, doc=%+v\", doc))\n        }\n        switch docType {\n            ...\n        }\n    }\n    return audits\n}\n```\n\nAs you can see, it was a nightmare to maintain.\n\nBecause we had about 40 types of audit logs and all of them had the BaseAudit plus a few fields, I decided to unify all audit types to a single audit struct. That way, the sending and receiving sides can send any string value in the audit_type field and no further changes are needed. Upon inserting or querying the audit data, if a field doesn't exist, it will be omitted.\n\n```golang\n\nconst (\n    UserLoggedIn = iota + 1\n    AppRemovedFromGroup\n)\n\ntype AuditType struct {\n    AuditType string `json:\"audit_type\" bson:\"audit_type\"`\n}\n\ntype Audit struct {\n    Id string `json:\"id,omitempty\" bson: \"id,omitempty\"`\n    Name string `json:\"name,omitempty\" bson: \"name,omitempty\"`\n    CreatedAt string `json:\"created_at,omitempty\" bson: \"created_at,omitempty\"`\n    ProcessedAt string `json:\"processed_at,omitempty\" bson: \"processed_at,omitempty\"`\n    Description string `json:\"description,omitempty\" bson: \"description,omitempty\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n    UserId string `json:\"user_id,omitempty\" bson: \"user_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    AppId string `json:\"app_id,omitempty\" bson: \"app_id,omitempty\"`\n    GroupId string `json:\"group_id,omitempty\" bson: \"group_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    Initiator string `json:\"initiator,omitempty\" bson: \"initiator,omitempty\"`\n}\n\nfunc (a *Audit) ReadMessage() error {\n    message := a.sqs.ReadMessage(...opts)\n    \n    audit := &Audit{}\n\n    err := json.Unmarshal(audit)\n    if err != nil {\n        return err\n    }\n\n    err := a.db.Save(audit)\n    if err != nil {\n        return err\n    }\n}\n\n```\n\nReading\n\n```golang\n\nfunc (a *Audit) GetAudits() ([]*Audit, error) {\n    var audits []*Audit\n    retrieved, err := a.auditStore.GetAudits()\n    if err != nil {\n        return nil, err\n    }\n\n    for _, doc := range retrieved {\n        audits = append(audits, doc.ToAudit())\n    }\n    return audits, nil\n}\n```\n\n### Enrichment\n\nWhen creating an audit like the one below, an administrator expects to see something like `System configuration under site X changed from Y to Z` or `User X accessed resource Y`.\n\n```golang\ntype Audit struct {\n    Id string `json:\"id,omitempty\" bson: \"id,omitempty\"`\n    Name string `json:\"name,omitempty\" bson: \"name,omitempty\"`\n    CreatedAt string `json:\"created_at,omitempty\" bson: \"created_at,omitempty\"`\n    ProcessedAt string `json:\"processed_at,omitempty\" bson: \"processed_at,omitempty\"`\n    Description string `json:\"description,omitempty\" bson: \"description,omitempty\"`\n    AuditType AuditType `json:\",inline\" bson: \",inline\"`\n    UserId string `json:\"user_id,omitempty\" bson: \"user_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    AppId string `json:\"app_id,omitempty\" bson: \"app_id,omitempty\"`\n    GroupId string `json:\"group_id,omitempty\" bson: \"group_id,omitempty\"`\n    Organization string `json:\"organization,omitempty\" bson: \"organization,omitempty\"`\n    Initiator string `json:\"initiator,omitempty\" bson: \"initiator,omitempty\"`\n}\n```\n\nThe issue here, is, we only have `x_id` fields without the actual data.\nThis meant, for each administrator that requested to see the audit log, we needed to enrich each user_id, app_id, etc. from their respective micro-services.\n\nAnother issue was that with each audit sent via the SNS, there are several consumers, apart from the audit service. For instance, we allow customers to receive the audits as they happen to any endpoint / S3 bucket, which posed serious performance issues to the micro-services, which were part of the data enrichment process.\nFor each new consumer subscribed to the SNS topic, the services received more queries. At first a redis cache was added to help with the performance issues.\n\nThe issue above really reminds me of querying in event sourcing, where without CQRS we must reconstruct the state all over again for each query.\n\nThe possible solutions to mitigate the issue were:\n\n1. Keep a snapshot db for the audits, similar to CQRS. But, because we send the audit to several consumers at once, keeping a snapshot db would not really help for consumers other than the audit service.\n\n2. Pass the data enriched. This solution increases the amount of data we send, but removes the load on the micro-services needed for data enrichment afterwards. On top of that, we can add any number of consumers and all will receive data already enriched.\n\nI went with passing the data enriched. Because of the nature of the product, all places that call the audit service in a synchronous manner already have the data at hand, either by querying in advance or by receiving it from another service.\n\nThe last piece of the puzzle was the proxies, which do not have access to any of the services that own the data needed.\nOn each user connection, the proxies ask our control plane, if the user is allowed. The control plane, which is where all of our services reside returns a rule to the proxy, which is an instruction on what the user is allowed to do and where he/she is allowed to access. I added all the audit data on the rule, which the proxy then sent to SNS together with its data.\n\n## Summary\n\nWe saw several implementation options for auditing together with a summary table that shows the implementation complexity, scalability and integration with existing architecture levels. Afterwards, I introduced a real world use case, I had the chance to implement. We saw how we can integrate with the audit service both synchronously and asynchronously. Afterwards, we saw how a unified audit struct helped with introduction of new audits and maintenance of existing ones. At last, we saw how enriching the data beforehand, removed a lot of stress from the system and future proofed new consumers that subscribe to the auditing topic.\n\n## Bibliography\n\n1. [logging-levels](https://sematext.com/blog/logging-levels)\n2. [event-sourcing](https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing)\n3. [event-sourcing-microservices](https://microservices.io/patterns/data/event-sourcing.html)\n4. [cqrs](https://martinfowler.com/bliki/CQRS.html)\n5. [vLAN](https://en.wikipedia.org/wiki/Virtual_LAN)\n6. [ZTNA](https://www.gartner.com/en/information-technology/glossary/zero-trust-network-access-ztna-)\n","slug":"Tackling-Auditing-in-Microservices","published":0,"date":"2021-07-19T16:11:15.140Z","updated":"2021-07-19T16:11:43.975Z","_id":"ckravj1mi000578tadwk56d69","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"Use-Case-Audit-Issues-No-One-Talks-About\"><a href=\"#Use-Case-Audit-Issues-No-One-Talks-About\" class=\"headerlink\" title=\"Use Case (Audit Issues No One Talks About)\"></a>Use Case (Audit Issues No One Talks About)</h2><p>We provide zero trust network access at my current company. Any organization can run a docker container, which we provide, inside its vLANs [5] and then they gain access to my company’s SaaS UI, which allows administrators to limit users to various resources in the organization, with full visibility in a secure fashion, all without using VPNs. Working with zero trust access means auditing is a first class citizen. Each time a user or an administrator (a person who manages its users), does an operation, it must be available for viewing with as much detail as possible.</p>\n<h3 id=\"Asynchronous-Synchronous-Or-Both\"><a href=\"#Asynchronous-Synchronous-Or-Both\" class=\"headerlink\" title=\"Asynchronous, Synchronous Or Both ?\"></a>Asynchronous, Synchronous Or Both ?</h3><p>Due to various security and compliance concerns, our proxies, which are responsible for the ZTNA [6] solution my company provides, are completely isolated from the cluster where all the users, applications, audit and 2x more services reside. This means, I had to decouple the sending and receiving of audits for the proxies.<br>The services that did have access to the audit service called it directly in a sychronous manner, while the proxies received a secret and a key for an SNS topic in AWS on startup, which they sent the audits to in an asynchronous manner.</p>\n<p>The audit service knew to listen both on a network port for direct communication as well as asynchronously poll an SQS queue, which was subscribed to the SNS topic. When receiving an audit synchronously, the audit service would save the audit in MongoDB and publish it to the SNS like the proxies would with a filter policy to avoid consuming the audit again via the asynchronous route.</p>\n<h3 id=\"How-Many-Structs-Do-I-Keep\"><a href=\"#How-Many-Structs-Do-I-Keep\" class=\"headerlink\" title=\"How Many Structs Do I Keep ?\"></a>How Many Structs Do I Keep ?</h3><p>Before the audit refactor, each audit message had its own golang struct.<br>Each message sent from the proxies was read from the SQS as json, unmarshalled to its appropriate Golang struct, marshalled back to bson and then saved to MongoDB.</p>\n<p>This solution posed several issues:</p>\n<ol>\n<li>Each new audit must be added as a new struct both on the proxies as well as the audit service.</li>\n<li>MongoDb is a main-follower topology, meaning all writes will go to the main db and all reads will occur in the followers. With the audits, we were heavy on writes and had very few reads.</li>\n<li>Reading the data back was a pain, as we had to extract the bson from MongoDB, derive what type of bson it is, create the appropriate struct for it and populate it. This meant, a large switch case, which had to be modified with each addition of an audit.</li>\n</ol>\n<p>Insert example</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> (</span><br><span class=\"line\">    UserLoggedIn = <span class=\"hljs-literal\">iota</span> + <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    AppRemovedFromGroup</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> AuditType <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    AuditType <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;audit_type&quot; bson:&quot;audit_type&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> BaseAudit <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot; bson: &quot;id&quot;`</span></span><br><span class=\"line\">    Name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot; bson: &quot;name&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;created_at&quot; bson: &quot;created_at&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;processed_at&quot; bson: &quot;processed_at&quot;`</span></span><br><span class=\"line\">    Description <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;description&quot; bson: &quot;description&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"hljs-string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> UserLoggedIn <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    BaseAudit <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;,inline&quot; bson:&quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;user_id&quot; bson: &quot;user_id&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization&quot; bson: &quot;organization&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> AppRemovedFromGroup <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    BaseAudit <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;,inline&quot; bson:&quot;,inline&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;app_id&quot; bson: &quot;app_id&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;group_id&quot; bson: &quot;group_id&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization&quot; bson: &quot;organization&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;initiator&quot; bson: &quot;initiator&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a *Audit)</span> <span class=\"hljs-title\">ReadMessage</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    message := a.sqs.ReadMessage(...opts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    auditType := &amp;AuditType&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := json.Unmarshal(auditType)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">switch</span> auditType.AuditType&#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">case</span> *UserLoggedIn:</span><br><span class=\"line\">            userLoggedIn := &amp;UserLoggedIn&#123;&#125;</span><br><span class=\"line\">            err := json.Unmarshal(userLoggedIn)</span><br><span class=\"line\">            <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">case</span> *AppRemovedFromGroup:</span><br><span class=\"line\">            appRemovedFromGroup := &amp;AppRemovedFromGroup&#123;&#125;</span><br><span class=\"line\">            err := json.Unmarshal(appRemovedFromGroup)</span><br><span class=\"line\">            <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Reading</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a *Audit)</span> <span class=\"hljs-title\">GetAudits</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">([]<span class=\"hljs-keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> audits []<span class=\"hljs-keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    retrieved, err := a.auditStore.GetAudits()</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> _, doc := <span class=\"hljs-keyword\">range</span> retrieved &#123;</span><br><span class=\"line\">        docType, ok := doc[<span class=\"hljs-string\">&quot;type&quot;</span>]</span><br><span class=\"line\">        <span class=\"hljs-keyword\">if</span> !ok &#123;</span><br><span class=\"line\">            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, errors.New(fmt.Sprintf(<span class=\"hljs-string\">&quot;bson doc must have a type, doc=%+v&quot;</span>, doc))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">switch</span> docType &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> audits</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it was a nightmare to maintain.</p>\n<p>Because we had about 40 types of audit logs and all of them had the BaseAudit plus a few fields, I decided to unify all audit types to a single audit struct. That way, the sending and receiving sides can send any string value in the audit_type field and no further changes are needed. Upon inserting or querying the audit data, if a field doesn’t exist, it will be omitted.</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> (</span><br><span class=\"line\">    UserLoggedIn = <span class=\"hljs-literal\">iota</span> + <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    AppRemovedFromGroup</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> AuditType <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    AuditType <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;audit_type&quot; bson:&quot;audit_type&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Audit <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id,omitempty&quot; bson: &quot;id,omitempty&quot;`</span></span><br><span class=\"line\">    Name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name,omitempty&quot; bson: &quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;created_at,omitempty&quot; bson: &quot;created_at,omitempty&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;processed_at,omitempty&quot; bson: &quot;processed_at,omitempty&quot;`</span></span><br><span class=\"line\">    Description <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;description,omitempty&quot; bson: &quot;description,omitempty&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"hljs-string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;user_id,omitempty&quot; bson: &quot;user_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;app_id,omitempty&quot; bson: &quot;app_id,omitempty&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;group_id,omitempty&quot; bson: &quot;group_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;initiator,omitempty&quot; bson: &quot;initiator,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a *Audit)</span> <span class=\"hljs-title\">ReadMessage</span><span class=\"hljs-params\">()</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    message := a.sqs.ReadMessage(...opts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    audit := &amp;Audit&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := json.Unmarshal(audit)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := a.db.Save(audit)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Reading</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(a *Audit)</span> <span class=\"hljs-title\">GetAudits</span><span class=\"hljs-params\">()</span> <span class=\"hljs-params\">([]*Audit, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">var</span> audits []*Audit</span><br><span class=\"line\">    retrieved, err := a.auditStore.GetAudits()</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> _, doc := <span class=\"hljs-keyword\">range</span> retrieved &#123;</span><br><span class=\"line\">        audits = <span class=\"hljs-built_in\">append</span>(audits, doc.ToAudit())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> audits, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Enrichment\"><a href=\"#Enrichment\" class=\"headerlink\" title=\"Enrichment\"></a>Enrichment</h3><p>When creating an audit like the one below, an administrator expects to see something like <code>System configuration under site X changed from Y to Z</code> or <code>User X accessed resource Y</code>.</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> Audit <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id,omitempty&quot; bson: &quot;id,omitempty&quot;`</span></span><br><span class=\"line\">    Name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name,omitempty&quot; bson: &quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;created_at,omitempty&quot; bson: &quot;created_at,omitempty&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;processed_at,omitempty&quot; bson: &quot;processed_at,omitempty&quot;`</span></span><br><span class=\"line\">    Description <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;description,omitempty&quot; bson: &quot;description,omitempty&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"hljs-string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;user_id,omitempty&quot; bson: &quot;user_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;app_id,omitempty&quot; bson: &quot;app_id,omitempty&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;group_id,omitempty&quot; bson: &quot;group_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;initiator,omitempty&quot; bson: &quot;initiator,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The issue here, is, we only have <code>x_id</code> fields without the actual data.<br>This meant, for each administrator that requested to see the audit log, we needed to enrich each user_id, app_id, etc. from their respective micro-services.</p>\n<p>Another issue was that with each audit sent via the SNS, there are several consumers, apart from the audit service. For instance, we allow customers to receive the audits as they happen to any endpoint / S3 bucket, which posed serious performance issues to the micro-services, which were part of the data enrichment process.<br>For each new consumer subscribed to the SNS topic, the services received more queries. At first a redis cache was added to help with the performance issues.</p>\n<p>The issue above really reminds me of querying in event sourcing, where without CQRS we must reconstruct the state all over again for each query.</p>\n<p>The possible solutions to mitigate the issue were:</p>\n<ol>\n<li><p>Keep a snapshot db for the audits, similar to CQRS. But, because we send the audit to several consumers at once, keeping a snapshot db would not really help for consumers other than the audit service.</p>\n</li>\n<li><p>Pass the data enriched. This solution increases the amount of data we send, but removes the load on the micro-services needed for data enrichment afterwards. On top of that, we can add any number of consumers and all will receive data already enriched.</p>\n</li>\n</ol>\n<p>I went with passing the data enriched. Because of the nature of the product, all places that call the audit service in a synchronous manner already have the data at hand, either by querying in advance or by receiving it from another service.</p>\n<p>The last piece of the puzzle was the proxies, which do not have access to any of the services that own the data needed.<br>On each user connection, the proxies ask our control plane, if the user is allowed. The control plane, which is where all of our services reside returns a rule to the proxy, which is an instruction on what the user is allowed to do and where he/she is allowed to access. I added all the audit data on the rule, which the proxy then sent to SNS together with its data.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw several implementation options for auditing together with a summary table that shows the implementation complexity, scalability and integration with existing architecture levels. Afterwards, I introduced a real world use case, I had the chance to implement. We saw how we can integrate with the audit service both synchronously and asynchronously. Afterwards, we saw how a unified audit struct helped with introduction of new audits and maintenance of existing ones. At last, we saw how enriching the data beforehand, removed a lot of stress from the system and future proofed new consumers that subscribe to the auditing topic.</p>\n<h2 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h2><ol>\n<li><a href=\"https://sematext.com/blog/logging-levels\">logging-levels</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing\">event-sourcing</a></li>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">event-sourcing-microservices</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">cqrs</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Virtual_LAN\">vLAN</a></li>\n<li><a href=\"https://www.gartner.com/en/information-technology/glossary/zero-trust-network-access-ztna-\">ZTNA</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Use-Case-Audit-Issues-No-One-Talks-About\"><a href=\"#Use-Case-Audit-Issues-No-One-Talks-About\" class=\"headerlink\" title=\"Use Case (Audit Issues No One Talks About)\"></a>Use Case (Audit Issues No One Talks About)</h2><p>We provide zero trust network access at my current company. Any organization can run a docker container, which we provide, inside its vLANs [5] and then they gain access to my company’s SaaS UI, which allows administrators to limit users to various resources in the organization, with full visibility in a secure fashion, all without using VPNs. Working with zero trust access means auditing is a first class citizen. Each time a user or an administrator (a person who manages its users), does an operation, it must be available for viewing with as much detail as possible.</p>\n<h3 id=\"Asynchronous-Synchronous-Or-Both\"><a href=\"#Asynchronous-Synchronous-Or-Both\" class=\"headerlink\" title=\"Asynchronous, Synchronous Or Both ?\"></a>Asynchronous, Synchronous Or Both ?</h3><p>Due to various security and compliance concerns, our proxies, which are responsible for the ZTNA [6] solution my company provides, are completely isolated from the cluster where all the users, applications, audit and 2x more services reside. This means, I had to decouple the sending and receiving of audits for the proxies.<br>The services that did have access to the audit service called it directly in a sychronous manner, while the proxies received a secret and a key for an SNS topic in AWS on startup, which they sent the audits to in an asynchronous manner.</p>\n<p>The audit service knew to listen both on a network port for direct communication as well as asynchronously poll an SQS queue, which was subscribed to the SNS topic. When receiving an audit synchronously, the audit service would save the audit in MongoDB and publish it to the SNS like the proxies would with a filter policy to avoid consuming the audit again via the asynchronous route.</p>\n<h3 id=\"How-Many-Structs-Do-I-Keep\"><a href=\"#How-Many-Structs-Do-I-Keep\" class=\"headerlink\" title=\"How Many Structs Do I Keep ?\"></a>How Many Structs Do I Keep ?</h3><p>Before the audit refactor, each audit message had its own golang struct.<br>Each message sent from the proxies was read from the SQS as json, unmarshalled to its appropriate Golang struct, marshalled back to bson and then saved to MongoDB.</p>\n<p>This solution posed several issues:</p>\n<ol>\n<li>Each new audit must be added as a new struct both on the proxies as well as the audit service.</li>\n<li>MongoDb is a main-follower topology, meaning all writes will go to the main db and all reads will occur in the followers. With the audits, we were heavy on writes and had very few reads.</li>\n<li>Reading the data back was a pain, as we had to extract the bson from MongoDB, derive what type of bson it is, create the appropriate struct for it and populate it. This meant, a large switch case, which had to be modified with each addition of an audit.</li>\n</ol>\n<p>Insert example</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    UserLoggedIn = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    AppRemovedFromGroup</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> AuditType <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    AuditType <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;audit_type&quot; bson:&quot;audit_type&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BaseAudit <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot; bson: &quot;id&quot;`</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot; bson: &quot;name&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;created_at&quot; bson: &quot;created_at&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;processed_at&quot; bson: &quot;processed_at&quot;`</span></span><br><span class=\"line\">    Description <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;description&quot; bson: &quot;description&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> UserLoggedIn <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    BaseAudit <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;,inline&quot; bson:&quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;user_id&quot; bson: &quot;user_id&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization&quot; bson: &quot;organization&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> AppRemovedFromGroup <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    BaseAudit <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;,inline&quot; bson:&quot;,inline&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;app_id&quot; bson: &quot;app_id&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;group_id&quot; bson: &quot;group_id&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization&quot; bson: &quot;organization&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;initiator&quot; bson: &quot;initiator&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Audit)</span> <span class=\"title\">ReadMessage</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    message := a.sqs.ReadMessage(...opts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    auditType := &amp;AuditType&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := json.Unmarshal(auditType)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> auditType.AuditType&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> *UserLoggedIn:</span><br><span class=\"line\">            userLoggedIn := &amp;UserLoggedIn&#123;&#125;</span><br><span class=\"line\">            err := json.Unmarshal(userLoggedIn)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> *AppRemovedFromGroup:</span><br><span class=\"line\">            appRemovedFromGroup := &amp;AppRemovedFromGroup&#123;&#125;</span><br><span class=\"line\">            err := json.Unmarshal(appRemovedFromGroup)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> err</span><br><span class=\"line\">            &#125;       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Reading</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Audit)</span> <span class=\"title\">GetAudits</span><span class=\"params\">()</span> <span class=\"params\">([]<span class=\"keyword\">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> audits []<span class=\"keyword\">interface</span>&#123;&#125;</span><br><span class=\"line\">    retrieved, err := a.auditStore.GetAudits()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, doc := <span class=\"keyword\">range</span> retrieved &#123;</span><br><span class=\"line\">        docType, ok := doc[<span class=\"string\">&quot;type&quot;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !ok &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(fmt.Sprintf(<span class=\"string\">&quot;bson doc must have a type, doc=%+v&quot;</span>, doc))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> docType &#123;</span><br><span class=\"line\">            ...</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> audits</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>As you can see, it was a nightmare to maintain.</p>\n<p>Because we had about 40 types of audit logs and all of them had the BaseAudit plus a few fields, I decided to unify all audit types to a single audit struct. That way, the sending and receiving sides can send any string value in the audit_type field and no further changes are needed. Upon inserting or querying the audit data, if a field doesn’t exist, it will be omitted.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">    UserLoggedIn = <span class=\"literal\">iota</span> + <span class=\"number\">1</span></span><br><span class=\"line\">    AppRemovedFromGroup</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> AuditType <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    AuditType <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;audit_type&quot; bson:&quot;audit_type&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Audit <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id,omitempty&quot; bson: &quot;id,omitempty&quot;`</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name,omitempty&quot; bson: &quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;created_at,omitempty&quot; bson: &quot;created_at,omitempty&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;processed_at,omitempty&quot; bson: &quot;processed_at,omitempty&quot;`</span></span><br><span class=\"line\">    Description <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;description,omitempty&quot; bson: &quot;description,omitempty&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;user_id,omitempty&quot; bson: &quot;user_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;app_id,omitempty&quot; bson: &quot;app_id,omitempty&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;group_id,omitempty&quot; bson: &quot;group_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;initiator,omitempty&quot; bson: &quot;initiator,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Audit)</span> <span class=\"title\">ReadMessage</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    message := a.sqs.ReadMessage(...opts)</span><br><span class=\"line\">    </span><br><span class=\"line\">    audit := &amp;Audit&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := json.Unmarshal(audit)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := a.db.Save(audit)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Reading</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a *Audit)</span> <span class=\"title\">GetAudits</span><span class=\"params\">()</span> <span class=\"params\">([]*Audit, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> audits []*Audit</span><br><span class=\"line\">    retrieved, err := a.auditStore.GetAudits()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, doc := <span class=\"keyword\">range</span> retrieved &#123;</span><br><span class=\"line\">        audits = <span class=\"built_in\">append</span>(audits, doc.ToAudit())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> audits, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Enrichment\"><a href=\"#Enrichment\" class=\"headerlink\" title=\"Enrichment\"></a>Enrichment</h3><p>When creating an audit like the one below, an administrator expects to see something like <code>System configuration under site X changed from Y to Z</code> or <code>User X accessed resource Y</code>.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Audit <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id,omitempty&quot; bson: &quot;id,omitempty&quot;`</span></span><br><span class=\"line\">    Name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name,omitempty&quot; bson: &quot;name,omitempty&quot;`</span></span><br><span class=\"line\">    CreatedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;created_at,omitempty&quot; bson: &quot;created_at,omitempty&quot;`</span></span><br><span class=\"line\">    ProcessedAt <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;processed_at,omitempty&quot; bson: &quot;processed_at,omitempty&quot;`</span></span><br><span class=\"line\">    Description <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;description,omitempty&quot; bson: &quot;description,omitempty&quot;`</span></span><br><span class=\"line\">    AuditType AuditType <span class=\"string\">`json:&quot;,inline&quot; bson: &quot;,inline&quot;`</span></span><br><span class=\"line\">    UserId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;user_id,omitempty&quot; bson: &quot;user_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    AppId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;app_id,omitempty&quot; bson: &quot;app_id,omitempty&quot;`</span></span><br><span class=\"line\">    GroupId <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;group_id,omitempty&quot; bson: &quot;group_id,omitempty&quot;`</span></span><br><span class=\"line\">    Organization <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;organization,omitempty&quot; bson: &quot;organization,omitempty&quot;`</span></span><br><span class=\"line\">    Initiator <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;initiator,omitempty&quot; bson: &quot;initiator,omitempty&quot;`</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>The issue here, is, we only have <code>x_id</code> fields without the actual data.<br>This meant, for each administrator that requested to see the audit log, we needed to enrich each user_id, app_id, etc. from their respective micro-services.</p>\n<p>Another issue was that with each audit sent via the SNS, there are several consumers, apart from the audit service. For instance, we allow customers to receive the audits as they happen to any endpoint / S3 bucket, which posed serious performance issues to the micro-services, which were part of the data enrichment process.<br>For each new consumer subscribed to the SNS topic, the services received more queries. At first a redis cache was added to help with the performance issues.</p>\n<p>The issue above really reminds me of querying in event sourcing, where without CQRS we must reconstruct the state all over again for each query.</p>\n<p>The possible solutions to mitigate the issue were:</p>\n<ol>\n<li><p>Keep a snapshot db for the audits, similar to CQRS. But, because we send the audit to several consumers at once, keeping a snapshot db would not really help for consumers other than the audit service.</p>\n</li>\n<li><p>Pass the data enriched. This solution increases the amount of data we send, but removes the load on the micro-services needed for data enrichment afterwards. On top of that, we can add any number of consumers and all will receive data already enriched.</p>\n</li>\n</ol>\n<p>I went with passing the data enriched. Because of the nature of the product, all places that call the audit service in a synchronous manner already have the data at hand, either by querying in advance or by receiving it from another service.</p>\n<p>The last piece of the puzzle was the proxies, which do not have access to any of the services that own the data needed.<br>On each user connection, the proxies ask our control plane, if the user is allowed. The control plane, which is where all of our services reside returns a rule to the proxy, which is an instruction on what the user is allowed to do and where he/she is allowed to access. I added all the audit data on the rule, which the proxy then sent to SNS together with its data.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw several implementation options for auditing together with a summary table that shows the implementation complexity, scalability and integration with existing architecture levels. Afterwards, I introduced a real world use case, I had the chance to implement. We saw how we can integrate with the audit service both synchronously and asynchronously. Afterwards, we saw how a unified audit struct helped with introduction of new audits and maintenance of existing ones. At last, we saw how enriching the data beforehand, removed a lot of stress from the system and future proofed new consumers that subscribe to the auditing topic.</p>\n<h2 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h2><ol>\n<li><a href=\"https://sematext.com/blog/logging-levels\">logging-levels</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing\">event-sourcing</a></li>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">event-sourcing-microservices</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">cqrs</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Virtual_LAN\">vLAN</a></li>\n<li><a href=\"https://www.gartner.com/en/information-technology/glossary/zero-trust-network-access-ztna-\">ZTNA</a></li>\n</ol>\n"},{"title":"Microservices Health Checks","_content":"","source":"_drafts/Microservices-Health-Checks.md","raw":"---\ntitle: Microservices Health Checks\ntags:\n---\n","slug":"Microservices-Health-Checks","published":0,"date":"2021-01-22T11:07:55.924Z","updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1mj000678ta5213ezrf","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Open Policy Agent","_content":"","source":"_drafts/Open-Policy-Agent.md","raw":"---\ntitle: Open Policy Agent\ntags:\n---\n","slug":"Open-Policy-Agent","published":0,"date":"2021-04-05T21:54:32.019Z","updated":"2021-04-05T21:54:32.019Z","_id":"ckravj1mk000778tae7cvgeeq","comments":1,"layout":"post","photos":[],"link":"","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Auditing in Microservices","date":"2021-07-19T16:41:33.000Z","thumbnail":"images/audit.png","_content":"\nIn software, auditing means tracking user or system activities for various needs, such as business or security. An example would be - `user X tried to access resource Y`.\nWhen I encuntered issues with auditing at my current company, I looked for solutions online, most of which, were either vague, lackluster or plain simple. That is why, after having implemented and dealt with auditing at scale, I would like to share my thoughts. In this post, I will show the various methods for implementing auditing together with code examples and pros and cons.\n\n## Preface\n\nAll code examples will be written in Golang.\n\n## Auditing With Logs\n\nThe simplest form of audit is to log the event that happened from the business logic.\nAfterwards, it is possible to aggregate logs and send them to an ELK service for parsing and viewing.\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    // log user added to group for various purposes\n    g.logger.info(\"user %s was added to group %s\", user.Name, groupId)\n}\n```\n\n### Pros\n\n- Easy to implement\n- Easy to ship to any 3rd party service\n\n### Cons\n\n- Can take a while until the logs are scraped, parsed and shipped\n- Writing many operations to stdout will cause a performance hit\n\n## Auditing With Databases\n\nDevelopers will usually have some sort of database like MongoDB or PostgreSQL that they use, which can be used for audits as well. It is also possible to have a separate database for the auditing.\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    // add user to audit db, can be same db as main application or another db specifically for auditing\n    err := g.auditDb.AddUserToGroup(user)\n    if err != nil {\n        g.logger.error(\"failed to add audit for userAddedToGroup, user=%s\", user)\n    }\n\n    g.logger.info(\"user %s was added to group %s\", user.Name, groupId)\n}\n```\n\n### Pros\n\n- Main application db can be used for the auditing as well, if the service's scale is low, which saves in operational costs and maintainance\n- Audits can be exposed as an API for customers, marketing and various teams in the organization.\n\n### Cons\n\n- Not scalable if you use the same database as your application\n- Tougher to manage in a microservices environment as each service should have its own database, meaning no single owner of the audit data, unless you make an audit service, which we will discuss later in the post.\n\n## Auditing With Event Sourcing And CQRS\n\nFrom microservices.io [1, 2]\n> Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.\n\nCQRS - Command Query Responsibility Segregation [3]\n> At its heart is the notion that you can use a different model to update information than the model you use to read information\n\nTo keep things simple, with event sourcing, your business logic fires commands that in turn generate events that are appended to the store (append only database that is usually fast for writes), and each time a new event is appended, it is also published for the appropriate consumers to react.\n\nEvent sourcing goes hand in hand with CQRS, due to events needing some sort of snapshot (a normalized view), to allow for fast reads. If we were to query only from the append only store, we would need to start from a known state, extract all relevant events and apply each one of them to the known state, which is very slow. With CQRS, we store a snapshot of the latest data and when a query comes, we are able to return the snapshot instead of reconstructing the state.\n\nBack to our example, we fire the `AddUserToGroup` Command, which generates the `UserAddedToGroup` event. Afterwards, the group consumer receives the `UserAddedToGroup` event, and reacts accordingly by populating the new data in a normalized way for easier querying.\n\nCommand side\n\n```golang\n\ntype User struct {\n    name `json:\"name\"`\n    id `json:\"id\"`\n}\n\ntype Event struct {\n    id string `json:\"id\"`\n    event_type string `json:\"event_type\"`\n    aggregate_id string `json:\"aggregate_id\"`\n    aggregate_type string `json:\"aggregate_type\"`\n    payload string `json:\"payload\"`\n}\n\nfunc (g *Gateway) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    userPayload, err := json.Marshal(user)\n    if err != nil {\n        return err\n    }\n\n    event := &Event{\n        id: uuid.NewV4(),\n        event_type: \"UserAddedToGroup\",\n        aggregate_id: groupId.String(),\n        aggregate_type: \"group\",\n        payload: string(userPayload)\n    }\n\n    // append the event to the store\n    err := g.appendOnlyStore.createEvent(user)\n    if err != nil {\n        return err\n    }\n\n    // send to pubsub\n    go g.pubsub.PublishEvent(event)\n\n    g.logger.info(\"event %+v was published\", event)\n}\n```\n\nQuery Handler\n\n```golang\n\nfunc main() {\n    groupHandler := NewGroupHandler(...dependencies)\n    groupListener := NewGroupListener()\n    groupListener.Subscribe(\"group.UserAddedToGroup\", groupHandler.handler)\n}\n\ntype Group struct {\n    id string `json:\"id\"`\n    name string `json:\"name\"`\n    users []User `json:\"users\"`\n}\n\nfunc (g *groupHandler) handler(event string) {\n    ev, err := json.Unmarshal(event)\n    if err != nil {\n        g.logger.error(\"failed to unmarshal event %s\", event)\n        return\n    }\n\n    // add in a normalized way for the read model to easily query\n    err := g.queryStore.AddUserToGroup(ev.aggregate_id, ev.payload)\n}\n\n// later on when an API request will be made for group with users\nfunc (g *groupHandler) GetGroup(groupId uuid.UUID) (*Group, error) {\n    return g.queryStore.GetGroup(groupId)\n}\n```\n\n### Pros\n\n- We get audit out of the box for all operations\n- We are asynchronous from the get go, which can help with scale issues down the line\n\n### Cons\n\n- The event store is difficult to query since it requires typical queries to reconstruct the state of the business entities, unless we ALSO save the data in a normalized way (CQRS), like in our group handler example. This increases operational costs as well as adds complexity to the developers.\n- Unfamiliar programming style for most developers\n\n## Auditing With Dedicated Micro-Service\n\nHave a single service for auditing, which is responsible for managing all audit data. All other services can communicate with it either synchronously (HTTP) or asynchronously (Publish/Subscribe, Queues, gRPC).\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\ntype Audit struct {\n    id string `json:\"id\"`\n    category string `json:\"category\"`\n    audit_type string `json:\"audit_type\"`\n    description string `json:\"description\"`   \n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    group, err := g.groups.GetGroup(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    newAudit := &Audit{\n        id: uuid.NewV4(),\n        audit_type: \"UserAddedToGroup\",\n        // can be user/system/group, depends on your needs\n        category: \"user\",\n        description: fmt.Sprintf(\"User %s was added to Group %s\", user.Name, group.Name)\n    }\n\n    err := g.auditService.CreateAudit(newAudit)\n    if err != nil {\n        return err\n    }\n\n    // log user added to group for various purposes\n    g.logger.info(\"user %s was added to group %s\", user.Name, group.Name)\n}\n```\n\n### Pros\n\n- Easy to incorporate to an existing architecture.\n\n### Cons\n\n- New audits must be explicitly created with a call to audit service, unlike the implicit nature of Event Sourcing\n\n## Summary\n\n| Audit Type        | Complexity | Scfalablity  | Ease Of Integration With Existing Architecture |\n|-------------------|------------|-------------|----------------------------------------|\n| Logging           | Low        | Low         | High                                   |\n| Database          | Low        | Medium      | Medium/High                                 |\n| Event Sourcing    | High       | High        | Low                                    |\n| Dedicated Service | Low        | Medium/High | Medium/High                            |\n|                   |            |             |                                        |\n\nEach of the implementations above has its pros and cons and you should always start with the simpler solution that can be implemented with as little effort as possible. If you are lucky enough to grow with your company to larger business needs and scale, you should consider the more scalable approaches, which are also more challenging. Regardless of what you choose, always try to write your code modular and consistent, like I explained in my previous posts, Ports and Adapters [4] and Clean Architecture [5].\n\n## Bibliography\n\n1. [event-sourcing](https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing)\n2. [event-sourcing-microservices](https://microservices.io/patterns/data/event-sourcing.html)\n3. [cqrs](https://martinfowler.com/bliki/CQRS.html)\n4. [Ports and Adapters](/2020/02/01/Implementing-Ports-and-Adapters/)\n5. [Clean Architecture](/2019/06/11/Implementing-Clean-Architecture/)","source":"_posts/Auditing-in-Microservices.md","raw":"---\ntitle: Auditing in Microservices\ntags:\n  - Software Architecture\n  - Microservices\n  - Auditing\n  - Event Sourcing\n  - Golang\ncategory: Architecture\ndate: 2021-07-19 19:41:33\nthumbnail: images/audit.png\n---\n\nIn software, auditing means tracking user or system activities for various needs, such as business or security. An example would be - `user X tried to access resource Y`.\nWhen I encuntered issues with auditing at my current company, I looked for solutions online, most of which, were either vague, lackluster or plain simple. That is why, after having implemented and dealt with auditing at scale, I would like to share my thoughts. In this post, I will show the various methods for implementing auditing together with code examples and pros and cons.\n\n## Preface\n\nAll code examples will be written in Golang.\n\n## Auditing With Logs\n\nThe simplest form of audit is to log the event that happened from the business logic.\nAfterwards, it is possible to aggregate logs and send them to an ELK service for parsing and viewing.\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    // log user added to group for various purposes\n    g.logger.info(\"user %s was added to group %s\", user.Name, groupId)\n}\n```\n\n### Pros\n\n- Easy to implement\n- Easy to ship to any 3rd party service\n\n### Cons\n\n- Can take a while until the logs are scraped, parsed and shipped\n- Writing many operations to stdout will cause a performance hit\n\n## Auditing With Databases\n\nDevelopers will usually have some sort of database like MongoDB or PostgreSQL that they use, which can be used for audits as well. It is also possible to have a separate database for the auditing.\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    // add user to audit db, can be same db as main application or another db specifically for auditing\n    err := g.auditDb.AddUserToGroup(user)\n    if err != nil {\n        g.logger.error(\"failed to add audit for userAddedToGroup, user=%s\", user)\n    }\n\n    g.logger.info(\"user %s was added to group %s\", user.Name, groupId)\n}\n```\n\n### Pros\n\n- Main application db can be used for the auditing as well, if the service's scale is low, which saves in operational costs and maintainance\n- Audits can be exposed as an API for customers, marketing and various teams in the organization.\n\n### Cons\n\n- Not scalable if you use the same database as your application\n- Tougher to manage in a microservices environment as each service should have its own database, meaning no single owner of the audit data, unless you make an audit service, which we will discuss later in the post.\n\n## Auditing With Event Sourcing And CQRS\n\nFrom microservices.io [1, 2]\n> Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.\n\nCQRS - Command Query Responsibility Segregation [3]\n> At its heart is the notion that you can use a different model to update information than the model you use to read information\n\nTo keep things simple, with event sourcing, your business logic fires commands that in turn generate events that are appended to the store (append only database that is usually fast for writes), and each time a new event is appended, it is also published for the appropriate consumers to react.\n\nEvent sourcing goes hand in hand with CQRS, due to events needing some sort of snapshot (a normalized view), to allow for fast reads. If we were to query only from the append only store, we would need to start from a known state, extract all relevant events and apply each one of them to the known state, which is very slow. With CQRS, we store a snapshot of the latest data and when a query comes, we are able to return the snapshot instead of reconstructing the state.\n\nBack to our example, we fire the `AddUserToGroup` Command, which generates the `UserAddedToGroup` event. Afterwards, the group consumer receives the `UserAddedToGroup` event, and reacts accordingly by populating the new data in a normalized way for easier querying.\n\nCommand side\n\n```golang\n\ntype User struct {\n    name `json:\"name\"`\n    id `json:\"id\"`\n}\n\ntype Event struct {\n    id string `json:\"id\"`\n    event_type string `json:\"event_type\"`\n    aggregate_id string `json:\"aggregate_id\"`\n    aggregate_type string `json:\"aggregate_type\"`\n    payload string `json:\"payload\"`\n}\n\nfunc (g *Gateway) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    err := g.validateGroupId(groupId)\n    if err != nil {\n        return err\n    }\n\n    userPayload, err := json.Marshal(user)\n    if err != nil {\n        return err\n    }\n\n    event := &Event{\n        id: uuid.NewV4(),\n        event_type: \"UserAddedToGroup\",\n        aggregate_id: groupId.String(),\n        aggregate_type: \"group\",\n        payload: string(userPayload)\n    }\n\n    // append the event to the store\n    err := g.appendOnlyStore.createEvent(user)\n    if err != nil {\n        return err\n    }\n\n    // send to pubsub\n    go g.pubsub.PublishEvent(event)\n\n    g.logger.info(\"event %+v was published\", event)\n}\n```\n\nQuery Handler\n\n```golang\n\nfunc main() {\n    groupHandler := NewGroupHandler(...dependencies)\n    groupListener := NewGroupListener()\n    groupListener.Subscribe(\"group.UserAddedToGroup\", groupHandler.handler)\n}\n\ntype Group struct {\n    id string `json:\"id\"`\n    name string `json:\"name\"`\n    users []User `json:\"users\"`\n}\n\nfunc (g *groupHandler) handler(event string) {\n    ev, err := json.Unmarshal(event)\n    if err != nil {\n        g.logger.error(\"failed to unmarshal event %s\", event)\n        return\n    }\n\n    // add in a normalized way for the read model to easily query\n    err := g.queryStore.AddUserToGroup(ev.aggregate_id, ev.payload)\n}\n\n// later on when an API request will be made for group with users\nfunc (g *groupHandler) GetGroup(groupId uuid.UUID) (*Group, error) {\n    return g.queryStore.GetGroup(groupId)\n}\n```\n\n### Pros\n\n- We get audit out of the box for all operations\n- We are asynchronous from the get go, which can help with scale issues down the line\n\n### Cons\n\n- The event store is difficult to query since it requires typical queries to reconstruct the state of the business entities, unless we ALSO save the data in a normalized way (CQRS), like in our group handler example. This increases operational costs as well as adds complexity to the developers.\n- Unfamiliar programming style for most developers\n\n## Auditing With Dedicated Micro-Service\n\nHave a single service for auditing, which is responsible for managing all audit data. All other services can communicate with it either synchronously (HTTP) or asynchronously (Publish/Subscribe, Queues, gRPC).\n\n```golang\n\ntype User struct {\n    name string `json:\"name\"`\n    id string `json:\"id\"`\n}\n\ntype Audit struct {\n    id string `json:\"id\"`\n    category string `json:\"category\"`\n    audit_type string `json:\"audit_type\"`\n    description string `json:\"description\"`   \n}\n\nfunc (g *Groups) AddUserToGroup(user *User, groupId uuid.UUID) error {\n    err := g.validateUser(user)\n    if err != nil {\n        return err\n    }\n\n    group, err := g.groups.GetGroup(groupId)\n    if err != nil {\n        return err\n    }\n\n    err := g.db.AddUserToGroup(user)\n    if err != nil {\n        return err\n    }\n\n    newAudit := &Audit{\n        id: uuid.NewV4(),\n        audit_type: \"UserAddedToGroup\",\n        // can be user/system/group, depends on your needs\n        category: \"user\",\n        description: fmt.Sprintf(\"User %s was added to Group %s\", user.Name, group.Name)\n    }\n\n    err := g.auditService.CreateAudit(newAudit)\n    if err != nil {\n        return err\n    }\n\n    // log user added to group for various purposes\n    g.logger.info(\"user %s was added to group %s\", user.Name, group.Name)\n}\n```\n\n### Pros\n\n- Easy to incorporate to an existing architecture.\n\n### Cons\n\n- New audits must be explicitly created with a call to audit service, unlike the implicit nature of Event Sourcing\n\n## Summary\n\n| Audit Type        | Complexity | Scfalablity  | Ease Of Integration With Existing Architecture |\n|-------------------|------------|-------------|----------------------------------------|\n| Logging           | Low        | Low         | High                                   |\n| Database          | Low        | Medium      | Medium/High                                 |\n| Event Sourcing    | High       | High        | Low                                    |\n| Dedicated Service | Low        | Medium/High | Medium/High                            |\n|                   |            |             |                                        |\n\nEach of the implementations above has its pros and cons and you should always start with the simpler solution that can be implemented with as little effort as possible. If you are lucky enough to grow with your company to larger business needs and scale, you should consider the more scalable approaches, which are also more challenging. Regardless of what you choose, always try to write your code modular and consistent, like I explained in my previous posts, Ports and Adapters [4] and Clean Architecture [5].\n\n## Bibliography\n\n1. [event-sourcing](https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing)\n2. [event-sourcing-microservices](https://microservices.io/patterns/data/event-sourcing.html)\n3. [cqrs](https://martinfowler.com/bliki/CQRS.html)\n4. [Ports and Adapters](/2020/02/01/Implementing-Ports-and-Adapters/)\n5. [Clean Architecture](/2019/06/11/Implementing-Clean-Architecture/)","slug":"Auditing-in-Microservices","published":1,"updated":"2021-07-19T17:00:14.288Z","_id":"ckravj1ml000878ta5ymxb0z1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>In software, auditing means tracking user or system activities for various needs, such as business or security. An example would be - <code>user X tried to access resource Y</code>.\nWhen I encuntered issues with auditing at my current company, I looked for solutions online, most of which, were either vague, lackluster or plain simple. That is why, after having implemented and dealt with auditing at scale, I would like to share my thoughts. In this post, I will show the various methods for implementing auditing together with code examples and pros and cons.</p>\n<h2 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h2><p>All code examples will be written in Golang.</p>\n<h2 id=\"Auditing-With-Logs\"><a href=\"#Auditing-With-Logs\" class=\"headerlink\" title=\"Auditing With Logs\"></a>Auditing With Logs</h2><p>The simplest form of audit is to log the event that happened from the business logic.<br>Afterwards, it is possible to aggregate logs and send them to an ELK service for parsing and viewing.</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Groups)</span> <span class=\"hljs-title\">AddUserToGroup</span><span class=\"hljs-params\">(user *User, groupId uuid.UUID)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// log user added to group for various purposes</span></span><br><span class=\"line\">    g.logger.info(<span class=\"hljs-string\">&quot;user %s was added to group %s&quot;</span>, user.Name, groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Easy to implement</li>\n<li>Easy to ship to any 3rd party service</li>\n</ul>\n<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>Can take a while until the logs are scraped, parsed and shipped</li>\n<li>Writing many operations to stdout will cause a performance hit</li>\n</ul>\n<h2 id=\"Auditing-With-Databases\"><a href=\"#Auditing-With-Databases\" class=\"headerlink\" title=\"Auditing With Databases\"></a>Auditing With Databases</h2><p>Developers will usually have some sort of database like MongoDB or PostgreSQL that they use, which can be used for audits as well. It is also possible to have a separate database for the auditing.</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Groups)</span> <span class=\"hljs-title\">AddUserToGroup</span><span class=\"hljs-params\">(user *User, groupId uuid.UUID)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// add user to audit db, can be same db as main application or another db specifically for auditing</span></span><br><span class=\"line\">    err := g.auditDb.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        g.logger.error(<span class=\"hljs-string\">&quot;failed to add audit for userAddedToGroup, user=%s&quot;</span>, user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    g.logger.info(<span class=\"hljs-string\">&quot;user %s was added to group %s&quot;</span>, user.Name, groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-1\"><a href=\"#Pros-1\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Main application db can be used for the auditing as well, if the service’s scale is low, which saves in operational costs and maintainance</li>\n<li>Audits can be exposed as an API for customers, marketing and various teams in the organization.</li>\n</ul>\n<h3 id=\"Cons-1\"><a href=\"#Cons-1\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>Not scalable if you use the same database as your application</li>\n<li>Tougher to manage in a microservices environment as each service should have its own database, meaning no single owner of the audit data, unless you make an audit service, which we will discuss later in the post.</li>\n</ul>\n<h2 id=\"Auditing-With-Event-Sourcing-And-CQRS\"><a href=\"#Auditing-With-Event-Sourcing-And-CQRS\" class=\"headerlink\" title=\"Auditing With Event Sourcing And CQRS\"></a>Auditing With Event Sourcing And CQRS</h2><p>From microservices.io [1, 2]</p>\n<blockquote>\n<p>Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.</p>\n</blockquote>\n<p>CQRS - Command Query Responsibility Segregation [3]</p>\n<blockquote>\n<p>At its heart is the notion that you can use a different model to update information than the model you use to read information</p>\n</blockquote>\n<p>To keep things simple, with event sourcing, your business logic fires commands that in turn generate events that are appended to the store (append only database that is usually fast for writes), and each time a new event is appended, it is also published for the appropriate consumers to react.</p>\n<p>Event sourcing goes hand in hand with CQRS, due to events needing some sort of snapshot (a normalized view), to allow for fast reads. If we were to query only from the append only store, we would need to start from a known state, extract all relevant events and apply each one of them to the known state, which is very slow. With CQRS, we store a snapshot of the latest data and when a query comes, we are able to return the snapshot instead of reconstructing the state.</p>\n<p>Back to our example, we fire the <code>AddUserToGroup</code> Command, which generates the <code>UserAddedToGroup</code> event. Afterwards, the group consumer receives the <code>UserAddedToGroup</code> event, and reacts accordingly by populating the new data in a normalized way for easier querying.</p>\n<p>Command side</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"hljs-string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Event <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    event_type <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;event_type&quot;`</span></span><br><span class=\"line\">    aggregate_id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;aggregate_id&quot;`</span></span><br><span class=\"line\">    aggregate_type <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;aggregate_type&quot;`</span></span><br><span class=\"line\">    payload <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;payload&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Gateway)</span> <span class=\"hljs-title\">AddUserToGroup</span><span class=\"hljs-params\">(user *User, groupId uuid.UUID)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    userPayload, err := json.Marshal(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event := &amp;Event&#123;</span><br><span class=\"line\">        id: uuid.NewV4(),</span><br><span class=\"line\">        event_type: <span class=\"hljs-string\">&quot;UserAddedToGroup&quot;</span>,</span><br><span class=\"line\">        aggregate_id: groupId.String(),</span><br><span class=\"line\">        aggregate_type: <span class=\"hljs-string\">&quot;group&quot;</span>,</span><br><span class=\"line\">        payload: <span class=\"hljs-keyword\">string</span>(userPayload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// append the event to the store</span></span><br><span class=\"line\">    err := g.appendOnlyStore.createEvent(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// send to pubsub</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">go</span> g.pubsub.PublishEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    g.logger.info(<span class=\"hljs-string\">&quot;event %+v was published&quot;</span>, event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Query Handler</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">    groupHandler := NewGroupHandler(...dependencies)</span><br><span class=\"line\">    groupListener := NewGroupListener()</span><br><span class=\"line\">    groupListener.Subscribe(<span class=\"hljs-string\">&quot;group.UserAddedToGroup&quot;</span>, groupHandler.handler)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Group <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    users []User <span class=\"hljs-string\">`json:&quot;users&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *groupHandler)</span> <span class=\"hljs-title\">handler</span><span class=\"hljs-params\">(event <span class=\"hljs-keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    ev, err := json.Unmarshal(event)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        g.logger.error(<span class=\"hljs-string\">&quot;failed to unmarshal event %s&quot;</span>, event)</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// add in a normalized way for the read model to easily query</span></span><br><span class=\"line\">    err := g.queryStore.AddUserToGroup(ev.aggregate_id, ev.payload)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// later on when an API request will be made for group with users</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *groupHandler)</span> <span class=\"hljs-title\">GetGroup</span><span class=\"hljs-params\">(groupId uuid.UUID)</span> <span class=\"hljs-params\">(*Group, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> g.queryStore.GetGroup(groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-2\"><a href=\"#Pros-2\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>We get audit out of the box for all operations</li>\n<li>We are asynchronous from the get go, which can help with scale issues down the line</li>\n</ul>\n<h3 id=\"Cons-2\"><a href=\"#Cons-2\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>The event store is difficult to query since it requires typical queries to reconstruct the state of the business entities, unless we ALSO save the data in a normalized way (CQRS), like in our group handler example. This increases operational costs as well as adds complexity to the developers.</li>\n<li>Unfamiliar programming style for most developers</li>\n</ul>\n<h2 id=\"Auditing-With-Dedicated-Micro-Service\"><a href=\"#Auditing-With-Dedicated-Micro-Service\" class=\"headerlink\" title=\"Auditing With Dedicated Micro-Service\"></a>Auditing With Dedicated Micro-Service</h2><p>Have a single service for auditing, which is responsible for managing all audit data. All other services can communicate with it either synchronously (HTTP) or asynchronously (Publish/Subscribe, Queues, gRPC).</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> User <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Audit <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    category <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;category&quot;`</span></span><br><span class=\"line\">    audit_type <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;audit_type&quot;`</span></span><br><span class=\"line\">    description <span class=\"hljs-keyword\">string</span> <span class=\"hljs-string\">`json:&quot;description&quot;`</span>   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(g *Groups)</span> <span class=\"hljs-title\">AddUserToGroup</span><span class=\"hljs-params\">(user *User, groupId uuid.UUID)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    group, err := g.groups.GetGroup(groupId)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    newAudit := &amp;Audit&#123;</span><br><span class=\"line\">        id: uuid.NewV4(),</span><br><span class=\"line\">        audit_type: <span class=\"hljs-string\">&quot;UserAddedToGroup&quot;</span>,</span><br><span class=\"line\">        <span class=\"hljs-comment\">// can be user/system/group, depends on your needs</span></span><br><span class=\"line\">        category: <span class=\"hljs-string\">&quot;user&quot;</span>,</span><br><span class=\"line\">        description: fmt.Sprintf(<span class=\"hljs-string\">&quot;User %s was added to Group %s&quot;</span>, user.Name, group.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.auditService.CreateAudit(newAudit)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-comment\">// log user added to group for various purposes</span></span><br><span class=\"line\">    g.logger.info(<span class=\"hljs-string\">&quot;user %s was added to group %s&quot;</span>, user.Name, group.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-3\"><a href=\"#Pros-3\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Easy to incorporate to an existing architecture.</li>\n</ul>\n<h3 id=\"Cons-3\"><a href=\"#Cons-3\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>New audits must be explicitly created with a call to audit service, unlike the implicit nature of Event Sourcing</li>\n</ul>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><table>\n<thead>\n<tr>\n<th>Audit Type</th>\n<th>Complexity</th>\n<th>Scfalablity</th>\n<th>Ease Of Integration With Existing Architecture</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logging</td>\n<td>Low</td>\n<td>Low</td>\n<td>High</td>\n</tr>\n<tr>\n<td>Database</td>\n<td>Low</td>\n<td>Medium</td>\n<td>Medium/High</td>\n</tr>\n<tr>\n<td>Event Sourcing</td>\n<td>High</td>\n<td>High</td>\n<td>Low</td>\n</tr>\n<tr>\n<td>Dedicated Service</td>\n<td>Low</td>\n<td>Medium/High</td>\n<td>Medium/High</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>Each of the implementations above has its pros and cons and you should always start with the simpler solution that can be implemented with as little effort as possible. If you are lucky enough to grow with your company to larger business needs and scale, you should consider the more scalable approaches, which are also more challenging. Regardless of what you choose, always try to write your code modular and consistent, like I explained in my previous posts, Ports and Adapters [4] and Clean Architecture [5].</p>\n<h2 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h2><ol>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing\">event-sourcing</a></li>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">event-sourcing-microservices</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">cqrs</a></li>\n<li><a href=\"/2020/02/01/Implementing-Ports-and-Adapters/\">Ports and Adapters</a></li>\n<li><a href=\"/2019/06/11/Implementing-Clean-Architecture/\">Clean Architecture</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>In software, auditing means tracking user or system activities for various needs, such as business or security. An example would be - <code>user X tried to access resource Y</code>.\nWhen I encuntered issues with auditing at my current company, I looked for solutions online, most of which, were either vague, lackluster or plain simple. That is why, after having implemented and dealt with auditing at scale, I would like to share my thoughts. In this post, I will show the various methods for implementing auditing together with code examples and pros and cons.</p>\n<h2 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h2><p>All code examples will be written in Golang.</p>\n<h2 id=\"Auditing-With-Logs\"><a href=\"#Auditing-With-Logs\" class=\"headerlink\" title=\"Auditing With Logs\"></a>Auditing With Logs</h2><p>The simplest form of audit is to log the event that happened from the business logic.<br>Afterwards, it is possible to aggregate logs and send them to an ELK service for parsing and viewing.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Groups)</span> <span class=\"title\">AddUserToGroup</span><span class=\"params\">(user *User, groupId uuid.UUID)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// log user added to group for various purposes</span></span><br><span class=\"line\">    g.logger.info(<span class=\"string\">&quot;user %s was added to group %s&quot;</span>, user.Name, groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros\"><a href=\"#Pros\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Easy to implement</li>\n<li>Easy to ship to any 3rd party service</li>\n</ul>\n<h3 id=\"Cons\"><a href=\"#Cons\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>Can take a while until the logs are scraped, parsed and shipped</li>\n<li>Writing many operations to stdout will cause a performance hit</li>\n</ul>\n<h2 id=\"Auditing-With-Databases\"><a href=\"#Auditing-With-Databases\" class=\"headerlink\" title=\"Auditing With Databases\"></a>Auditing With Databases</h2><p>Developers will usually have some sort of database like MongoDB or PostgreSQL that they use, which can be used for audits as well. It is also possible to have a separate database for the auditing.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Groups)</span> <span class=\"title\">AddUserToGroup</span><span class=\"params\">(user *User, groupId uuid.UUID)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// add user to audit db, can be same db as main application or another db specifically for auditing</span></span><br><span class=\"line\">    err := g.auditDb.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        g.logger.error(<span class=\"string\">&quot;failed to add audit for userAddedToGroup, user=%s&quot;</span>, user)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    g.logger.info(<span class=\"string\">&quot;user %s was added to group %s&quot;</span>, user.Name, groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-1\"><a href=\"#Pros-1\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Main application db can be used for the auditing as well, if the service’s scale is low, which saves in operational costs and maintainance</li>\n<li>Audits can be exposed as an API for customers, marketing and various teams in the organization.</li>\n</ul>\n<h3 id=\"Cons-1\"><a href=\"#Cons-1\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>Not scalable if you use the same database as your application</li>\n<li>Tougher to manage in a microservices environment as each service should have its own database, meaning no single owner of the audit data, unless you make an audit service, which we will discuss later in the post.</li>\n</ul>\n<h2 id=\"Auditing-With-Event-Sourcing-And-CQRS\"><a href=\"#Auditing-With-Event-Sourcing-And-CQRS\" class=\"headerlink\" title=\"Auditing With Event Sourcing And CQRS\"></a>Auditing With Event Sourcing And CQRS</h2><p>From microservices.io [1, 2]</p>\n<blockquote>\n<p>Event sourcing persists the state of a business entity such an Order or a Customer as a sequence of state-changing events. Whenever the state of a business entity changes, a new event is appended to the list of events. Since saving an event is a single operation, it is inherently atomic. The application reconstructs an entity’s current state by replaying the events.</p>\n</blockquote>\n<p>CQRS - Command Query Responsibility Segregation [3]</p>\n<blockquote>\n<p>At its heart is the notion that you can use a different model to update information than the model you use to read information</p>\n</blockquote>\n<p>To keep things simple, with event sourcing, your business logic fires commands that in turn generate events that are appended to the store (append only database that is usually fast for writes), and each time a new event is appended, it is also published for the appropriate consumers to react.</p>\n<p>Event sourcing goes hand in hand with CQRS, due to events needing some sort of snapshot (a normalized view), to allow for fast reads. If we were to query only from the append only store, we would need to start from a known state, extract all relevant events and apply each one of them to the known state, which is very slow. With CQRS, we store a snapshot of the latest data and when a query comes, we are able to return the snapshot instead of reconstructing the state.</p>\n<p>Back to our example, we fire the <code>AddUserToGroup</code> Command, which generates the <code>UserAddedToGroup</code> event. Afterwards, the group consumer receives the <code>UserAddedToGroup</code> event, and reacts accordingly by populating the new data in a normalized way for easier querying.</p>\n<p>Command side</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Event <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    event_type <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;event_type&quot;`</span></span><br><span class=\"line\">    aggregate_id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;aggregate_id&quot;`</span></span><br><span class=\"line\">    aggregate_type <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;aggregate_type&quot;`</span></span><br><span class=\"line\">    payload <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;payload&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Gateway)</span> <span class=\"title\">AddUserToGroup</span><span class=\"params\">(user *User, groupId uuid.UUID)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.validateGroupId(groupId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    userPayload, err := json.Marshal(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    event := &amp;Event&#123;</span><br><span class=\"line\">        id: uuid.NewV4(),</span><br><span class=\"line\">        event_type: <span class=\"string\">&quot;UserAddedToGroup&quot;</span>,</span><br><span class=\"line\">        aggregate_id: groupId.String(),</span><br><span class=\"line\">        aggregate_type: <span class=\"string\">&quot;group&quot;</span>,</span><br><span class=\"line\">        payload: <span class=\"keyword\">string</span>(userPayload)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// append the event to the store</span></span><br><span class=\"line\">    err := g.appendOnlyStore.createEvent(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// send to pubsub</span></span><br><span class=\"line\">    <span class=\"keyword\">go</span> g.pubsub.PublishEvent(event)</span><br><span class=\"line\"></span><br><span class=\"line\">    g.logger.info(<span class=\"string\">&quot;event %+v was published&quot;</span>, event)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Query Handler</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    groupHandler := NewGroupHandler(...dependencies)</span><br><span class=\"line\">    groupListener := NewGroupListener()</span><br><span class=\"line\">    groupListener.Subscribe(<span class=\"string\">&quot;group.UserAddedToGroup&quot;</span>, groupHandler.handler)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Group <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    users []User <span class=\"string\">`json:&quot;users&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *groupHandler)</span> <span class=\"title\">handler</span><span class=\"params\">(event <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    ev, err := json.Unmarshal(event)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        g.logger.error(<span class=\"string\">&quot;failed to unmarshal event %s&quot;</span>, event)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// add in a normalized way for the read model to easily query</span></span><br><span class=\"line\">    err := g.queryStore.AddUserToGroup(ev.aggregate_id, ev.payload)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// later on when an API request will be made for group with users</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *groupHandler)</span> <span class=\"title\">GetGroup</span><span class=\"params\">(groupId uuid.UUID)</span> <span class=\"params\">(*Group, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> g.queryStore.GetGroup(groupId)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-2\"><a href=\"#Pros-2\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>We get audit out of the box for all operations</li>\n<li>We are asynchronous from the get go, which can help with scale issues down the line</li>\n</ul>\n<h3 id=\"Cons-2\"><a href=\"#Cons-2\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>The event store is difficult to query since it requires typical queries to reconstruct the state of the business entities, unless we ALSO save the data in a normalized way (CQRS), like in our group handler example. This increases operational costs as well as adds complexity to the developers.</li>\n<li>Unfamiliar programming style for most developers</li>\n</ul>\n<h2 id=\"Auditing-With-Dedicated-Micro-Service\"><a href=\"#Auditing-With-Dedicated-Micro-Service\" class=\"headerlink\" title=\"Auditing With Dedicated Micro-Service\"></a>Auditing With Dedicated Micro-Service</h2><p>Have a single service for auditing, which is responsible for managing all audit data. All other services can communicate with it either synchronously (HTTP) or asynchronously (Publish/Subscribe, Queues, gRPC).</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    name <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Audit <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    id <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;id&quot;`</span></span><br><span class=\"line\">    category <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;category&quot;`</span></span><br><span class=\"line\">    audit_type <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;audit_type&quot;`</span></span><br><span class=\"line\">    description <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;description&quot;`</span>   </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(g *Groups)</span> <span class=\"title\">AddUserToGroup</span><span class=\"params\">(user *User, groupId uuid.UUID)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    err := g.validateUser(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    group, err := g.groups.GetGroup(groupId)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.db.AddUserToGroup(user)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    newAudit := &amp;Audit&#123;</span><br><span class=\"line\">        id: uuid.NewV4(),</span><br><span class=\"line\">        audit_type: <span class=\"string\">&quot;UserAddedToGroup&quot;</span>,</span><br><span class=\"line\">        <span class=\"comment\">// can be user/system/group, depends on your needs</span></span><br><span class=\"line\">        category: <span class=\"string\">&quot;user&quot;</span>,</span><br><span class=\"line\">        description: fmt.Sprintf(<span class=\"string\">&quot;User %s was added to Group %s&quot;</span>, user.Name, group.Name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    err := g.auditService.CreateAudit(newAudit)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// log user added to group for various purposes</span></span><br><span class=\"line\">    g.logger.info(<span class=\"string\">&quot;user %s was added to group %s&quot;</span>, user.Name, group.Name)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Pros-3\"><a href=\"#Pros-3\" class=\"headerlink\" title=\"Pros\"></a>Pros</h3><ul>\n<li>Easy to incorporate to an existing architecture.</li>\n</ul>\n<h3 id=\"Cons-3\"><a href=\"#Cons-3\" class=\"headerlink\" title=\"Cons\"></a>Cons</h3><ul>\n<li>New audits must be explicitly created with a call to audit service, unlike the implicit nature of Event Sourcing</li>\n</ul>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><table>\n<thead>\n<tr>\n<th>Audit Type</th>\n<th>Complexity</th>\n<th>Scfalablity</th>\n<th>Ease Of Integration With Existing Architecture</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Logging</td>\n<td>Low</td>\n<td>Low</td>\n<td>High</td>\n</tr>\n<tr>\n<td>Database</td>\n<td>Low</td>\n<td>Medium</td>\n<td>Medium/High</td>\n</tr>\n<tr>\n<td>Event Sourcing</td>\n<td>High</td>\n<td>High</td>\n<td>Low</td>\n</tr>\n<tr>\n<td>Dedicated Service</td>\n<td>Low</td>\n<td>Medium/High</td>\n<td>Medium/High</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<p>Each of the implementations above has its pros and cons and you should always start with the simpler solution that can be implemented with as little effort as possible. If you are lucky enough to grow with your company to larger business needs and scale, you should consider the more scalable approaches, which are also more challenging. Regardless of what you choose, always try to write your code modular and consistent, like I explained in my previous posts, Ports and Adapters [4] and Clean Architecture [5].</p>\n<h2 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h2><ol>\n<li><a href=\"https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing\">event-sourcing</a></li>\n<li><a href=\"https://microservices.io/patterns/data/event-sourcing.html\">event-sourcing-microservices</a></li>\n<li><a href=\"https://martinfowler.com/bliki/CQRS.html\">cqrs</a></li>\n<li><a href=\"/2020/02/01/Implementing-Ports-and-Adapters/\">Ports and Adapters</a></li>\n<li><a href=\"/2019/06/11/Implementing-Clean-Architecture/\">Clean Architecture</a></li>\n</ol>\n"},{"title":"Authentication Middleware in Elixir","date":"2019-07-03T15:44:34.000Z","_content":"One of the first projects I was working on in Elixir was an API gateway. Like everyone else, I saw Pheonix, which is a cool framework for building web servers which is similar to Express.js, but, for my use case, I wanted raw performance for the API gateway, and one of its features was to have basic authentication as well as bearer authentication for json web tokens. One way to achieve this was using Plugs, which are built in the language. A plug is similar to a middleware in Express.js, it accepts input, does some manipulation and either halts the request or passes it on. In this post I will show how I implemented an authentication plug in Elixir.\n\n\n## Router with plugs\nLets first look at how plugs look in a cowboy based router.\n```elixir\ndefmodule Gateway.MainRouter do\n  use Plug.Router\n  use Plug.ErrorHandler\n\n  import Plug.Conn\n\n  plug(:match)\n  plug(:fetch_query_params)\n  plug(Plug.RequestId)\n  plug(:dispatch)\n\n  match _ do\n   conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(200, \"Found\")\n  end\nend\n\n```\n\nWe have our use statements as well as our import for Plug.Conn. Lines 7,8,9 and 10 are plugs. Every request that comes in passes through each of the plugs before it gets to the route matches. This is useful because we want to build an authentication plug that we can reuse later on and that can be plugged wherever.\n\n## How to build a plug\nLets first see how to build a plug, from the plug documentation:\n```elixir\ndefmodule MyPlug do\n  import Plug.Conn\n\n  def init(options) do\n    options\n  end\n\n  def call(conn, _opts) do\n    conn\n    |> put_resp_content_type(\"text/plain\")\n    |> send_resp(200, \"Hello world\")\n  end\nend\n```\n\nEach plug must have 2 methods, one is init, which allows passing options at compile time to the plug and the other, the call method with the connection received. The call method must either halt the request or return the conn object.\n\n## What do we need for authorization\nLooks pretty simple, now lets think about the authorization we need before we start writing it.\n  - We must accept basic auth for server to server communcation\n  - We must accept jwt(bearer) auth for client to server communication\n  - If no auth header return 401\n\n## Defining our 401\nBefore we start, lets define our 401, if its hit we halt and return 401:\n```elixir\n  defmodule Plug.Auth do\n    defp send_401(\n      conn,\n      data \\\\ %{message: \"Please make sure you have authentication header\"}\n    ) do\n      conn\n      |> put_resp_content_type(\"application/json\")\n      |> send_resp(401, Poison.encode!(data))\n      |> halt\n    end\n  end\n```\n\n## Defining the call method\nNow that we took care of the not authorized lets see how we implement the auth itself. The call method will extract auth header and call authenticate:\n\n```elixir\n  def call(%Plug.Conn{request_path: _path} = conn, _opts) do\n    conn\n    |> get_auth_header\n    |> authenticate\n  end\n```\n\n## Getting the authorization header\nWe try get the auth header and call authenticate. If you ask where is the if/else/try/catch/send_401, Elixir has pattern matching and guard clauses we can leverage to avoid all the boilerplate of defensive programming to keep our focus on our use case.\nLets define the get_auth_header method:\n```elixir\n  defmodule Plug.Auth do\n    defp get_auth_header(conn) do\n      case get_req_header(conn, \"authorization\") do\n        [token] -> {conn, token}\n        _ -> {conn}\n      end\n    end\n  end\n```\n\nThe `get_req_header` is from the Plug.Conn and allows getting the authorization header. We will return a tuple with the token if it exists or a tuple with the conn itself.\n\n# Authenticating\nNow, the interesting part, after `get_auth_header` we call authenticate. Lets leverage Elixir's power to extract what we need:\n```elixir\ndefmodule Plug.Auth do\n  @secret \"my super secret\"\n  @alg \"HS256\"\n  @signer Joken.Signer.create(@alg, @secret)\n\n  defp authenticate({conn, \"Bearer \" <> jwt}) do\n    case Joken.verify(jwt, @signer) do\n      {:ok, claims} -> assign(conn, :user, claims)\n      {:error, err} -> send_401(conn, %{error: err})\n    end\n  end\n\n  defp authenticate({conn, \"Basic \" <> token}) do\n    [username, password] =\n      token\n      |> Base.decode64!(padding: false)\n      |> String.split(\":\")\n\n    case Cache.get(\"users:#{username}\") do\n      nil ->\n        send_401(conn, \"User does not exist\")\n\n      %User{name: username, password: salted_password} ->\n        case Bcrypt.verify_pass(password, salted_password) do\n          true -> assign(conn, :user, %{name: username})\n          false -> send_401(conn, \"Password is incorrect\")\n        end\n    end\n  end\n\n  defp authenticate(_) do\n    send_401(conn)\n  end\nend\n```\n\nWe defined 3 authenticate methods. If the `get_auth_header` returned a tuple with only conn in it, it means we have no auth header, so we call send_401, any other header returned that does not contain basic or bearer receives 401 as well. The other two methods are either Basic or Bearer. Elixir allows us to pattern match on binary strings, because our auth strings always start with Basic or Bearer we can match on them using the `start_of_string <> rest_of_string` syntax. If we hit the bearer auth, we check that the jwt matches, if the basic auth is hit, we compare it to what we have in our cache/db. If auth passes, the assign username/claims is called on the conn object and then returns it.\n\n## Connecting it all together\nNow, lets go back to our initial router and add our plug to it:\n```elixir\ndefmodule Gateway.MainRouter do\n  use Plug.Router\n  use Plug.ErrorHandler\n\n  import Plug.Conn\n\n  plug(:match)\n  plug(Plug.Auth) <- our auth plug\n  plug(:fetch_query_params)\n  plug(Plug.RequestId)\n  plug(:dispatch)\n\n  match _ do\n   conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(200, \"Found\")\n  end\nend\n```\nNow we have an authenticated app!\n\n## Full example\nHere is the full module, dont forget to add Joken or some other jwt checking library and replace Cache for basic auth with your own implementation:\n```elixir\ndefmodule Plug.Auth do\n  import Plug.Conn\n\n  @secret \"my super secret\"\n  @alg \"HS256\"\n  @signer Joken.Signer.create(@alg, @secret)\n\n  def init(opts) do\n    opts\n  end\n\n  defp authenticate({conn, \"Bearer \" <> jwt}) do\n    case Joken.verify(jwt, @signer) do\n      {:ok, claims} -> assign(conn, :user, claims)\n      {:error, err} -> send_401(conn, %{error: err})\n    end\n  end\n\n  defp authenticate({conn, \"Basic \" <> token}) do\n    [username, password] =\n      token\n      |> Base.decode64!(padding: false)\n      |> String.split(\":\")\n\n    case Cache.get(\"users:#{username}\") do\n      nil ->\n        send_401(conn, \"User does not exist\")\n\n      %User{name: username, password: salted_password} ->\n        case Bcrypt.verify_pass(password, salted_password) do\n          true -> assign(conn, :user, %{name: username})\n          false -> send_401(conn, \"Password is incorrect\")\n        end\n    end\n  end\n\n  defp authenticate(_) do\n    send_401(conn)\n  end\n\n  defp send_401(\n         conn,\n         data \\\\ %{message: \"Please make sure you have authentication header\"}\n       ) do\n    conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(401, Poison.encode!(data))\n    |> halt\n  end\n\n  defp get_auth_header(conn) do\n    case get_req_header(conn, \"authorization\") do\n      [token] -> {conn, token}\n      _ -> {conn}\n    end\n  end\n\n  def call(%Plug.Conn{request_path: _path} = conn, _opts) do\n    conn\n    |> get_auth_header\n    |> authenticate\n  end\nend\n```\n\n## Summary\nWe learned what are plugs in Elixir, later on we saw how to implement a plug ourselves. Afterwards, we defined our authentication requirements and last, we implemented the authentication, leveraging Elixir's pattern matching capabilities.","source":"_posts/Authentication-Middleware-In-Elixir.md","raw":"---\ntitle: Authentication Middleware In Elixir\ndate: 2019-07-03 18:44:34\ncategory: Programming\ntags: \n  - Elixir\n  - Functional\n  - Tutorial\n  - Authentication\n  - Middleware\n---\nOne of the first projects I was working on in Elixir was an API gateway. Like everyone else, I saw Pheonix, which is a cool framework for building web servers which is similar to Express.js, but, for my use case, I wanted raw performance for the API gateway, and one of its features was to have basic authentication as well as bearer authentication for json web tokens. One way to achieve this was using Plugs, which are built in the language. A plug is similar to a middleware in Express.js, it accepts input, does some manipulation and either halts the request or passes it on. In this post I will show how I implemented an authentication plug in Elixir.\n\n\n## Router with plugs\nLets first look at how plugs look in a cowboy based router.\n```elixir\ndefmodule Gateway.MainRouter do\n  use Plug.Router\n  use Plug.ErrorHandler\n\n  import Plug.Conn\n\n  plug(:match)\n  plug(:fetch_query_params)\n  plug(Plug.RequestId)\n  plug(:dispatch)\n\n  match _ do\n   conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(200, \"Found\")\n  end\nend\n\n```\n\nWe have our use statements as well as our import for Plug.Conn. Lines 7,8,9 and 10 are plugs. Every request that comes in passes through each of the plugs before it gets to the route matches. This is useful because we want to build an authentication plug that we can reuse later on and that can be plugged wherever.\n\n## How to build a plug\nLets first see how to build a plug, from the plug documentation:\n```elixir\ndefmodule MyPlug do\n  import Plug.Conn\n\n  def init(options) do\n    options\n  end\n\n  def call(conn, _opts) do\n    conn\n    |> put_resp_content_type(\"text/plain\")\n    |> send_resp(200, \"Hello world\")\n  end\nend\n```\n\nEach plug must have 2 methods, one is init, which allows passing options at compile time to the plug and the other, the call method with the connection received. The call method must either halt the request or return the conn object.\n\n## What do we need for authorization\nLooks pretty simple, now lets think about the authorization we need before we start writing it.\n  - We must accept basic auth for server to server communcation\n  - We must accept jwt(bearer) auth for client to server communication\n  - If no auth header return 401\n\n## Defining our 401\nBefore we start, lets define our 401, if its hit we halt and return 401:\n```elixir\n  defmodule Plug.Auth do\n    defp send_401(\n      conn,\n      data \\\\ %{message: \"Please make sure you have authentication header\"}\n    ) do\n      conn\n      |> put_resp_content_type(\"application/json\")\n      |> send_resp(401, Poison.encode!(data))\n      |> halt\n    end\n  end\n```\n\n## Defining the call method\nNow that we took care of the not authorized lets see how we implement the auth itself. The call method will extract auth header and call authenticate:\n\n```elixir\n  def call(%Plug.Conn{request_path: _path} = conn, _opts) do\n    conn\n    |> get_auth_header\n    |> authenticate\n  end\n```\n\n## Getting the authorization header\nWe try get the auth header and call authenticate. If you ask where is the if/else/try/catch/send_401, Elixir has pattern matching and guard clauses we can leverage to avoid all the boilerplate of defensive programming to keep our focus on our use case.\nLets define the get_auth_header method:\n```elixir\n  defmodule Plug.Auth do\n    defp get_auth_header(conn) do\n      case get_req_header(conn, \"authorization\") do\n        [token] -> {conn, token}\n        _ -> {conn}\n      end\n    end\n  end\n```\n\nThe `get_req_header` is from the Plug.Conn and allows getting the authorization header. We will return a tuple with the token if it exists or a tuple with the conn itself.\n\n# Authenticating\nNow, the interesting part, after `get_auth_header` we call authenticate. Lets leverage Elixir's power to extract what we need:\n```elixir\ndefmodule Plug.Auth do\n  @secret \"my super secret\"\n  @alg \"HS256\"\n  @signer Joken.Signer.create(@alg, @secret)\n\n  defp authenticate({conn, \"Bearer \" <> jwt}) do\n    case Joken.verify(jwt, @signer) do\n      {:ok, claims} -> assign(conn, :user, claims)\n      {:error, err} -> send_401(conn, %{error: err})\n    end\n  end\n\n  defp authenticate({conn, \"Basic \" <> token}) do\n    [username, password] =\n      token\n      |> Base.decode64!(padding: false)\n      |> String.split(\":\")\n\n    case Cache.get(\"users:#{username}\") do\n      nil ->\n        send_401(conn, \"User does not exist\")\n\n      %User{name: username, password: salted_password} ->\n        case Bcrypt.verify_pass(password, salted_password) do\n          true -> assign(conn, :user, %{name: username})\n          false -> send_401(conn, \"Password is incorrect\")\n        end\n    end\n  end\n\n  defp authenticate(_) do\n    send_401(conn)\n  end\nend\n```\n\nWe defined 3 authenticate methods. If the `get_auth_header` returned a tuple with only conn in it, it means we have no auth header, so we call send_401, any other header returned that does not contain basic or bearer receives 401 as well. The other two methods are either Basic or Bearer. Elixir allows us to pattern match on binary strings, because our auth strings always start with Basic or Bearer we can match on them using the `start_of_string <> rest_of_string` syntax. If we hit the bearer auth, we check that the jwt matches, if the basic auth is hit, we compare it to what we have in our cache/db. If auth passes, the assign username/claims is called on the conn object and then returns it.\n\n## Connecting it all together\nNow, lets go back to our initial router and add our plug to it:\n```elixir\ndefmodule Gateway.MainRouter do\n  use Plug.Router\n  use Plug.ErrorHandler\n\n  import Plug.Conn\n\n  plug(:match)\n  plug(Plug.Auth) <- our auth plug\n  plug(:fetch_query_params)\n  plug(Plug.RequestId)\n  plug(:dispatch)\n\n  match _ do\n   conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(200, \"Found\")\n  end\nend\n```\nNow we have an authenticated app!\n\n## Full example\nHere is the full module, dont forget to add Joken or some other jwt checking library and replace Cache for basic auth with your own implementation:\n```elixir\ndefmodule Plug.Auth do\n  import Plug.Conn\n\n  @secret \"my super secret\"\n  @alg \"HS256\"\n  @signer Joken.Signer.create(@alg, @secret)\n\n  def init(opts) do\n    opts\n  end\n\n  defp authenticate({conn, \"Bearer \" <> jwt}) do\n    case Joken.verify(jwt, @signer) do\n      {:ok, claims} -> assign(conn, :user, claims)\n      {:error, err} -> send_401(conn, %{error: err})\n    end\n  end\n\n  defp authenticate({conn, \"Basic \" <> token}) do\n    [username, password] =\n      token\n      |> Base.decode64!(padding: false)\n      |> String.split(\":\")\n\n    case Cache.get(\"users:#{username}\") do\n      nil ->\n        send_401(conn, \"User does not exist\")\n\n      %User{name: username, password: salted_password} ->\n        case Bcrypt.verify_pass(password, salted_password) do\n          true -> assign(conn, :user, %{name: username})\n          false -> send_401(conn, \"Password is incorrect\")\n        end\n    end\n  end\n\n  defp authenticate(_) do\n    send_401(conn)\n  end\n\n  defp send_401(\n         conn,\n         data \\\\ %{message: \"Please make sure you have authentication header\"}\n       ) do\n    conn\n    |> put_resp_content_type(\"application/json\")\n    |> send_resp(401, Poison.encode!(data))\n    |> halt\n  end\n\n  defp get_auth_header(conn) do\n    case get_req_header(conn, \"authorization\") do\n      [token] -> {conn, token}\n      _ -> {conn}\n    end\n  end\n\n  def call(%Plug.Conn{request_path: _path} = conn, _opts) do\n    conn\n    |> get_auth_header\n    |> authenticate\n  end\nend\n```\n\n## Summary\nWe learned what are plugs in Elixir, later on we saw how to implement a plug ourselves. Afterwards, we defined our authentication requirements and last, we implemented the authentication, leveraging Elixir's pattern matching capabilities.","slug":"Authentication-Middleware-In-Elixir","published":1,"updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1mv000l78tagwd3h2ep","comments":1,"layout":"post","photos":[],"link":"","content":"<p>One of the first projects I was working on in Elixir was an API gateway. Like everyone else, I saw Pheonix, which is a cool framework for building web servers which is similar to Express.js, but, for my use case, I wanted raw performance for the API gateway, and one of its features was to have basic authentication as well as bearer authentication for json web tokens. One way to achieve this was using Plugs, which are built in the language. A plug is similar to a middleware in Express.js, it accepts input, does some manipulation and either halts the request or passes it on. In this post I will show how I implemented an authentication plug in Elixir.</p>\n<h2 id=\"Router-with-plugs\"><a href=\"#Router-with-plugs\" class=\"headerlink\" title=\"Router with plugs\"></a>Router with plugs</h2><p>Lets first look at how plugs look in a cowboy based router.</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Gateway.MainRouter</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">use</span> Plug.Router</span><br><span class=\"line\">  <span class=\"hljs-keyword\">use</span> Plug.ErrorHandler</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:match</span>)</span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:fetch_query_params</span>)</span><br><span class=\"line\">  plug(Plug.RequestId)</span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  match _ <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">   conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"hljs-string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;Found&quot;</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We have our use statements as well as our import for Plug.Conn. Lines 7,8,9 and 10 are plugs. Every request that comes in passes through each of the plugs before it gets to the route matches. This is useful because we want to build an authentication plug that we can reuse later on and that can be plugged wherever.</p>\n<h2 id=\"How-to-build-a-plug\"><a href=\"#How-to-build-a-plug\" class=\"headerlink\" title=\"How to build a plug\"></a>How to build a plug</h2><p>Lets first see how to build a plug, from the plug documentation:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">MyPlug</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init</span></span>(options) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    options</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span></span>(conn, _opts) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"hljs-string\">&quot;text/plain&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;Hello world&quot;</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Each plug must have 2 methods, one is init, which allows passing options at compile time to the plug and the other, the call method with the connection received. The call method must either halt the request or return the conn object.</p>\n<h2 id=\"What-do-we-need-for-authorization\"><a href=\"#What-do-we-need-for-authorization\" class=\"headerlink\" title=\"What do we need for authorization\"></a>What do we need for authorization</h2><p>Looks pretty simple, now lets think about the authorization we need before we start writing it.</p>\n<ul>\n<li>We must accept basic auth for server to server communcation</li>\n<li>We must accept jwt(bearer) auth for client to server communication</li>\n<li>If no auth header return 401</li>\n</ul>\n<h2 id=\"Defining-our-401\"><a href=\"#Defining-our-401\" class=\"headerlink\" title=\"Defining our 401\"></a>Defining our 401</h2><p>Before we start, lets define our 401, if its hit we halt and return 401:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Plug.Auth</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">send_401</span></span>(</span><br><span class=\"line\">    conn,</span><br><span class=\"line\">    data \\\\ %&#123;<span class=\"hljs-symbol\">message:</span> <span class=\"hljs-string\">&quot;Please make sure you have authentication header&quot;</span>&#125;</span><br><span class=\"line\">  ) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"hljs-string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"hljs-number\">401</span>, Poison.encode!(data))</span><br><span class=\"line\">    |&gt; halt</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Defining-the-call-method\"><a href=\"#Defining-the-call-method\" class=\"headerlink\" title=\"Defining the call method\"></a>Defining the call method</h2><p>Now that we took care of the not authorized lets see how we implement the auth itself. The call method will extract auth header and call authenticate:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span></span>(%Plug.Conn&#123;<span class=\"hljs-symbol\">request_path:</span> _path&#125; = conn, _opts) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  conn</span><br><span class=\"line\">  |&gt; get_auth_header</span><br><span class=\"line\">  |&gt; authenticate</span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getting-the-authorization-header\"><a href=\"#Getting-the-authorization-header\" class=\"headerlink\" title=\"Getting the authorization header\"></a>Getting the authorization header</h2><p>We try get the auth header and call authenticate. If you ask where is the if/else/try/catch/send_401, Elixir has pattern matching and guard clauses we can leverage to avoid all the boilerplate of defensive programming to keep our focus on our use case.<br>Lets define the get_auth_header method:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Plug.Auth</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">get_auth_header</span></span>(conn) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> get_req_header(conn, <span class=\"hljs-string\">&quot;authorization&quot;</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      [token] -&gt; &#123;conn, token&#125;</span><br><span class=\"line\">      _ -&gt; &#123;conn&#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>get_req_header</code> is from the Plug.Conn and allows getting the authorization header. We will return a tuple with the token if it exists or a tuple with the conn itself.</p>\n<h1 id=\"Authenticating\"><a href=\"#Authenticating\" class=\"headerlink\" title=\"Authenticating\"></a>Authenticating</h1><p>Now, the interesting part, after <code>get_auth_header</code> we call authenticate. Lets leverage Elixir’s power to extract what we need:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Plug.Auth</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">@secret</span> <span class=\"hljs-string\">&quot;my super secret&quot;</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">@alg</span> <span class=\"hljs-string\">&quot;HS256&quot;</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">@signer</span> Joken.Signer.create(<span class=\"hljs-variable\">@alg</span>, <span class=\"hljs-variable\">@secret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(&#123;conn, <span class=\"hljs-string\">&quot;Bearer &quot;</span> &lt;&gt; jwt&#125;) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> Joken.verify(jwt, <span class=\"hljs-variable\">@signer</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      &#123;<span class=\"hljs-symbol\">:ok</span>, claims&#125; -&gt; assign(conn, <span class=\"hljs-symbol\">:user</span>, claims)</span><br><span class=\"line\">      &#123;<span class=\"hljs-symbol\">:error</span>, err&#125; -&gt; send_401(conn, %&#123;<span class=\"hljs-symbol\">error:</span> err&#125;)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(&#123;conn, <span class=\"hljs-string\">&quot;Basic &quot;</span> &lt;&gt; token&#125;) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    [username, password] =</span><br><span class=\"line\">      token</span><br><span class=\"line\">      |&gt; Base.decode64!(<span class=\"hljs-symbol\">padding:</span> <span class=\"hljs-keyword\">false</span>)</span><br><span class=\"line\">      |&gt; String.split(<span class=\"hljs-string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> Cache.get(<span class=\"hljs-string\">&quot;users:<span class=\"hljs-subst\">#&#123;username&#125;</span>&quot;</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">nil</span> -&gt;</span><br><span class=\"line\">        send_401(conn, <span class=\"hljs-string\">&quot;User does not exist&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      %User&#123;<span class=\"hljs-symbol\">name:</span> username, <span class=\"hljs-symbol\">password:</span> salted_password&#125; -&gt;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">case</span> Bcrypt.verify_pass(password, salted_password) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">          <span class=\"hljs-keyword\">true</span> -&gt; assign(conn, <span class=\"hljs-symbol\">:user</span>, %&#123;<span class=\"hljs-symbol\">name:</span> username&#125;)</span><br><span class=\"line\">          <span class=\"hljs-keyword\">false</span> -&gt; send_401(conn, <span class=\"hljs-string\">&quot;Password is incorrect&quot;</span>)</span><br><span class=\"line\">        <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(_) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    send_401(conn)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>We defined 3 authenticate methods. If the <code>get_auth_header</code> returned a tuple with only conn in it, it means we have no auth header, so we call send_401, any other header returned that does not contain basic or bearer receives 401 as well. The other two methods are either Basic or Bearer. Elixir allows us to pattern match on binary strings, because our auth strings always start with Basic or Bearer we can match on them using the <code>start_of_string &lt;&gt; rest_of_string</code> syntax. If we hit the bearer auth, we check that the jwt matches, if the basic auth is hit, we compare it to what we have in our cache/db. If auth passes, the assign username/claims is called on the conn object and then returns it.</p>\n<h2 id=\"Connecting-it-all-together\"><a href=\"#Connecting-it-all-together\" class=\"headerlink\" title=\"Connecting it all together\"></a>Connecting it all together</h2><p>Now, lets go back to our initial router and add our plug to it:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Gateway.MainRouter</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">use</span> Plug.Router</span><br><span class=\"line\">  <span class=\"hljs-keyword\">use</span> Plug.ErrorHandler</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:match</span>)</span><br><span class=\"line\">  plug(Plug.Auth) &lt;- our auth plug</span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:fetch_query_params</span>)</span><br><span class=\"line\">  plug(Plug.RequestId)</span><br><span class=\"line\">  plug(<span class=\"hljs-symbol\">:dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  match _ <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">   conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"hljs-string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">&quot;Found&quot;</span>)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Now we have an authenticated app!</p>\n<h2 id=\"Full-example\"><a href=\"#Full-example\" class=\"headerlink\" title=\"Full example\"></a>Full example</h2><p>Here is the full module, dont forget to add Joken or some other jwt checking library and replace Cache for basic auth with your own implementation:</p>\n<figure class=\"highlight elixir hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">defmodule</span> <span class=\"hljs-title\">Plug.Auth</span></span> <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-variable\">@secret</span> <span class=\"hljs-string\">&quot;my super secret&quot;</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">@alg</span> <span class=\"hljs-string\">&quot;HS256&quot;</span></span><br><span class=\"line\">  <span class=\"hljs-variable\">@signer</span> Joken.Signer.create(<span class=\"hljs-variable\">@alg</span>, <span class=\"hljs-variable\">@secret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">init</span></span>(opts) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    opts</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(&#123;conn, <span class=\"hljs-string\">&quot;Bearer &quot;</span> &lt;&gt; jwt&#125;) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> Joken.verify(jwt, <span class=\"hljs-variable\">@signer</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      &#123;<span class=\"hljs-symbol\">:ok</span>, claims&#125; -&gt; assign(conn, <span class=\"hljs-symbol\">:user</span>, claims)</span><br><span class=\"line\">      &#123;<span class=\"hljs-symbol\">:error</span>, err&#125; -&gt; send_401(conn, %&#123;<span class=\"hljs-symbol\">error:</span> err&#125;)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(&#123;conn, <span class=\"hljs-string\">&quot;Basic &quot;</span> &lt;&gt; token&#125;) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    [username, password] =</span><br><span class=\"line\">      token</span><br><span class=\"line\">      |&gt; Base.decode64!(<span class=\"hljs-symbol\">padding:</span> <span class=\"hljs-keyword\">false</span>)</span><br><span class=\"line\">      |&gt; String.split(<span class=\"hljs-string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> Cache.get(<span class=\"hljs-string\">&quot;users:<span class=\"hljs-subst\">#&#123;username&#125;</span>&quot;</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">nil</span> -&gt;</span><br><span class=\"line\">        send_401(conn, <span class=\"hljs-string\">&quot;User does not exist&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      %User&#123;<span class=\"hljs-symbol\">name:</span> username, <span class=\"hljs-symbol\">password:</span> salted_password&#125; -&gt;</span><br><span class=\"line\">        <span class=\"hljs-keyword\">case</span> Bcrypt.verify_pass(password, salted_password) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">          <span class=\"hljs-keyword\">true</span> -&gt; assign(conn, <span class=\"hljs-symbol\">:user</span>, %&#123;<span class=\"hljs-symbol\">name:</span> username&#125;)</span><br><span class=\"line\">          <span class=\"hljs-keyword\">false</span> -&gt; send_401(conn, <span class=\"hljs-string\">&quot;Password is incorrect&quot;</span>)</span><br><span class=\"line\">        <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">authenticate</span></span>(_) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    send_401(conn)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">send_401</span></span>(</span><br><span class=\"line\">         conn,</span><br><span class=\"line\">         data \\\\ %&#123;<span class=\"hljs-symbol\">message:</span> <span class=\"hljs-string\">&quot;Please make sure you have authentication header&quot;</span>&#125;</span><br><span class=\"line\">       ) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"hljs-string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"hljs-number\">401</span>, Poison.encode!(data))</span><br><span class=\"line\">    |&gt; halt</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">defp</span> <span class=\"hljs-title\">get_auth_header</span></span>(conn) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> get_req_header(conn, <span class=\"hljs-string\">&quot;authorization&quot;</span>) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">      [token] -&gt; &#123;conn, token&#125;</span><br><span class=\"line\">      _ -&gt; &#123;conn&#125;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">call</span></span>(%Plug.Conn&#123;<span class=\"hljs-symbol\">request_path:</span> _path&#125; = conn, _opts) <span class=\"hljs-keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; get_auth_header</span><br><span class=\"line\">    |&gt; authenticate</span><br><span class=\"line\">  <span class=\"hljs-keyword\">end</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We learned what are plugs in Elixir, later on we saw how to implement a plug ourselves. Afterwards, we defined our authentication requirements and last, we implemented the authentication, leveraging Elixir’s pattern matching capabilities.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>One of the first projects I was working on in Elixir was an API gateway. Like everyone else, I saw Pheonix, which is a cool framework for building web servers which is similar to Express.js, but, for my use case, I wanted raw performance for the API gateway, and one of its features was to have basic authentication as well as bearer authentication for json web tokens. One way to achieve this was using Plugs, which are built in the language. A plug is similar to a middleware in Express.js, it accepts input, does some manipulation and either halts the request or passes it on. In this post I will show how I implemented an authentication plug in Elixir.</p>\n<h2 id=\"Router-with-plugs\"><a href=\"#Router-with-plugs\" class=\"headerlink\" title=\"Router with plugs\"></a>Router with plugs</h2><p>Lets first look at how plugs look in a cowboy based router.</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Gateway.MainRouter</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">use</span> Plug.Router</span><br><span class=\"line\">  <span class=\"keyword\">use</span> Plug.ErrorHandler</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  plug(<span class=\"symbol\">:match</span>)</span><br><span class=\"line\">  plug(<span class=\"symbol\">:fetch_query_params</span>)</span><br><span class=\"line\">  plug(Plug.RequestId)</span><br><span class=\"line\">  plug(<span class=\"symbol\">:dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  match _ <span class=\"keyword\">do</span></span><br><span class=\"line\">   conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"number\">200</span>, <span class=\"string\">&quot;Found&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>We have our use statements as well as our import for Plug.Conn. Lines 7,8,9 and 10 are plugs. Every request that comes in passes through each of the plugs before it gets to the route matches. This is useful because we want to build an authentication plug that we can reuse later on and that can be plugged wherever.</p>\n<h2 id=\"How-to-build-a-plug\"><a href=\"#How-to-build-a-plug\" class=\"headerlink\" title=\"How to build a plug\"></a>How to build a plug</h2><p>Lets first see how to build a plug, from the plug documentation:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">MyPlug</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span></span>(options) <span class=\"keyword\">do</span></span><br><span class=\"line\">    options</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span></span>(conn, _opts) <span class=\"keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"string\">&quot;text/plain&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"number\">200</span>, <span class=\"string\">&quot;Hello world&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>Each plug must have 2 methods, one is init, which allows passing options at compile time to the plug and the other, the call method with the connection received. The call method must either halt the request or return the conn object.</p>\n<h2 id=\"What-do-we-need-for-authorization\"><a href=\"#What-do-we-need-for-authorization\" class=\"headerlink\" title=\"What do we need for authorization\"></a>What do we need for authorization</h2><p>Looks pretty simple, now lets think about the authorization we need before we start writing it.</p>\n<ul>\n<li>We must accept basic auth for server to server communcation</li>\n<li>We must accept jwt(bearer) auth for client to server communication</li>\n<li>If no auth header return 401</li>\n</ul>\n<h2 id=\"Defining-our-401\"><a href=\"#Defining-our-401\" class=\"headerlink\" title=\"Defining our 401\"></a>Defining our 401</h2><p>Before we start, lets define our 401, if its hit we halt and return 401:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Plug.Auth</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">send_401</span></span>(</span><br><span class=\"line\">    conn,</span><br><span class=\"line\">    data \\\\ %&#123;<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Please make sure you have authentication header&quot;</span>&#125;</span><br><span class=\"line\">  ) <span class=\"keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"number\">401</span>, Poison.encode!(data))</span><br><span class=\"line\">    |&gt; halt</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Defining-the-call-method\"><a href=\"#Defining-the-call-method\" class=\"headerlink\" title=\"Defining the call method\"></a>Defining the call method</h2><p>Now that we took care of the not authorized lets see how we implement the auth itself. The call method will extract auth header and call authenticate:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span></span>(%Plug.Conn&#123;<span class=\"symbol\">request_path:</span> _path&#125; = conn, _opts) <span class=\"keyword\">do</span></span><br><span class=\"line\">  conn</span><br><span class=\"line\">  |&gt; get_auth_header</span><br><span class=\"line\">  |&gt; authenticate</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getting-the-authorization-header\"><a href=\"#Getting-the-authorization-header\" class=\"headerlink\" title=\"Getting the authorization header\"></a>Getting the authorization header</h2><p>We try get the auth header and call authenticate. If you ask where is the if/else/try/catch/send_401, Elixir has pattern matching and guard clauses we can leverage to avoid all the boilerplate of defensive programming to keep our focus on our use case.<br>Lets define the get_auth_header method:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Plug.Auth</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">get_auth_header</span></span>(conn) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> get_req_header(conn, <span class=\"string\">&quot;authorization&quot;</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      [token] -&gt; &#123;conn, token&#125;</span><br><span class=\"line\">      _ -&gt; &#123;conn&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>get_req_header</code> is from the Plug.Conn and allows getting the authorization header. We will return a tuple with the token if it exists or a tuple with the conn itself.</p>\n<h1 id=\"Authenticating\"><a href=\"#Authenticating\" class=\"headerlink\" title=\"Authenticating\"></a>Authenticating</h1><p>Now, the interesting part, after <code>get_auth_header</code> we call authenticate. Lets leverage Elixir’s power to extract what we need:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Plug.Auth</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"variable\">@secret</span> <span class=\"string\">&quot;my super secret&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">@alg</span> <span class=\"string\">&quot;HS256&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">@signer</span> Joken.Signer.create(<span class=\"variable\">@alg</span>, <span class=\"variable\">@secret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(&#123;conn, <span class=\"string\">&quot;Bearer &quot;</span> &lt;&gt; jwt&#125;) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> Joken.verify(jwt, <span class=\"variable\">@signer</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      &#123;<span class=\"symbol\">:ok</span>, claims&#125; -&gt; assign(conn, <span class=\"symbol\">:user</span>, claims)</span><br><span class=\"line\">      &#123;<span class=\"symbol\">:error</span>, err&#125; -&gt; send_401(conn, %&#123;<span class=\"symbol\">error:</span> err&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(&#123;conn, <span class=\"string\">&quot;Basic &quot;</span> &lt;&gt; token&#125;) <span class=\"keyword\">do</span></span><br><span class=\"line\">    [username, password] =</span><br><span class=\"line\">      token</span><br><span class=\"line\">      |&gt; Base.decode64!(<span class=\"symbol\">padding:</span> <span class=\"keyword\">false</span>)</span><br><span class=\"line\">      |&gt; String.split(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> Cache.get(<span class=\"string\">&quot;users:<span class=\"subst\">#&#123;username&#125;</span>&quot;</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"keyword\">nil</span> -&gt;</span><br><span class=\"line\">        send_401(conn, <span class=\"string\">&quot;User does not exist&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      %User&#123;<span class=\"symbol\">name:</span> username, <span class=\"symbol\">password:</span> salted_password&#125; -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Bcrypt.verify_pass(password, salted_password) <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"keyword\">true</span> -&gt; assign(conn, <span class=\"symbol\">:user</span>, %&#123;<span class=\"symbol\">name:</span> username&#125;)</span><br><span class=\"line\">          <span class=\"keyword\">false</span> -&gt; send_401(conn, <span class=\"string\">&quot;Password is incorrect&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(_) <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_401(conn)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<p>We defined 3 authenticate methods. If the <code>get_auth_header</code> returned a tuple with only conn in it, it means we have no auth header, so we call send_401, any other header returned that does not contain basic or bearer receives 401 as well. The other two methods are either Basic or Bearer. Elixir allows us to pattern match on binary strings, because our auth strings always start with Basic or Bearer we can match on them using the <code>start_of_string &lt;&gt; rest_of_string</code> syntax. If we hit the bearer auth, we check that the jwt matches, if the basic auth is hit, we compare it to what we have in our cache/db. If auth passes, the assign username/claims is called on the conn object and then returns it.</p>\n<h2 id=\"Connecting-it-all-together\"><a href=\"#Connecting-it-all-together\" class=\"headerlink\" title=\"Connecting it all together\"></a>Connecting it all together</h2><p>Now, lets go back to our initial router and add our plug to it:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Gateway.MainRouter</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">use</span> Plug.Router</span><br><span class=\"line\">  <span class=\"keyword\">use</span> Plug.ErrorHandler</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  plug(<span class=\"symbol\">:match</span>)</span><br><span class=\"line\">  plug(Plug.Auth) &lt;- our auth plug</span><br><span class=\"line\">  plug(<span class=\"symbol\">:fetch_query_params</span>)</span><br><span class=\"line\">  plug(Plug.RequestId)</span><br><span class=\"line\">  plug(<span class=\"symbol\">:dispatch</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  match _ <span class=\"keyword\">do</span></span><br><span class=\"line\">   conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"number\">200</span>, <span class=\"string\">&quot;Found&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>Now we have an authenticated app!</p>\n<h2 id=\"Full-example\"><a href=\"#Full-example\" class=\"headerlink\" title=\"Full example\"></a>Full example</h2><p>Here is the full module, dont forget to add Joken or some other jwt checking library and replace Cache for basic auth with your own implementation:</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">defmodule</span> <span class=\"title\">Plug.Auth</span></span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">import</span> Plug.Conn</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable\">@secret</span> <span class=\"string\">&quot;my super secret&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">@alg</span> <span class=\"string\">&quot;HS256&quot;</span></span><br><span class=\"line\">  <span class=\"variable\">@signer</span> Joken.Signer.create(<span class=\"variable\">@alg</span>, <span class=\"variable\">@secret</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">init</span></span>(opts) <span class=\"keyword\">do</span></span><br><span class=\"line\">    opts</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(&#123;conn, <span class=\"string\">&quot;Bearer &quot;</span> &lt;&gt; jwt&#125;) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> Joken.verify(jwt, <span class=\"variable\">@signer</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      &#123;<span class=\"symbol\">:ok</span>, claims&#125; -&gt; assign(conn, <span class=\"symbol\">:user</span>, claims)</span><br><span class=\"line\">      &#123;<span class=\"symbol\">:error</span>, err&#125; -&gt; send_401(conn, %&#123;<span class=\"symbol\">error:</span> err&#125;)</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(&#123;conn, <span class=\"string\">&quot;Basic &quot;</span> &lt;&gt; token&#125;) <span class=\"keyword\">do</span></span><br><span class=\"line\">    [username, password] =</span><br><span class=\"line\">      token</span><br><span class=\"line\">      |&gt; Base.decode64!(<span class=\"symbol\">padding:</span> <span class=\"keyword\">false</span>)</span><br><span class=\"line\">      |&gt; String.split(<span class=\"string\">&quot;:&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">case</span> Cache.get(<span class=\"string\">&quot;users:<span class=\"subst\">#&#123;username&#125;</span>&quot;</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      <span class=\"keyword\">nil</span> -&gt;</span><br><span class=\"line\">        send_401(conn, <span class=\"string\">&quot;User does not exist&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      %User&#123;<span class=\"symbol\">name:</span> username, <span class=\"symbol\">password:</span> salted_password&#125; -&gt;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> Bcrypt.verify_pass(password, salted_password) <span class=\"keyword\">do</span></span><br><span class=\"line\">          <span class=\"keyword\">true</span> -&gt; assign(conn, <span class=\"symbol\">:user</span>, %&#123;<span class=\"symbol\">name:</span> username&#125;)</span><br><span class=\"line\">          <span class=\"keyword\">false</span> -&gt; send_401(conn, <span class=\"string\">&quot;Password is incorrect&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">authenticate</span></span>(_) <span class=\"keyword\">do</span></span><br><span class=\"line\">    send_401(conn)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">send_401</span></span>(</span><br><span class=\"line\">         conn,</span><br><span class=\"line\">         data \\\\ %&#123;<span class=\"symbol\">message:</span> <span class=\"string\">&quot;Please make sure you have authentication header&quot;</span>&#125;</span><br><span class=\"line\">       ) <span class=\"keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; put_resp_content_type(<span class=\"string\">&quot;application/json&quot;</span>)</span><br><span class=\"line\">    |&gt; send_resp(<span class=\"number\">401</span>, Poison.encode!(data))</span><br><span class=\"line\">    |&gt; halt</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">defp</span> <span class=\"title\">get_auth_header</span></span>(conn) <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> get_req_header(conn, <span class=\"string\">&quot;authorization&quot;</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">      [token] -&gt; &#123;conn, token&#125;</span><br><span class=\"line\">      _ -&gt; &#123;conn&#125;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">call</span></span>(%Plug.Conn&#123;<span class=\"symbol\">request_path:</span> _path&#125; = conn, _opts) <span class=\"keyword\">do</span></span><br><span class=\"line\">    conn</span><br><span class=\"line\">    |&gt; get_auth_header</span><br><span class=\"line\">    |&gt; authenticate</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We learned what are plugs in Elixir, later on we saw how to implement a plug ourselves. Afterwards, we defined our authentication requirements and last, we implemented the authentication, leveraging Elixir’s pattern matching capabilities.</p>\n"},{"title":"Functional Programming in 10 Minutes","date":"2019-06-22T15:13:57.000Z","_content":"When I first saw the ideas of functional programming, I found them very strange due to the fact that, I, like most people, got used to structural and object oriented programming paradigms. The structural takes away the `goto` definitions from our code and replaces them with `if/else/do/while`, which forces the code to execute in an order. The object oriented, encapsulates local variables and methods long after a function returns (what eventually became a constructor) and through the use of function pointers introduced polymorphism. In this post, I will introduce you to functional programming.\n\n## Functional Programming in a Nutshell\nIt is the direct result of Alonso Church, who invented Lambda Calculus in 1936. FP treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.\n\nBefore I jump to the characteristics, I want to point out that the terms `highlighted` will be explained later on. All code examples will be written in Javascript.\n\n## The Characteristics of Functional Programming\n  1. Immutability - Once a variable is created, it cannot be mutated.\n  2. Declerative - Describes **what** the program must accomplish in terms of the problem domain, rather than describe **how** to accomplish it as a sequence of the programming language primitives.\n  3. Higher-order functions and functions as first class citizens - Functions can take other functions as arguments or return them as results. With the help of `closures`, functions allow `currying` and `partial application`.\n  4. Pure functions - functions that have no `side effects`.\n  5. Recursion - For loops inherently mutate state, remember incrementing i ? As FP does not allow mutating state everything is done with recursion. Do not worry about stackoverflow errors, as FP has optimized recursions called `tail call recursions`.\n\nWe saw some characteristics, now, lets see what are closures, currying, partial application, side effects and tail call recursions.\n\n## Closures\nThink of a function's variables as a bag. When the function is returned (removed from the stack and its frame is destroyed), its bag remains. We previously said that functions can return other functions and closures come into play when an outer function is destroyed and the inner function wants to access previously passed arguments (the outer functions bag).\n```javascript\n  function firstName(firstName){\n    return function lastName(lastName){\n      return firstName + lastName\n    }\n  }\n  const firstNameWill = firstName(\"Will\")\n  const lastNameSmith = firstNameWill(\"Smith\")\n  const lastNameIAM = firstNameWill(\".I.AM\")\n  /* prints Will Smith */\n  console.log(lastNameSmith) \n  /* prints Will.I.AM */\n  console.log(lastNameIAM) \n```\nYou see how we stored `\"Will\"` in the \"bag\" of the firstName function. Even after it returned, we still had access to its variables. It allowed us to reuse the name Will and call it with different last names.\n\n## Currying\nIn mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.\n\nLets see an example without currying\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  console.log(entireName(\"Will\"))\n  // prints \"Will undefined undefined\"\n```\nWith function currying, if we pass 1 argument, we will recieve a function back and only when all arguments are passed, our function will execute.\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /*\n    the above in its curried form lookes like this:\n  */\n  function entireName(firstName){\n    return function middleName(middleName){\n      return function lastName(lastName){\n        return firstName + middleName + lastName\n      }\n    }\n  }\n\n  const withNameWill = entireName(\"Will\")\n  const withMiddleNameI = withNameWill(\"I\")\n  const withLastNameAM = withMiddleNameI(\"AM\")\n  /*\n  Note that purely functional languages curry by default, like `Haskell`, others have different libraries for automatic currying of functions\n  for example with ramda.js we could wrap our entireName function in a curry function\n  */\n  const { curry } = require(\"ramda\")\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /* Below function is automatically curried like the example above and it is a lot more readable */\n  const curriedEntireName = curry(entireName)\n```\n\n## Partial Application\nPartial application works similar to currying. The difference between them is that currying splits a function to functions that receive one argument, also called unary, while partial application allows passing multiple arguments. Lets see an example\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /*\n    Look how we passed \"Will\" and \"I\" together. With currying you have to pass a single argument at a time\n    until all arguments are passed. With partial Application you can pass any number of arguments and it will either execute if all arguments were given, or return a function that expects the original number of arguments minus the ones passed.\n  */\n  const { partial } = require(\"ramda\")\n  const partialWithTwoArgs = partial(entireName, [\"Will\", \"I\"])\n  const fullName = partial(partialWithTwoArgs, [\"AM\"])\n  console.log(fullName)\n  /*\n    prints \"Will I AM\"\n  */\n```\n\n## Side Effects\nIn programming, a side effect is when a procedure changes a variable from outside its scope.\nFor example:\n```javascript\nfunction updateVariable(){\n  dbConnection.set(\"side_effect\", true)\n}\n```\nWe changed some state outside of our function - this is called a side effect.\nFunctional programming is against side effects, but without side effects we would not be able to write software. Instead we try to limit the amount of side effects, allowing only a portion of our code to carefully do them.\n\n## Recursion\nRecursion in computer science is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem (as opposed to iteration). Basically, a function calls itself multiple times until some condition is met.\nFor example, lets see a fibonacci recursion, do not mind the big O notation:\n```javascript\nfunction fibonacci(num) {\n  if (num <= 1) return 1;\n  return fibonacci(num - 1) + fibonacci(num - 2);\n}\n```\nThis function will call itself repeatedly until the condition above is met and until it does that, the function will create multiple frames of itself, possibly leading to stackoverflow.\nTo address the recursion problem, tail-call optimization is used. Tail-call optimization is where you are able to avoid allocating a new stack frame for a function because the calling function will simply return the value that it gets from the called function. Usually, the compiler takes care of tail call optimization in functional languages, I will not elaborate on when tail call optimization does not occur, but if you get into FP in more detail, make sure to read about it.\n\n## Bonus: Pipes\nLets see how we put to practice all the above. In functional languages we usually have a pipe operator that allows an argument to pass through a series of functions. \n```javascript\n/*\n  Math: f(g(h(x, y)))\n*/\n/*\n  Equivalent JS\n*/\nconst operate = (x, y) => square(addOne(multiply(x, y)))\n\n/*\n  Same as above with pipe\n*/\nconst operate = pipe(\n  square,\n  addOne,\n  multiply\n)(x, y)\n```\n\nIf you are familiar with UNIX style programming, FP looks similar.\n```bash\nls -l | uniq | wc -l\n```\nIf you did the above in a terminal before, you have used functional programming!\nEach of the functions above does one thing without mutating side effects and with the use of the pipe(|) operator we are able to combine our functions to achieve our end goal.\n\n## What functional programming helps achieve\nAll race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. Instead of wiring a solution to these problems, we avoid them altogether ahead of time using functional programming!\n\n## Summary\nWe saw what is the definition of functional programming. Later, we saw the basic characteristics of it, like currying, partial application, immutability, higher order functions and recursion. Afterwards, we looked at a few examples and learned how to leverage FP to our advantage without mutating state. In the end, we saw how pipes in functional programming help us achieve readability and expressiveness.","source":"_posts/Functional-Programming-in-10-minutes.md","raw":"---\ntitle: Functional Programming in 10 minutes\ndate: 2019-06-22 18:13:57\ncategory: Paradigms\ntags: \n  - Programming Paradigms\n  - Functional\n---\nWhen I first saw the ideas of functional programming, I found them very strange due to the fact that, I, like most people, got used to structural and object oriented programming paradigms. The structural takes away the `goto` definitions from our code and replaces them with `if/else/do/while`, which forces the code to execute in an order. The object oriented, encapsulates local variables and methods long after a function returns (what eventually became a constructor) and through the use of function pointers introduced polymorphism. In this post, I will introduce you to functional programming.\n\n## Functional Programming in a Nutshell\nIt is the direct result of Alonso Church, who invented Lambda Calculus in 1936. FP treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.\n\nBefore I jump to the characteristics, I want to point out that the terms `highlighted` will be explained later on. All code examples will be written in Javascript.\n\n## The Characteristics of Functional Programming\n  1. Immutability - Once a variable is created, it cannot be mutated.\n  2. Declerative - Describes **what** the program must accomplish in terms of the problem domain, rather than describe **how** to accomplish it as a sequence of the programming language primitives.\n  3. Higher-order functions and functions as first class citizens - Functions can take other functions as arguments or return them as results. With the help of `closures`, functions allow `currying` and `partial application`.\n  4. Pure functions - functions that have no `side effects`.\n  5. Recursion - For loops inherently mutate state, remember incrementing i ? As FP does not allow mutating state everything is done with recursion. Do not worry about stackoverflow errors, as FP has optimized recursions called `tail call recursions`.\n\nWe saw some characteristics, now, lets see what are closures, currying, partial application, side effects and tail call recursions.\n\n## Closures\nThink of a function's variables as a bag. When the function is returned (removed from the stack and its frame is destroyed), its bag remains. We previously said that functions can return other functions and closures come into play when an outer function is destroyed and the inner function wants to access previously passed arguments (the outer functions bag).\n```javascript\n  function firstName(firstName){\n    return function lastName(lastName){\n      return firstName + lastName\n    }\n  }\n  const firstNameWill = firstName(\"Will\")\n  const lastNameSmith = firstNameWill(\"Smith\")\n  const lastNameIAM = firstNameWill(\".I.AM\")\n  /* prints Will Smith */\n  console.log(lastNameSmith) \n  /* prints Will.I.AM */\n  console.log(lastNameIAM) \n```\nYou see how we stored `\"Will\"` in the \"bag\" of the firstName function. Even after it returned, we still had access to its variables. It allowed us to reuse the name Will and call it with different last names.\n\n## Currying\nIn mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.\n\nLets see an example without currying\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  console.log(entireName(\"Will\"))\n  // prints \"Will undefined undefined\"\n```\nWith function currying, if we pass 1 argument, we will recieve a function back and only when all arguments are passed, our function will execute.\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /*\n    the above in its curried form lookes like this:\n  */\n  function entireName(firstName){\n    return function middleName(middleName){\n      return function lastName(lastName){\n        return firstName + middleName + lastName\n      }\n    }\n  }\n\n  const withNameWill = entireName(\"Will\")\n  const withMiddleNameI = withNameWill(\"I\")\n  const withLastNameAM = withMiddleNameI(\"AM\")\n  /*\n  Note that purely functional languages curry by default, like `Haskell`, others have different libraries for automatic currying of functions\n  for example with ramda.js we could wrap our entireName function in a curry function\n  */\n  const { curry } = require(\"ramda\")\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /* Below function is automatically curried like the example above and it is a lot more readable */\n  const curriedEntireName = curry(entireName)\n```\n\n## Partial Application\nPartial application works similar to currying. The difference between them is that currying splits a function to functions that receive one argument, also called unary, while partial application allows passing multiple arguments. Lets see an example\n```javascript\n  function entireName(firstName, middleName, lastName){\n    return firstName + middleName + lastName\n  }\n  /*\n    Look how we passed \"Will\" and \"I\" together. With currying you have to pass a single argument at a time\n    until all arguments are passed. With partial Application you can pass any number of arguments and it will either execute if all arguments were given, or return a function that expects the original number of arguments minus the ones passed.\n  */\n  const { partial } = require(\"ramda\")\n  const partialWithTwoArgs = partial(entireName, [\"Will\", \"I\"])\n  const fullName = partial(partialWithTwoArgs, [\"AM\"])\n  console.log(fullName)\n  /*\n    prints \"Will I AM\"\n  */\n```\n\n## Side Effects\nIn programming, a side effect is when a procedure changes a variable from outside its scope.\nFor example:\n```javascript\nfunction updateVariable(){\n  dbConnection.set(\"side_effect\", true)\n}\n```\nWe changed some state outside of our function - this is called a side effect.\nFunctional programming is against side effects, but without side effects we would not be able to write software. Instead we try to limit the amount of side effects, allowing only a portion of our code to carefully do them.\n\n## Recursion\nRecursion in computer science is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem (as opposed to iteration). Basically, a function calls itself multiple times until some condition is met.\nFor example, lets see a fibonacci recursion, do not mind the big O notation:\n```javascript\nfunction fibonacci(num) {\n  if (num <= 1) return 1;\n  return fibonacci(num - 1) + fibonacci(num - 2);\n}\n```\nThis function will call itself repeatedly until the condition above is met and until it does that, the function will create multiple frames of itself, possibly leading to stackoverflow.\nTo address the recursion problem, tail-call optimization is used. Tail-call optimization is where you are able to avoid allocating a new stack frame for a function because the calling function will simply return the value that it gets from the called function. Usually, the compiler takes care of tail call optimization in functional languages, I will not elaborate on when tail call optimization does not occur, but if you get into FP in more detail, make sure to read about it.\n\n## Bonus: Pipes\nLets see how we put to practice all the above. In functional languages we usually have a pipe operator that allows an argument to pass through a series of functions. \n```javascript\n/*\n  Math: f(g(h(x, y)))\n*/\n/*\n  Equivalent JS\n*/\nconst operate = (x, y) => square(addOne(multiply(x, y)))\n\n/*\n  Same as above with pipe\n*/\nconst operate = pipe(\n  square,\n  addOne,\n  multiply\n)(x, y)\n```\n\nIf you are familiar with UNIX style programming, FP looks similar.\n```bash\nls -l | uniq | wc -l\n```\nIf you did the above in a terminal before, you have used functional programming!\nEach of the functions above does one thing without mutating side effects and with the use of the pipe(|) operator we are able to combine our functions to achieve our end goal.\n\n## What functional programming helps achieve\nAll race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. Instead of wiring a solution to these problems, we avoid them altogether ahead of time using functional programming!\n\n## Summary\nWe saw what is the definition of functional programming. Later, we saw the basic characteristics of it, like currying, partial application, immutability, higher order functions and recursion. Afterwards, we looked at a few examples and learned how to leverage FP to our advantage without mutating state. In the end, we saw how pipes in functional programming help us achieve readability and expressiveness.","slug":"Functional-Programming-in-10-minutes","published":1,"updated":"2021-01-22T11:07:55.933Z","_id":"ckravj1mw000m78tahrfxgg60","comments":1,"layout":"post","photos":[],"link":"","content":"<p>When I first saw the ideas of functional programming, I found them very strange due to the fact that, I, like most people, got used to structural and object oriented programming paradigms. The structural takes away the <code>goto</code> definitions from our code and replaces them with <code>if/else/do/while</code>, which forces the code to execute in an order. The object oriented, encapsulates local variables and methods long after a function returns (what eventually became a constructor) and through the use of function pointers introduced polymorphism. In this post, I will introduce you to functional programming.</p>\n<h2 id=\"Functional-Programming-in-a-Nutshell\"><a href=\"#Functional-Programming-in-a-Nutshell\" class=\"headerlink\" title=\"Functional Programming in a Nutshell\"></a>Functional Programming in a Nutshell</h2><p>It is the direct result of Alonso Church, who invented Lambda Calculus in 1936. FP treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.</p>\n<p>Before I jump to the characteristics, I want to point out that the terms <code>highlighted</code> will be explained later on. All code examples will be written in Javascript.</p>\n<h2 id=\"The-Characteristics-of-Functional-Programming\"><a href=\"#The-Characteristics-of-Functional-Programming\" class=\"headerlink\" title=\"The Characteristics of Functional Programming\"></a>The Characteristics of Functional Programming</h2><ol>\n<li>Immutability - Once a variable is created, it cannot be mutated.</li>\n<li>Declerative - Describes <strong>what</strong> the program must accomplish in terms of the problem domain, rather than describe <strong>how</strong> to accomplish it as a sequence of the programming language primitives.</li>\n<li>Higher-order functions and functions as first class citizens - Functions can take other functions as arguments or return them as results. With the help of <code>closures</code>, functions allow <code>currying</code> and <code>partial application</code>.</li>\n<li>Pure functions - functions that have no <code>side effects</code>.</li>\n<li>Recursion - For loops inherently mutate state, remember incrementing i ? As FP does not allow mutating state everything is done with recursion. Do not worry about stackoverflow errors, as FP has optimized recursions called <code>tail call recursions</code>.</li>\n</ol>\n<p>We saw some characteristics, now, lets see what are closures, currying, partial application, side effects and tail call recursions.</p>\n<h2 id=\"Closures\"><a href=\"#Closures\" class=\"headerlink\" title=\"Closures\"></a>Closures</h2><p>Think of a function’s variables as a bag. When the function is returned (removed from the stack and its frame is destroyed), its bag remains. We previously said that functions can return other functions and closures come into play when an outer function is destroyed and the inner function wants to access previously passed arguments (the outer functions bag).</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">firstName</span>(<span class=\"hljs-params\">firstName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lastName</span>(<span class=\"hljs-params\">lastName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> firstName + lastName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> firstNameWill = firstName(<span class=\"hljs-string\">&quot;Will&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> lastNameSmith = firstNameWill(<span class=\"hljs-string\">&quot;Smith&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> lastNameIAM = firstNameWill(<span class=\"hljs-string\">&quot;.I.AM&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-comment\">/* prints Will Smith */</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(lastNameSmith) </span><br><span class=\"line\"><span class=\"hljs-comment\">/* prints Will.I.AM */</span></span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(lastNameIAM) </span><br></pre></td></tr></table></figure>\n<p>You see how we stored <code>&quot;Will&quot;</code> in the “bag” of the firstName function. Even after it returned, we still had access to its variables. It allowed us to reuse the name Will and call it with different last names.</p>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p>In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.</p>\n<p>Lets see an example without currying</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">entireName</span>(<span class=\"hljs-params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(entireName(<span class=\"hljs-string\">&quot;Will&quot;</span>))</span><br><span class=\"line\"><span class=\"hljs-comment\">// prints &quot;Will undefined undefined&quot;</span></span><br></pre></td></tr></table></figure>\n<p>With function currying, if we pass 1 argument, we will recieve a function back and only when all arguments are passed, our function will execute.</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">entireName</span>(<span class=\"hljs-params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  the above in its curried form lookes like this:</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">entireName</span>(<span class=\"hljs-params\">firstName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">middleName</span>(<span class=\"hljs-params\">middleName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">lastName</span>(<span class=\"hljs-params\">lastName</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> withNameWill = entireName(<span class=\"hljs-string\">&quot;Will&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> withMiddleNameI = withNameWill(<span class=\"hljs-string\">&quot;I&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> withLastNameAM = withMiddleNameI(<span class=\"hljs-string\">&quot;AM&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">Note that purely functional languages curry by default, like `Haskell`, others have different libraries for automatic currying of functions</span></span><br><span class=\"line\"><span class=\"hljs-comment\">for example with ramda.js we could wrap our entireName function in a curry function</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; curry &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ramda&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">entireName</span>(<span class=\"hljs-params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">/* Below function is automatically curried like the example above and it is a lot more readable */</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> curriedEntireName = curry(entireName)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Partial-Application\"><a href=\"#Partial-Application\" class=\"headerlink\" title=\"Partial Application\"></a>Partial Application</h2><p>Partial application works similar to currying. The difference between them is that currying splits a function to functions that receive one argument, also called unary, while partial application allows passing multiple arguments. Lets see an example</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">entireName</span>(<span class=\"hljs-params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  Look how we passed &quot;Will&quot; and &quot;I&quot; together. With currying you have to pass a single argument at a time</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  until all arguments are passed. With partial Application you can pass any number of arguments and it will either execute if all arguments were given, or return a function that expects the original number of arguments minus the ones passed.</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; partial &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ramda&quot;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> partialWithTwoArgs = partial(entireName, [<span class=\"hljs-string\">&quot;Will&quot;</span>, <span class=\"hljs-string\">&quot;I&quot;</span>])</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> fullName = partial(partialWithTwoArgs, [<span class=\"hljs-string\">&quot;AM&quot;</span>])</span><br><span class=\"line\"><span class=\"hljs-built_in\">console</span>.log(fullName)</span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  prints &quot;Will I AM&quot;</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Side-Effects\"><a href=\"#Side-Effects\" class=\"headerlink\" title=\"Side Effects\"></a>Side Effects</h2><p>In programming, a side effect is when a procedure changes a variable from outside its scope.<br>For example:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">updateVariable</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  dbConnection.set(<span class=\"hljs-string\">&quot;side_effect&quot;</span>, <span class=\"hljs-literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We changed some state outside of our function - this is called a side effect.<br>Functional programming is against side effects, but without side effects we would not be able to write software. Instead we try to limit the amount of side effects, allowing only a portion of our code to carefully do them.</p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Recursion in computer science is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem (as opposed to iteration). Basically, a function calls itself multiple times until some condition is met.<br>For example, lets see a fibonacci recursion, do not mind the big O notation:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fibonacci</span>(<span class=\"hljs-params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (num &lt;= <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> fibonacci(num - <span class=\"hljs-number\">1</span>) + fibonacci(num - <span class=\"hljs-number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function will call itself repeatedly until the condition above is met and until it does that, the function will create multiple frames of itself, possibly leading to stackoverflow.<br>To address the recursion problem, tail-call optimization is used. Tail-call optimization is where you are able to avoid allocating a new stack frame for a function because the calling function will simply return the value that it gets from the called function. Usually, the compiler takes care of tail call optimization in functional languages, I will not elaborate on when tail call optimization does not occur, but if you get into FP in more detail, make sure to read about it.</p>\n<h2 id=\"Bonus-Pipes\"><a href=\"#Bonus-Pipes\" class=\"headerlink\" title=\"Bonus: Pipes\"></a>Bonus: Pipes</h2><p>Lets see how we put to practice all the above. In functional languages we usually have a pipe operator that allows an argument to pass through a series of functions. </p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  Math: f(g(h(x, y)))</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  Equivalent JS</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> operate = <span class=\"hljs-function\">(<span class=\"hljs-params\">x, y</span>) =&gt;</span> square(addOne(multiply(x, y)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">/*</span></span><br><span class=\"line\"><span class=\"hljs-comment\">  Same as above with pipe</span></span><br><span class=\"line\"><span class=\"hljs-comment\">*/</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> operate = pipe(</span><br><span class=\"line\">  square,</span><br><span class=\"line\">  addOne,</span><br><span class=\"line\">  multiply</span><br><span class=\"line\">)(x, y)</span><br></pre></td></tr></table></figure>\n\n<p>If you are familiar with UNIX style programming, FP looks similar.</p>\n<figure class=\"highlight bash hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l | uniq | wc -l</span><br></pre></td></tr></table></figure>\n<p>If you did the above in a terminal before, you have used functional programming!\nEach of the functions above does one thing without mutating side effects and with the use of the pipe(|) operator we are able to combine our functions to achieve our end goal.</p>\n<h2 id=\"What-functional-programming-helps-achieve\"><a href=\"#What-functional-programming-helps-achieve\" class=\"headerlink\" title=\"What functional programming helps achieve\"></a>What functional programming helps achieve</h2><p>All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. Instead of wiring a solution to these problems, we avoid them altogether ahead of time using functional programming!</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw what is the definition of functional programming. Later, we saw the basic characteristics of it, like currying, partial application, immutability, higher order functions and recursion. Afterwards, we looked at a few examples and learned how to leverage FP to our advantage without mutating state. In the end, we saw how pipes in functional programming help us achieve readability and expressiveness.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>When I first saw the ideas of functional programming, I found them very strange due to the fact that, I, like most people, got used to structural and object oriented programming paradigms. The structural takes away the <code>goto</code> definitions from our code and replaces them with <code>if/else/do/while</code>, which forces the code to execute in an order. The object oriented, encapsulates local variables and methods long after a function returns (what eventually became a constructor) and through the use of function pointers introduced polymorphism. In this post, I will introduce you to functional programming.</p>\n<h2 id=\"Functional-Programming-in-a-Nutshell\"><a href=\"#Functional-Programming-in-a-Nutshell\" class=\"headerlink\" title=\"Functional Programming in a Nutshell\"></a>Functional Programming in a Nutshell</h2><p>It is the direct result of Alonso Church, who invented Lambda Calculus in 1936. FP treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data.</p>\n<p>Before I jump to the characteristics, I want to point out that the terms <code>highlighted</code> will be explained later on. All code examples will be written in Javascript.</p>\n<h2 id=\"The-Characteristics-of-Functional-Programming\"><a href=\"#The-Characteristics-of-Functional-Programming\" class=\"headerlink\" title=\"The Characteristics of Functional Programming\"></a>The Characteristics of Functional Programming</h2><ol>\n<li>Immutability - Once a variable is created, it cannot be mutated.</li>\n<li>Declerative - Describes <strong>what</strong> the program must accomplish in terms of the problem domain, rather than describe <strong>how</strong> to accomplish it as a sequence of the programming language primitives.</li>\n<li>Higher-order functions and functions as first class citizens - Functions can take other functions as arguments or return them as results. With the help of <code>closures</code>, functions allow <code>currying</code> and <code>partial application</code>.</li>\n<li>Pure functions - functions that have no <code>side effects</code>.</li>\n<li>Recursion - For loops inherently mutate state, remember incrementing i ? As FP does not allow mutating state everything is done with recursion. Do not worry about stackoverflow errors, as FP has optimized recursions called <code>tail call recursions</code>.</li>\n</ol>\n<p>We saw some characteristics, now, lets see what are closures, currying, partial application, side effects and tail call recursions.</p>\n<h2 id=\"Closures\"><a href=\"#Closures\" class=\"headerlink\" title=\"Closures\"></a>Closures</h2><p>Think of a function’s variables as a bag. When the function is returned (removed from the stack and its frame is destroyed), its bag remains. We previously said that functions can return other functions and closures come into play when an outer function is destroyed and the inner function wants to access previously passed arguments (the outer functions bag).</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">firstName</span>(<span class=\"params\">firstName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lastName</span>(<span class=\"params\">lastName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstName + lastName</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> firstNameWill = firstName(<span class=\"string\">&quot;Will&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> lastNameSmith = firstNameWill(<span class=\"string\">&quot;Smith&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> lastNameIAM = firstNameWill(<span class=\"string\">&quot;.I.AM&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">/* prints Will Smith */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastNameSmith) </span><br><span class=\"line\"><span class=\"comment\">/* prints Will.I.AM */</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lastNameIAM) </span><br></pre></td></tr></table></figure>\n<p>You see how we stored <code>&quot;Will&quot;</code> in the “bag” of the firstName function. Even after it returned, we still had access to its variables. It allowed us to reuse the name Will and call it with different last names.</p>\n<h2 id=\"Currying\"><a href=\"#Currying\" class=\"headerlink\" title=\"Currying\"></a>Currying</h2><p>In mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument.</p>\n<p>Lets see an example without currying</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entireName</span>(<span class=\"params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(entireName(<span class=\"string\">&quot;Will&quot;</span>))</span><br><span class=\"line\"><span class=\"comment\">// prints &quot;Will undefined undefined&quot;</span></span><br></pre></td></tr></table></figure>\n<p>With function currying, if we pass 1 argument, we will recieve a function back and only when all arguments are passed, our function will execute.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entireName</span>(<span class=\"params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  the above in its curried form lookes like this:</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entireName</span>(<span class=\"params\">firstName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">middleName</span>(<span class=\"params\">middleName</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">lastName</span>(<span class=\"params\">lastName</span>)</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> withNameWill = entireName(<span class=\"string\">&quot;Will&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> withMiddleNameI = withNameWill(<span class=\"string\">&quot;I&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> withLastNameAM = withMiddleNameI(<span class=\"string\">&quot;AM&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Note that purely functional languages curry by default, like `Haskell`, others have different libraries for automatic currying of functions</span></span><br><span class=\"line\"><span class=\"comment\">for example with ramda.js we could wrap our entireName function in a curry function</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; curry &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ramda&quot;</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entireName</span>(<span class=\"params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* Below function is automatically curried like the example above and it is a lot more readable */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> curriedEntireName = curry(entireName)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Partial-Application\"><a href=\"#Partial-Application\" class=\"headerlink\" title=\"Partial Application\"></a>Partial Application</h2><p>Partial application works similar to currying. The difference between them is that currying splits a function to functions that receive one argument, also called unary, while partial application allows passing multiple arguments. Lets see an example</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">entireName</span>(<span class=\"params\">firstName, middleName, lastName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> firstName + middleName + lastName</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Look how we passed &quot;Will&quot; and &quot;I&quot; together. With currying you have to pass a single argument at a time</span></span><br><span class=\"line\"><span class=\"comment\">  until all arguments are passed. With partial Application you can pass any number of arguments and it will either execute if all arguments were given, or return a function that expects the original number of arguments minus the ones passed.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; partial &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ramda&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> partialWithTwoArgs = partial(entireName, [<span class=\"string\">&quot;Will&quot;</span>, <span class=\"string\">&quot;I&quot;</span>])</span><br><span class=\"line\"><span class=\"keyword\">const</span> fullName = partial(partialWithTwoArgs, [<span class=\"string\">&quot;AM&quot;</span>])</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fullName)</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  prints &quot;Will I AM&quot;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Side-Effects\"><a href=\"#Side-Effects\" class=\"headerlink\" title=\"Side Effects\"></a>Side Effects</h2><p>In programming, a side effect is when a procedure changes a variable from outside its scope.<br>For example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateVariable</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  dbConnection.set(<span class=\"string\">&quot;side_effect&quot;</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>We changed some state outside of our function - this is called a side effect.<br>Functional programming is against side effects, but without side effects we would not be able to write software. Instead we try to limit the amount of side effects, allowing only a portion of our code to carefully do them.</p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>Recursion in computer science is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem (as opposed to iteration). Basically, a function calls itself multiple times until some condition is met.<br>For example, lets see a fibonacci recursion, do not mind the big O notation:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">num</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num &lt;= <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fibonacci(num - <span class=\"number\">1</span>) + fibonacci(num - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This function will call itself repeatedly until the condition above is met and until it does that, the function will create multiple frames of itself, possibly leading to stackoverflow.<br>To address the recursion problem, tail-call optimization is used. Tail-call optimization is where you are able to avoid allocating a new stack frame for a function because the calling function will simply return the value that it gets from the called function. Usually, the compiler takes care of tail call optimization in functional languages, I will not elaborate on when tail call optimization does not occur, but if you get into FP in more detail, make sure to read about it.</p>\n<h2 id=\"Bonus-Pipes\"><a href=\"#Bonus-Pipes\" class=\"headerlink\" title=\"Bonus: Pipes\"></a>Bonus: Pipes</h2><p>Lets see how we put to practice all the above. In functional languages we usually have a pipe operator that allows an argument to pass through a series of functions. </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Math: f(g(h(x, y)))</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Equivalent JS</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> operate = <span class=\"function\">(<span class=\"params\">x, y</span>) =&gt;</span> square(addOne(multiply(x, y)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  Same as above with pipe</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> operate = pipe(</span><br><span class=\"line\">  square,</span><br><span class=\"line\">  addOne,</span><br><span class=\"line\">  multiply</span><br><span class=\"line\">)(x, y)</span><br></pre></td></tr></table></figure>\n\n<p>If you are familiar with UNIX style programming, FP looks similar.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls -l | uniq | wc -l</span><br></pre></td></tr></table></figure>\n<p>If you did the above in a terminal before, you have used functional programming!\nEach of the functions above does one thing without mutating side effects and with the use of the pipe(|) operator we are able to combine our functions to achieve our end goal.</p>\n<h2 id=\"What-functional-programming-helps-achieve\"><a href=\"#What-functional-programming-helps-achieve\" class=\"headerlink\" title=\"What functional programming helps achieve\"></a>What functional programming helps achieve</h2><p>All race conditions, deadlock conditions, and concurrent update problems are due to mutable variables. Instead of wiring a solution to these problems, we avoid them altogether ahead of time using functional programming!</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw what is the definition of functional programming. Later, we saw the basic characteristics of it, like currying, partial application, immutability, higher order functions and recursion. Afterwards, we looked at a few examples and learned how to leverage FP to our advantage without mutating state. In the end, we saw how pipes in functional programming help us achieve readability and expressiveness.</p>\n"},{"title":"Context Maps in Domain Driven Design","date":"2019-07-10T12:52:33.000Z","thumbnail":"images/connections.jpg","_content":"Ideally, it would be great to have a single place that incorporates all of our models, but in reality, our systems fragment to multiple models and we need to understand how to approach building them in way that allows future changes quickly.\nStrategic Domain Driven Design is a high level approach to distributed software architecture and is an essential part of DDD. One of its features is context maps, which allows grasping the different relationships between bounded contexts (a boundary within which the ubiquitous language is consistent) and gives the teams a better understanding on how they affect each other. In this short post I will introduce you to the basics of context maps.\n\n## How to approach Strategic DDD\nWhen working on a project, we can have teams that are large by count or located abroad, we can also have external systems and legacy systems to communicate with. The idea is to have some sort of wiki that teams can refer to, that is neither overly complex nor missing information. Understanding the relationships early on can help diagnose problems, as wrong relationships between components can quickly turn into a *big ball of mud*.\n\n## Types of context maps\nStarting from the top, each context map type has greater level of communication between teams at the expense of control over the domain:\n  - Shared Kernel - This is a shared domain model between two teams. Each team has an agreed upon subset of the domain along with its model.\n  - Partnership - The teams have a mutual dependency on each other for delivery.\n  - Customer-Supplier - The teams define interfaces to adhere and one team acts as a downstream (customer) to another team, which is the upstream (supplier). The upstream team can make changes without fear of breaking something downstream. The domains can evolve independently as long as the upstream context fulfills its interfaces.\n  - Open Host Service - A bounded context that offers a defined set of functionalities exposed to other systems. Any downstream system can implement their own integration.\n  - Published Language - Similar to Open Host Service, however it models a domain as a common language between bounded contexts\n  - Conformist - The downstream team conforms to the model of the upstream and there is no translation of models between them. If the upstream is a mess and the dev team behind it does not want / cant change it, the mess is propagated downstream.\n  - Anticorruption Layer (ACL) - A layer that isolates/abstracts the downstream's models from another system's models by translation.\n  - Separate Ways - There is no connection between the bounded contexts. The teams can find their own solutions in ther domains.\n\n## Example\n![](./sddd.jpg)\nOnce we identify what are our domains and boundaries we can start drawing context maps between them. In this example we can see the U for upstream and D for downstream. The online banking services acts as a supporting or a generic subdomain to our core PFM Banking domain. We use ACL when we receive a response and model it appropriately internally. We have a partnership relationship with the Expense Tracking Domain, which means we need to deliver together as we may have a mutual dependency. Last, we have a conformist relationship with the Web User Profiling. Maybe, the team cant change or wont change their implementation of a model, so we need to do it on our side, on the core domain.\n\n\n## Summary\nWe saw why do we need Strategic Domain Driven Design and how we can leverage a part of it called context maps to help us build better systems. We saw what kinds of context maps exist, what each one does and at last, we saw a small example with a few context maps.","source":"_posts/Context-Maps-In-Domain-Driven-Design.md","raw":"---\ntitle: Context Maps in Domain Driven Design\ndate: 2019-07-10 15:52:33\ncategory: Architecture\ntags: \n  - DDD\n  - Software Architecture\n  - Context Maps\nthumbnail: images/connections.jpg\n---\nIdeally, it would be great to have a single place that incorporates all of our models, but in reality, our systems fragment to multiple models and we need to understand how to approach building them in way that allows future changes quickly.\nStrategic Domain Driven Design is a high level approach to distributed software architecture and is an essential part of DDD. One of its features is context maps, which allows grasping the different relationships between bounded contexts (a boundary within which the ubiquitous language is consistent) and gives the teams a better understanding on how they affect each other. In this short post I will introduce you to the basics of context maps.\n\n## How to approach Strategic DDD\nWhen working on a project, we can have teams that are large by count or located abroad, we can also have external systems and legacy systems to communicate with. The idea is to have some sort of wiki that teams can refer to, that is neither overly complex nor missing information. Understanding the relationships early on can help diagnose problems, as wrong relationships between components can quickly turn into a *big ball of mud*.\n\n## Types of context maps\nStarting from the top, each context map type has greater level of communication between teams at the expense of control over the domain:\n  - Shared Kernel - This is a shared domain model between two teams. Each team has an agreed upon subset of the domain along with its model.\n  - Partnership - The teams have a mutual dependency on each other for delivery.\n  - Customer-Supplier - The teams define interfaces to adhere and one team acts as a downstream (customer) to another team, which is the upstream (supplier). The upstream team can make changes without fear of breaking something downstream. The domains can evolve independently as long as the upstream context fulfills its interfaces.\n  - Open Host Service - A bounded context that offers a defined set of functionalities exposed to other systems. Any downstream system can implement their own integration.\n  - Published Language - Similar to Open Host Service, however it models a domain as a common language between bounded contexts\n  - Conformist - The downstream team conforms to the model of the upstream and there is no translation of models between them. If the upstream is a mess and the dev team behind it does not want / cant change it, the mess is propagated downstream.\n  - Anticorruption Layer (ACL) - A layer that isolates/abstracts the downstream's models from another system's models by translation.\n  - Separate Ways - There is no connection between the bounded contexts. The teams can find their own solutions in ther domains.\n\n## Example\n![](./sddd.jpg)\nOnce we identify what are our domains and boundaries we can start drawing context maps between them. In this example we can see the U for upstream and D for downstream. The online banking services acts as a supporting or a generic subdomain to our core PFM Banking domain. We use ACL when we receive a response and model it appropriately internally. We have a partnership relationship with the Expense Tracking Domain, which means we need to deliver together as we may have a mutual dependency. Last, we have a conformist relationship with the Web User Profiling. Maybe, the team cant change or wont change their implementation of a model, so we need to do it on our side, on the core domain.\n\n\n## Summary\nWe saw why do we need Strategic Domain Driven Design and how we can leverage a part of it called context maps to help us build better systems. We saw what kinds of context maps exist, what each one does and at last, we saw a small example with a few context maps.","slug":"Context-Maps-In-Domain-Driven-Design","published":1,"updated":"2021-01-22T11:07:55.933Z","_id":"ckravj1mx000p78ta2b84fn12","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Ideally, it would be great to have a single place that incorporates all of our models, but in reality, our systems fragment to multiple models and we need to understand how to approach building them in way that allows future changes quickly.<br>Strategic Domain Driven Design is a high level approach to distributed software architecture and is an essential part of DDD. One of its features is context maps, which allows grasping the different relationships between bounded contexts (a boundary within which the ubiquitous language is consistent) and gives the teams a better understanding on how they affect each other. In this short post I will introduce you to the basics of context maps.</p>\n<h2 id=\"How-to-approach-Strategic-DDD\"><a href=\"#How-to-approach-Strategic-DDD\" class=\"headerlink\" title=\"How to approach Strategic DDD\"></a>How to approach Strategic DDD</h2><p>When working on a project, we can have teams that are large by count or located abroad, we can also have external systems and legacy systems to communicate with. The idea is to have some sort of wiki that teams can refer to, that is neither overly complex nor missing information. Understanding the relationships early on can help diagnose problems, as wrong relationships between components can quickly turn into a <em>big ball of mud</em>.</p>\n<h2 id=\"Types-of-context-maps\"><a href=\"#Types-of-context-maps\" class=\"headerlink\" title=\"Types of context maps\"></a>Types of context maps</h2><p>Starting from the top, each context map type has greater level of communication between teams at the expense of control over the domain:</p>\n<ul>\n<li>Shared Kernel - This is a shared domain model between two teams. Each team has an agreed upon subset of the domain along with its model.</li>\n<li>Partnership - The teams have a mutual dependency on each other for delivery.</li>\n<li>Customer-Supplier - The teams define interfaces to adhere and one team acts as a downstream (customer) to another team, which is the upstream (supplier). The upstream team can make changes without fear of breaking something downstream. The domains can evolve independently as long as the upstream context fulfills its interfaces.</li>\n<li>Open Host Service - A bounded context that offers a defined set of functionalities exposed to other systems. Any downstream system can implement their own integration.</li>\n<li>Published Language - Similar to Open Host Service, however it models a domain as a common language between bounded contexts</li>\n<li>Conformist - The downstream team conforms to the model of the upstream and there is no translation of models between them. If the upstream is a mess and the dev team behind it does not want / cant change it, the mess is propagated downstream.</li>\n<li>Anticorruption Layer (ACL) - A layer that isolates/abstracts the downstream’s models from another system’s models by translation.</li>\n<li>Separate Ways - There is no connection between the bounded contexts. The teams can find their own solutions in ther domains.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><img src=\"/2019/07/10/Context-Maps-In-Domain-Driven-Design/sddd.jpg\" alt><br>Once we identify what are our domains and boundaries we can start drawing context maps between them. In this example we can see the U for upstream and D for downstream. The online banking services acts as a supporting or a generic subdomain to our core PFM Banking domain. We use ACL when we receive a response and model it appropriately internally. We have a partnership relationship with the Expense Tracking Domain, which means we need to deliver together as we may have a mutual dependency. Last, we have a conformist relationship with the Web User Profiling. Maybe, the team cant change or wont change their implementation of a model, so we need to do it on our side, on the core domain.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw why do we need Strategic Domain Driven Design and how we can leverage a part of it called context maps to help us build better systems. We saw what kinds of context maps exist, what each one does and at last, we saw a small example with a few context maps.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Ideally, it would be great to have a single place that incorporates all of our models, but in reality, our systems fragment to multiple models and we need to understand how to approach building them in way that allows future changes quickly.<br>Strategic Domain Driven Design is a high level approach to distributed software architecture and is an essential part of DDD. One of its features is context maps, which allows grasping the different relationships between bounded contexts (a boundary within which the ubiquitous language is consistent) and gives the teams a better understanding on how they affect each other. In this short post I will introduce you to the basics of context maps.</p>\n<h2 id=\"How-to-approach-Strategic-DDD\"><a href=\"#How-to-approach-Strategic-DDD\" class=\"headerlink\" title=\"How to approach Strategic DDD\"></a>How to approach Strategic DDD</h2><p>When working on a project, we can have teams that are large by count or located abroad, we can also have external systems and legacy systems to communicate with. The idea is to have some sort of wiki that teams can refer to, that is neither overly complex nor missing information. Understanding the relationships early on can help diagnose problems, as wrong relationships between components can quickly turn into a <em>big ball of mud</em>.</p>\n<h2 id=\"Types-of-context-maps\"><a href=\"#Types-of-context-maps\" class=\"headerlink\" title=\"Types of context maps\"></a>Types of context maps</h2><p>Starting from the top, each context map type has greater level of communication between teams at the expense of control over the domain:</p>\n<ul>\n<li>Shared Kernel - This is a shared domain model between two teams. Each team has an agreed upon subset of the domain along with its model.</li>\n<li>Partnership - The teams have a mutual dependency on each other for delivery.</li>\n<li>Customer-Supplier - The teams define interfaces to adhere and one team acts as a downstream (customer) to another team, which is the upstream (supplier). The upstream team can make changes without fear of breaking something downstream. The domains can evolve independently as long as the upstream context fulfills its interfaces.</li>\n<li>Open Host Service - A bounded context that offers a defined set of functionalities exposed to other systems. Any downstream system can implement their own integration.</li>\n<li>Published Language - Similar to Open Host Service, however it models a domain as a common language between bounded contexts</li>\n<li>Conformist - The downstream team conforms to the model of the upstream and there is no translation of models between them. If the upstream is a mess and the dev team behind it does not want / cant change it, the mess is propagated downstream.</li>\n<li>Anticorruption Layer (ACL) - A layer that isolates/abstracts the downstream’s models from another system’s models by translation.</li>\n<li>Separate Ways - There is no connection between the bounded contexts. The teams can find their own solutions in ther domains.</li>\n</ul>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2><p><img src=\"/2019/07/10/Context-Maps-In-Domain-Driven-Design/sddd.jpg\" alt><br>Once we identify what are our domains and boundaries we can start drawing context maps between them. In this example we can see the U for upstream and D for downstream. The online banking services acts as a supporting or a generic subdomain to our core PFM Banking domain. We use ACL when we receive a response and model it appropriately internally. We have a partnership relationship with the Expense Tracking Domain, which means we need to deliver together as we may have a mutual dependency. Last, we have a conformist relationship with the Web User Profiling. Maybe, the team cant change or wont change their implementation of a model, so we need to do it on our side, on the core domain.</p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We saw why do we need Strategic Domain Driven Design and how we can leverage a part of it called context maps to help us build better systems. We saw what kinds of context maps exist, what each one does and at last, we saw a small example with a few context maps.</p>\n"},{"title":"Collecting Docker Logs With Loki","thumbnail":"images/loki.jpg","date":"2020-03-21T14:10:20.000Z","_content":"\nLoki is a multi-tenant log aggregation system inspired by Prometheus. \nIt is cost effective, easy to operate and allows viewing logs directly in Grafana.\nIn this blog post, I will show how to setup a Loki container using docker compose, how to define the Loki logging driver to automatically ship all container logs and finally, how to view the logs in Grafana.\n\n### Disclaimer\nI have been using Loki in a development setup with 24 services for three months now and had zero problems with it.\nIt really makes the developers life easier, especially after chasing log files in 20 different terminals.\nFrom what I have read, Loki was battle tested by Grafana, so I am sure it is capable of running in production just fine.\n\n### Setup Loki Container\nFirst of all, we will need to define a Loki container in the `docker-compose.yml`.\nThe command part tells Loki to read the config from the `local-config.yaml` which is added as a volume.\n\n```yaml\n  services:\n    loki:\n      container_name: loki\n      image: grafana/loki:latest\n      ports:\n        - \"3100:3100\"\n      command: -config.file=/etc/loki/local-config.yaml\n      volumes:\n        - ./volumes/loki/etc:/etc/loki\n```\n\nThe `local-config.yaml` is a default from the [Loki Github page](https://github.com/grafana/loki/blob/master/docs/configuration/README.md).\n\nHere is an example config.\n```yaml\nauth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  log_level: error\n\ningester:\n  lifecycler:\n    address: 127.0.0.1\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\n    final_sleep: 0s\n  chunk_idle_period: 5m\n  chunk_retain_period: 30s\n\nschema_config:\n  configs:\n    - from: 2018-04-15\n      store: boltdb\n      object_store: filesystem\n      schema: v9\n      index:\n        prefix: index_\n        period: 168h\n\nstorage_config:\n  boltdb:\n    directory: /tmp/loki/index\n\n  filesystem:\n    directory: /tmp/loki/chunks\n\nlimits_config:\n  enforce_metric_name: false\n  reject_old_samples: true\n  reject_old_samples_max_age: 168h\n\nchunk_store_config:\n  max_look_back_period: 0\n\ntable_manager:\n  chunk_tables_provisioning:\n    inactive_read_throughput: 0\n    inactive_write_throughput: 0\n    provisioned_read_throughput: 0\n    provisioned_write_throughput: 0\n  index_tables_provisioning:\n    inactive_read_throughput: 0\n    inactive_write_throughput: 0\n    provisioned_read_throughput: 0\n    provisioned_write_throughput: 0\n  retention_deletes_enabled: false\n  retention_period: 0\n```\n\n### Adding Loki as a Logging Driver\nTo ship logs to Loki automatically for every container we add to our setup, we need to add the loki logging driver.\nThe easiest way to add the loki logging driver is with a docker plugin. \n```shell script\n  docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions\n```\nDon't forget to restart the docker daemon after installing the plugin.\n\nIf you are on Mac:\n```shell script\n\tkillall Docker && open /Applications/Docker.app\n```\nIf you are on Linux:\n```shell script\n  sudo systemctl restart docker\n```\n\nAfter installing the plugin, verify it is enabled.\n```shell script\n    docker plugin ls\n```\nShould output\n```log\n    ID                  NAME                DESCRIPTION           ENABLED\n    412df8a79e8e        loki:latest         Loki Logging Driver   true\n```\n\n### Using Loki as a Logging Driver\nThere are two ways, I will cover, to change the logging driver, either directly in the docker compose file or in the daemon.json file of the docker daemon.\n#### Docker-compose.yaml\nThe default driver is json-file, but we can easily change it to loki, thanks to the docker plugin we installed earlier.\nThe loki-url option tells where to ship the logs, which in this case is to our local loki instance.\nFor a complete options list check the [loki logging driver options](https://github.com/grafana/loki/tree/master/cmd/docker-driver#log-opt-options)\n```yaml\n  logging:\n    driver: loki\n    options:\n      loki-url: \"http://host.docker.internal:3100/loki/api/v1/push\"\n```\nAn easier way to reuse the logging section since docker-compose version 3.4, is the `x-` extension fields and yaml anchors and aliases.\nThe `x-` extension field tells docker compose to ignore the section that follows it.\nAnchors are identified by an `&` character, and aliases by an `*` character.\nDefine an extension field at the top of your `docker-compose.yml` with an anchor after it and reuse it using the alias on all services.\n\n```yaml\n# logger driver - change this driver to ship all container logs to a different location\nx-logging: &logging\n  logging:\n    driver: loki\n    options:\n      loki-url: \"http://host.docker.internal:3100/loki/api/v1/push\"\nservices:\n  my_service:\n    *logging\n    container_name: xxx\n    image: xxx/xxx\n  another_cool_service:\n    *logging\n    container_name: xxxx\n    image: xxxx/xxxx\n```\n\n#### Daemon.json\nWe can also change the default logging driver for all containers in a file called `daemon.json`.\nIf you are on Mac its located at `~/.docker/daemon.json`\nIf you are on linux its located at `/etc/docker/daemon.json`\n\nExample of daemon.json.\nDon't forget to restart the docker daemon afterwards.\n```json\n{\n    \"debug\" : true,\n    \"log-driver\": \"loki\",\n    \"log-opts\": {\n        \"loki-url\": \"http://host.docker.internal:3100/loki/api/v1/push\"\n    }\n}\n```\n\nI prefer adding the logging driver in the `docker-compose.yaml` directly, because I have more control over the logging driver on a single service level, whereas, with daemon.json, you change the logging driver for all containers.\n\n### Running Docker with Loki\nAfter you run `docker-compose up` all container logs will be sent to Loki.\nOne thing to note is, there is an error after running the containers, which says\n```log\nWARNING: no logs are available with the 'loki' log driver\n```\nNevertheless, all container logs are successfully sent to Grafana every time.\nBecause I use Loki in a development setup, I ignore this message, but if you want to run this in production, I would ensure that it is minor.\nAfter all containers are up, you can still do `docker logs` command and it will work, so I am guessing the error above has something to do with container startup time.\n\n### Adding Loki to Grafana\nLogin to your Grafana instance and add a new data source of type Loki. Make sure the Grafana can reach the Loki instance.\n![](./adding-loki.png)\n\n### Using Loki in Grafana\nAfter adding Loki as a data source, go to explore and you should see all containers appear with automatic labels set by the Loki logging driver.\n![](./grafana-loki.png)\n\nYou can also filter by words using the logql syntax, for example: `|=` includes syntax or `!=` excludes syntax. You can find out more about Loki logql syntax [here](https://github.com/grafana/loki/blob/master/docs/logql.md).\n\n### Closing Notes\nWe saw how to define a Loki docker container, afterwards we added Loki logging driver as a docker plugin, and finally, we shipped all of our logs to Grafana with a simple configuration.\n","source":"_posts/Collecting-Docker-Logs-With-Loki.md","raw":"---\ntitle: Collecting Docker Logs With Loki\ntags:\n  - Docker\n  - Logging\n  - Loki\n  - Development\n  - Containers\n  - Tutorial\nthumbnail: images/loki.jpg\ncategory: DevOps\ndate: 2020-03-21 16:10:20\n---\n\nLoki is a multi-tenant log aggregation system inspired by Prometheus. \nIt is cost effective, easy to operate and allows viewing logs directly in Grafana.\nIn this blog post, I will show how to setup a Loki container using docker compose, how to define the Loki logging driver to automatically ship all container logs and finally, how to view the logs in Grafana.\n\n### Disclaimer\nI have been using Loki in a development setup with 24 services for three months now and had zero problems with it.\nIt really makes the developers life easier, especially after chasing log files in 20 different terminals.\nFrom what I have read, Loki was battle tested by Grafana, so I am sure it is capable of running in production just fine.\n\n### Setup Loki Container\nFirst of all, we will need to define a Loki container in the `docker-compose.yml`.\nThe command part tells Loki to read the config from the `local-config.yaml` which is added as a volume.\n\n```yaml\n  services:\n    loki:\n      container_name: loki\n      image: grafana/loki:latest\n      ports:\n        - \"3100:3100\"\n      command: -config.file=/etc/loki/local-config.yaml\n      volumes:\n        - ./volumes/loki/etc:/etc/loki\n```\n\nThe `local-config.yaml` is a default from the [Loki Github page](https://github.com/grafana/loki/blob/master/docs/configuration/README.md).\n\nHere is an example config.\n```yaml\nauth_enabled: false\n\nserver:\n  http_listen_port: 3100\n  log_level: error\n\ningester:\n  lifecycler:\n    address: 127.0.0.1\n    ring:\n      kvstore:\n        store: inmemory\n      replication_factor: 1\n    final_sleep: 0s\n  chunk_idle_period: 5m\n  chunk_retain_period: 30s\n\nschema_config:\n  configs:\n    - from: 2018-04-15\n      store: boltdb\n      object_store: filesystem\n      schema: v9\n      index:\n        prefix: index_\n        period: 168h\n\nstorage_config:\n  boltdb:\n    directory: /tmp/loki/index\n\n  filesystem:\n    directory: /tmp/loki/chunks\n\nlimits_config:\n  enforce_metric_name: false\n  reject_old_samples: true\n  reject_old_samples_max_age: 168h\n\nchunk_store_config:\n  max_look_back_period: 0\n\ntable_manager:\n  chunk_tables_provisioning:\n    inactive_read_throughput: 0\n    inactive_write_throughput: 0\n    provisioned_read_throughput: 0\n    provisioned_write_throughput: 0\n  index_tables_provisioning:\n    inactive_read_throughput: 0\n    inactive_write_throughput: 0\n    provisioned_read_throughput: 0\n    provisioned_write_throughput: 0\n  retention_deletes_enabled: false\n  retention_period: 0\n```\n\n### Adding Loki as a Logging Driver\nTo ship logs to Loki automatically for every container we add to our setup, we need to add the loki logging driver.\nThe easiest way to add the loki logging driver is with a docker plugin. \n```shell script\n  docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions\n```\nDon't forget to restart the docker daemon after installing the plugin.\n\nIf you are on Mac:\n```shell script\n\tkillall Docker && open /Applications/Docker.app\n```\nIf you are on Linux:\n```shell script\n  sudo systemctl restart docker\n```\n\nAfter installing the plugin, verify it is enabled.\n```shell script\n    docker plugin ls\n```\nShould output\n```log\n    ID                  NAME                DESCRIPTION           ENABLED\n    412df8a79e8e        loki:latest         Loki Logging Driver   true\n```\n\n### Using Loki as a Logging Driver\nThere are two ways, I will cover, to change the logging driver, either directly in the docker compose file or in the daemon.json file of the docker daemon.\n#### Docker-compose.yaml\nThe default driver is json-file, but we can easily change it to loki, thanks to the docker plugin we installed earlier.\nThe loki-url option tells where to ship the logs, which in this case is to our local loki instance.\nFor a complete options list check the [loki logging driver options](https://github.com/grafana/loki/tree/master/cmd/docker-driver#log-opt-options)\n```yaml\n  logging:\n    driver: loki\n    options:\n      loki-url: \"http://host.docker.internal:3100/loki/api/v1/push\"\n```\nAn easier way to reuse the logging section since docker-compose version 3.4, is the `x-` extension fields and yaml anchors and aliases.\nThe `x-` extension field tells docker compose to ignore the section that follows it.\nAnchors are identified by an `&` character, and aliases by an `*` character.\nDefine an extension field at the top of your `docker-compose.yml` with an anchor after it and reuse it using the alias on all services.\n\n```yaml\n# logger driver - change this driver to ship all container logs to a different location\nx-logging: &logging\n  logging:\n    driver: loki\n    options:\n      loki-url: \"http://host.docker.internal:3100/loki/api/v1/push\"\nservices:\n  my_service:\n    *logging\n    container_name: xxx\n    image: xxx/xxx\n  another_cool_service:\n    *logging\n    container_name: xxxx\n    image: xxxx/xxxx\n```\n\n#### Daemon.json\nWe can also change the default logging driver for all containers in a file called `daemon.json`.\nIf you are on Mac its located at `~/.docker/daemon.json`\nIf you are on linux its located at `/etc/docker/daemon.json`\n\nExample of daemon.json.\nDon't forget to restart the docker daemon afterwards.\n```json\n{\n    \"debug\" : true,\n    \"log-driver\": \"loki\",\n    \"log-opts\": {\n        \"loki-url\": \"http://host.docker.internal:3100/loki/api/v1/push\"\n    }\n}\n```\n\nI prefer adding the logging driver in the `docker-compose.yaml` directly, because I have more control over the logging driver on a single service level, whereas, with daemon.json, you change the logging driver for all containers.\n\n### Running Docker with Loki\nAfter you run `docker-compose up` all container logs will be sent to Loki.\nOne thing to note is, there is an error after running the containers, which says\n```log\nWARNING: no logs are available with the 'loki' log driver\n```\nNevertheless, all container logs are successfully sent to Grafana every time.\nBecause I use Loki in a development setup, I ignore this message, but if you want to run this in production, I would ensure that it is minor.\nAfter all containers are up, you can still do `docker logs` command and it will work, so I am guessing the error above has something to do with container startup time.\n\n### Adding Loki to Grafana\nLogin to your Grafana instance and add a new data source of type Loki. Make sure the Grafana can reach the Loki instance.\n![](./adding-loki.png)\n\n### Using Loki in Grafana\nAfter adding Loki as a data source, go to explore and you should see all containers appear with automatic labels set by the Loki logging driver.\n![](./grafana-loki.png)\n\nYou can also filter by words using the logql syntax, for example: `|=` includes syntax or `!=` excludes syntax. You can find out more about Loki logql syntax [here](https://github.com/grafana/loki/blob/master/docs/logql.md).\n\n### Closing Notes\nWe saw how to define a Loki docker container, afterwards we added Loki logging driver as a docker plugin, and finally, we shipped all of our logs to Grafana with a simple configuration.\n","slug":"Collecting-Docker-Logs-With-Loki","published":1,"updated":"2021-01-22T11:07:55.924Z","_id":"ckravj1my000q78taevyi00zi","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Loki is a multi-tenant log aggregation system inspired by Prometheus.<br>It is cost effective, easy to operate and allows viewing logs directly in Grafana.<br>In this blog post, I will show how to setup a Loki container using docker compose, how to define the Loki logging driver to automatically ship all container logs and finally, how to view the logs in Grafana.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>I have been using Loki in a development setup with 24 services for three months now and had zero problems with it.<br>It really makes the developers life easier, especially after chasing log files in 20 different terminals.<br>From what I have read, Loki was battle tested by Grafana, so I am sure it is capable of running in production just fine.</p>\n<h3 id=\"Setup-Loki-Container\"><a href=\"#Setup-Loki-Container\" class=\"headerlink\" title=\"Setup Loki Container\"></a>Setup Loki Container</h3><p>First of all, we will need to define a Loki container in the <code>docker-compose.yml</code>.\nThe command part tells Loki to read the config from the <code>local-config.yaml</code> which is added as a volume.</p>\n<figure class=\"highlight yaml hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">services:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">loki:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">loki</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">grafana/loki:latest</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">ports:</span></span><br><span class=\"line\">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;3100:3100&quot;</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">command:</span> <span class=\"hljs-string\">-config.file=/etc/loki/local-config.yaml</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">./volumes/loki/etc:/etc/loki</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>local-config.yaml</code> is a default from the <a href=\"https://github.com/grafana/loki/blob/master/docs/configuration/README.md\">Loki Github page</a>.</p>\n<p>Here is an example config.</p>\n<figure class=\"highlight yaml hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">auth_enabled:</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">server:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">http_listen_port:</span> <span class=\"hljs-number\">3100</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">log_level:</span> <span class=\"hljs-string\">error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">ingester:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">lifecycler:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">address:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">ring:</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">kvstore:</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">store:</span> <span class=\"hljs-string\">inmemory</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">replication_factor:</span> <span class=\"hljs-number\">1</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">final_sleep:</span> <span class=\"hljs-string\">0s</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">chunk_idle_period:</span> <span class=\"hljs-string\">5m</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">chunk_retain_period:</span> <span class=\"hljs-string\">30s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">schema_config:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">configs:</span></span><br><span class=\"line\">    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">from:</span> <span class=\"hljs-number\">2018-04-15</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">store:</span> <span class=\"hljs-string\">boltdb</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">object_store:</span> <span class=\"hljs-string\">filesystem</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">schema:</span> <span class=\"hljs-string\">v9</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">index:</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">prefix:</span> <span class=\"hljs-string\">index_</span></span><br><span class=\"line\">        <span class=\"hljs-attr\">period:</span> <span class=\"hljs-string\">168h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">storage_config:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">boltdb:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">directory:</span> <span class=\"hljs-string\">/tmp/loki/index</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-attr\">filesystem:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">directory:</span> <span class=\"hljs-string\">/tmp/loki/chunks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">limits_config:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">enforce_metric_name:</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">reject_old_samples:</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">reject_old_samples_max_age:</span> <span class=\"hljs-string\">168h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">chunk_store_config:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">max_look_back_period:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-attr\">table_manager:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">chunk_tables_provisioning:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">inactive_read_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">inactive_write_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">provisioned_read_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">provisioned_write_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">index_tables_provisioning:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">inactive_read_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">inactive_write_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">provisioned_read_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">provisioned_write_throughput:</span> <span class=\"hljs-number\">0</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">retention_deletes_enabled:</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">retention_period:</span> <span class=\"hljs-number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-Loki-as-a-Logging-Driver\"><a href=\"#Adding-Loki-as-a-Logging-Driver\" class=\"headerlink\" title=\"Adding Loki as a Logging Driver\"></a>Adding Loki as a Logging Driver</h3><p>To ship logs to Loki automatically for every container we add to our setup, we need to add the loki logging driver.<br>The easiest way to add the loki logging driver is with a docker plugin. </p>\n<figure class=\"highlight shell hljs\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to restart the docker daemon after installing the plugin.</p>\n<p>If you are on Mac:</p>\n<figure class=\"highlight shell hljs\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Docker &amp;&amp; open /Applications/Docker.app</span><br></pre></td></tr></table></figure>\n<p>If you are on Linux:</p>\n<figure class=\"highlight shell hljs\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>After installing the plugin, verify it is enabled.</p>\n<figure class=\"highlight shell hljs\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker plugin ls</span><br></pre></td></tr></table></figure>\n<p>Should output</p>\n<figure class=\"highlight plaintext hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID                  NAME                DESCRIPTION           ENABLED</span><br><span class=\"line\">412df8a79e8e        loki:latest         Loki Logging Driver   true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-Loki-as-a-Logging-Driver\"><a href=\"#Using-Loki-as-a-Logging-Driver\" class=\"headerlink\" title=\"Using Loki as a Logging Driver\"></a>Using Loki as a Logging Driver</h3><p>There are two ways, I will cover, to change the logging driver, either directly in the docker compose file or in the daemon.json file of the docker daemon.</p>\n<h4 id=\"Docker-compose-yaml\"><a href=\"#Docker-compose-yaml\" class=\"headerlink\" title=\"Docker-compose.yaml\"></a>Docker-compose.yaml</h4><p>The default driver is json-file, but we can easily change it to loki, thanks to the docker plugin we installed earlier.<br>The loki-url option tells where to ship the logs, which in this case is to our local loki instance.<br>For a complete options list check the <a href=\"https://github.com/grafana/loki/tree/master/cmd/docker-driver#log-opt-options\">loki logging driver options</a></p>\n<figure class=\"highlight yaml hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-attr\">logging:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">loki</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">options:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">loki-url:</span> <span class=\"hljs-string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br></pre></td></tr></table></figure>\n<p>An easier way to reuse the logging section since docker-compose version 3.4, is the <code>x-</code> extension fields and yaml anchors and aliases.<br>The <code>x-</code> extension field tells docker compose to ignore the section that follows it.<br>Anchors are identified by an <code>&amp;</code> character, and aliases by an <code>*</code> character.<br>Define an extension field at the top of your <code>docker-compose.yml</code> with an anchor after it and reuse it using the alias on all services.</p>\n<figure class=\"highlight yaml hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-comment\"># logger driver - change this driver to ship all container logs to a different location</span></span><br><span class=\"line\"><span class=\"hljs-attr\">x-logging:</span> <span class=\"hljs-meta\">&amp;logging</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">logging:</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">driver:</span> <span class=\"hljs-string\">loki</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">options:</span></span><br><span class=\"line\">      <span class=\"hljs-attr\">loki-url:</span> <span class=\"hljs-string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br><span class=\"line\"><span class=\"hljs-attr\">services:</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">my_service:</span></span><br><span class=\"line\">    <span class=\"hljs-meta\">*logging</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">xxx</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">xxx/xxx</span></span><br><span class=\"line\">  <span class=\"hljs-attr\">another_cool_service:</span></span><br><span class=\"line\">    <span class=\"hljs-meta\">*logging</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">container_name:</span> <span class=\"hljs-string\">xxxx</span></span><br><span class=\"line\">    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">xxxx/xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Daemon-json\"><a href=\"#Daemon-json\" class=\"headerlink\" title=\"Daemon.json\"></a>Daemon.json</h4><p>We can also change the default logging driver for all containers in a file called <code>daemon.json</code>.\nIf you are on Mac its located at <code>~/.docker/daemon.json</code><br>If you are on linux its located at <code>/etc/docker/daemon.json</code></p>\n<p>Example of daemon.json.<br>Don’t forget to restart the docker daemon afterwards.</p>\n<figure class=\"highlight json hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"hljs-attr\">&quot;debug&quot;</span> : <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">&quot;log-driver&quot;</span>: <span class=\"hljs-string\">&quot;loki&quot;</span>,</span><br><span class=\"line\">    <span class=\"hljs-attr\">&quot;log-opts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"hljs-attr\">&quot;loki-url&quot;</span>: <span class=\"hljs-string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I prefer adding the logging driver in the <code>docker-compose.yaml</code> directly, because I have more control over the logging driver on a single service level, whereas, with daemon.json, you change the logging driver for all containers.</p>\n<h3 id=\"Running-Docker-with-Loki\"><a href=\"#Running-Docker-with-Loki\" class=\"headerlink\" title=\"Running Docker with Loki\"></a>Running Docker with Loki</h3><p>After you run <code>docker-compose up</code> all container logs will be sent to Loki.<br>One thing to note is, there is an error after running the containers, which says</p>\n<figure class=\"highlight plaintext hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: no logs are available with the &#x27;loki&#x27; log driver</span><br></pre></td></tr></table></figure>\n<p>Nevertheless, all container logs are successfully sent to Grafana every time.<br>Because I use Loki in a development setup, I ignore this message, but if you want to run this in production, I would ensure that it is minor.<br>After all containers are up, you can still do <code>docker logs</code> command and it will work, so I am guessing the error above has something to do with container startup time.</p>\n<h3 id=\"Adding-Loki-to-Grafana\"><a href=\"#Adding-Loki-to-Grafana\" class=\"headerlink\" title=\"Adding Loki to Grafana\"></a>Adding Loki to Grafana</h3><p>Login to your Grafana instance and add a new data source of type Loki. Make sure the Grafana can reach the Loki instance.<br><img src=\"/2020/03/21/Collecting-Docker-Logs-With-Loki/adding-loki.png\" alt></p>\n<h3 id=\"Using-Loki-in-Grafana\"><a href=\"#Using-Loki-in-Grafana\" class=\"headerlink\" title=\"Using Loki in Grafana\"></a>Using Loki in Grafana</h3><p>After adding Loki as a data source, go to explore and you should see all containers appear with automatic labels set by the Loki logging driver.<br><img src=\"/2020/03/21/Collecting-Docker-Logs-With-Loki/grafana-loki.png\" alt></p>\n<p>You can also filter by words using the logql syntax, for example: <code>|=</code> includes syntax or <code>!=</code> excludes syntax. You can find out more about Loki logql syntax <a href=\"https://github.com/grafana/loki/blob/master/docs/logql.md\">here</a>.</p>\n<h3 id=\"Closing-Notes\"><a href=\"#Closing-Notes\" class=\"headerlink\" title=\"Closing Notes\"></a>Closing Notes</h3><p>We saw how to define a Loki docker container, afterwards we added Loki logging driver as a docker plugin, and finally, we shipped all of our logs to Grafana with a simple configuration.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Loki is a multi-tenant log aggregation system inspired by Prometheus.<br>It is cost effective, easy to operate and allows viewing logs directly in Grafana.<br>In this blog post, I will show how to setup a Loki container using docker compose, how to define the Loki logging driver to automatically ship all container logs and finally, how to view the logs in Grafana.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>I have been using Loki in a development setup with 24 services for three months now and had zero problems with it.<br>It really makes the developers life easier, especially after chasing log files in 20 different terminals.<br>From what I have read, Loki was battle tested by Grafana, so I am sure it is capable of running in production just fine.</p>\n<h3 id=\"Setup-Loki-Container\"><a href=\"#Setup-Loki-Container\" class=\"headerlink\" title=\"Setup Loki Container\"></a>Setup Loki Container</h3><p>First of all, we will need to define a Loki container in the <code>docker-compose.yml</code>.\nThe command part tells Loki to read the config from the <code>local-config.yaml</code> which is added as a volume.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">loki:</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">loki</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">grafana/loki:latest</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;3100:3100&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">command:</span> <span class=\"string\">-config.file=/etc/loki/local-config.yaml</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./volumes/loki/etc:/etc/loki</span></span><br></pre></td></tr></table></figure>\n\n<p>The <code>local-config.yaml</code> is a default from the <a href=\"https://github.com/grafana/loki/blob/master/docs/configuration/README.md\">Loki Github page</a>.</p>\n<p>Here is an example config.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">auth_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">http_listen_port:</span> <span class=\"number\">3100</span></span><br><span class=\"line\">  <span class=\"attr\">log_level:</span> <span class=\"string\">error</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">ingester:</span></span><br><span class=\"line\">  <span class=\"attr\">lifecycler:</span></span><br><span class=\"line\">    <span class=\"attr\">address:</span> <span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span></span><br><span class=\"line\">    <span class=\"attr\">ring:</span></span><br><span class=\"line\">      <span class=\"attr\">kvstore:</span></span><br><span class=\"line\">        <span class=\"attr\">store:</span> <span class=\"string\">inmemory</span></span><br><span class=\"line\">      <span class=\"attr\">replication_factor:</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"attr\">final_sleep:</span> <span class=\"string\">0s</span></span><br><span class=\"line\">  <span class=\"attr\">chunk_idle_period:</span> <span class=\"string\">5m</span></span><br><span class=\"line\">  <span class=\"attr\">chunk_retain_period:</span> <span class=\"string\">30s</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">schema_config:</span></span><br><span class=\"line\">  <span class=\"attr\">configs:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"attr\">from:</span> <span class=\"number\">2018-04-15</span></span><br><span class=\"line\">      <span class=\"attr\">store:</span> <span class=\"string\">boltdb</span></span><br><span class=\"line\">      <span class=\"attr\">object_store:</span> <span class=\"string\">filesystem</span></span><br><span class=\"line\">      <span class=\"attr\">schema:</span> <span class=\"string\">v9</span></span><br><span class=\"line\">      <span class=\"attr\">index:</span></span><br><span class=\"line\">        <span class=\"attr\">prefix:</span> <span class=\"string\">index_</span></span><br><span class=\"line\">        <span class=\"attr\">period:</span> <span class=\"string\">168h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">storage_config:</span></span><br><span class=\"line\">  <span class=\"attr\">boltdb:</span></span><br><span class=\"line\">    <span class=\"attr\">directory:</span> <span class=\"string\">/tmp/loki/index</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">filesystem:</span></span><br><span class=\"line\">    <span class=\"attr\">directory:</span> <span class=\"string\">/tmp/loki/chunks</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">limits_config:</span></span><br><span class=\"line\">  <span class=\"attr\">enforce_metric_name:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">reject_old_samples:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">reject_old_samples_max_age:</span> <span class=\"string\">168h</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">chunk_store_config:</span></span><br><span class=\"line\">  <span class=\"attr\">max_look_back_period:</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">table_manager:</span></span><br><span class=\"line\">  <span class=\"attr\">chunk_tables_provisioning:</span></span><br><span class=\"line\">    <span class=\"attr\">inactive_read_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">inactive_write_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">provisioned_read_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">provisioned_write_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">index_tables_provisioning:</span></span><br><span class=\"line\">    <span class=\"attr\">inactive_read_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">inactive_write_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">provisioned_read_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">provisioned_write_throughput:</span> <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"attr\">retention_deletes_enabled:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">retention_period:</span> <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Adding-Loki-as-a-Logging-Driver\"><a href=\"#Adding-Loki-as-a-Logging-Driver\" class=\"headerlink\" title=\"Adding Loki as a Logging Driver\"></a>Adding Loki as a Logging Driver</h3><p>To ship logs to Loki automatically for every container we add to our setup, we need to add the loki logging driver.<br>The easiest way to add the loki logging driver is with a docker plugin. </p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker plugin install grafana/loki-docker-driver:latest --alias loki --grant-all-permissions</span><br></pre></td></tr></table></figure>\n<p>Don’t forget to restart the docker daemon after installing the plugin.</p>\n<p>If you are on Mac:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Docker &amp;&amp; open /Applications/Docker.app</span><br></pre></td></tr></table></figure>\n<p>If you are on Linux:</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>\n\n<p>After installing the plugin, verify it is enabled.</p>\n<figure class=\"highlight shell\"><figcaption><span>script</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker plugin ls</span><br></pre></td></tr></table></figure>\n<p>Should output</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ID                  NAME                DESCRIPTION           ENABLED</span><br><span class=\"line\">412df8a79e8e        loki:latest         Loki Logging Driver   true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Using-Loki-as-a-Logging-Driver\"><a href=\"#Using-Loki-as-a-Logging-Driver\" class=\"headerlink\" title=\"Using Loki as a Logging Driver\"></a>Using Loki as a Logging Driver</h3><p>There are two ways, I will cover, to change the logging driver, either directly in the docker compose file or in the daemon.json file of the docker daemon.</p>\n<h4 id=\"Docker-compose-yaml\"><a href=\"#Docker-compose-yaml\" class=\"headerlink\" title=\"Docker-compose.yaml\"></a>Docker-compose.yaml</h4><p>The default driver is json-file, but we can easily change it to loki, thanks to the docker plugin we installed earlier.<br>The loki-url option tells where to ship the logs, which in this case is to our local loki instance.<br>For a complete options list check the <a href=\"https://github.com/grafana/loki/tree/master/cmd/docker-driver#log-opt-options\">loki logging driver options</a></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">logging:</span></span><br><span class=\"line\">  <span class=\"attr\">driver:</span> <span class=\"string\">loki</span></span><br><span class=\"line\">  <span class=\"attr\">options:</span></span><br><span class=\"line\">    <span class=\"attr\">loki-url:</span> <span class=\"string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br></pre></td></tr></table></figure>\n<p>An easier way to reuse the logging section since docker-compose version 3.4, is the <code>x-</code> extension fields and yaml anchors and aliases.<br>The <code>x-</code> extension field tells docker compose to ignore the section that follows it.<br>Anchors are identified by an <code>&amp;</code> character, and aliases by an <code>*</code> character.<br>Define an extension field at the top of your <code>docker-compose.yml</code> with an anchor after it and reuse it using the alias on all services.</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># logger driver - change this driver to ship all container logs to a different location</span></span><br><span class=\"line\"><span class=\"attr\">x-logging:</span> <span class=\"meta\">&amp;logging</span></span><br><span class=\"line\">  <span class=\"attr\">logging:</span></span><br><span class=\"line\">    <span class=\"attr\">driver:</span> <span class=\"string\">loki</span></span><br><span class=\"line\">    <span class=\"attr\">options:</span></span><br><span class=\"line\">      <span class=\"attr\">loki-url:</span> <span class=\"string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">my_service:</span></span><br><span class=\"line\">    <span class=\"meta\">*logging</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">xxx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">xxx/xxx</span></span><br><span class=\"line\">  <span class=\"attr\">another_cool_service:</span></span><br><span class=\"line\">    <span class=\"meta\">*logging</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">xxxx</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">xxxx/xxxx</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Daemon-json\"><a href=\"#Daemon-json\" class=\"headerlink\" title=\"Daemon.json\"></a>Daemon.json</h4><p>We can also change the default logging driver for all containers in a file called <code>daemon.json</code>.\nIf you are on Mac its located at <code>~/.docker/daemon.json</code><br>If you are on linux its located at <code>/etc/docker/daemon.json</code></p>\n<p>Example of daemon.json.<br>Don’t forget to restart the docker daemon afterwards.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;debug&quot;</span> : <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;log-driver&quot;</span>: <span class=\"string\">&quot;loki&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;log-opts&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;loki-url&quot;</span>: <span class=\"string\">&quot;http://host.docker.internal:3100/loki/api/v1/push&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I prefer adding the logging driver in the <code>docker-compose.yaml</code> directly, because I have more control over the logging driver on a single service level, whereas, with daemon.json, you change the logging driver for all containers.</p>\n<h3 id=\"Running-Docker-with-Loki\"><a href=\"#Running-Docker-with-Loki\" class=\"headerlink\" title=\"Running Docker with Loki\"></a>Running Docker with Loki</h3><p>After you run <code>docker-compose up</code> all container logs will be sent to Loki.<br>One thing to note is, there is an error after running the containers, which says</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING: no logs are available with the &#x27;loki&#x27; log driver</span><br></pre></td></tr></table></figure>\n<p>Nevertheless, all container logs are successfully sent to Grafana every time.<br>Because I use Loki in a development setup, I ignore this message, but if you want to run this in production, I would ensure that it is minor.<br>After all containers are up, you can still do <code>docker logs</code> command and it will work, so I am guessing the error above has something to do with container startup time.</p>\n<h3 id=\"Adding-Loki-to-Grafana\"><a href=\"#Adding-Loki-to-Grafana\" class=\"headerlink\" title=\"Adding Loki to Grafana\"></a>Adding Loki to Grafana</h3><p>Login to your Grafana instance and add a new data source of type Loki. Make sure the Grafana can reach the Loki instance.<br><img src=\"/2020/03/21/Collecting-Docker-Logs-With-Loki/adding-loki.png\" alt></p>\n<h3 id=\"Using-Loki-in-Grafana\"><a href=\"#Using-Loki-in-Grafana\" class=\"headerlink\" title=\"Using Loki in Grafana\"></a>Using Loki in Grafana</h3><p>After adding Loki as a data source, go to explore and you should see all containers appear with automatic labels set by the Loki logging driver.<br><img src=\"/2020/03/21/Collecting-Docker-Logs-With-Loki/grafana-loki.png\" alt></p>\n<p>You can also filter by words using the logql syntax, for example: <code>|=</code> includes syntax or <code>!=</code> excludes syntax. You can find out more about Loki logql syntax <a href=\"https://github.com/grafana/loki/blob/master/docs/logql.md\">here</a>.</p>\n<h3 id=\"Closing-Notes\"><a href=\"#Closing-Notes\" class=\"headerlink\" title=\"Closing Notes\"></a>Closing Notes</h3><p>We saw how to define a Loki docker container, afterwards we added Loki logging driver as a docker plugin, and finally, we shipped all of our logs to Grafana with a simple configuration.</p>\n"},{"title":"Golang Memory Leaks","thumbnail":"images/Golang.png","date":"2020-11-07T17:59:35.000Z","_content":"\nRecently, I had a memory leak in production. I saw that a specific service's memory steadily rises when under load, until the process hits an out of memory exception. After a thorough investigation, I found out the source of the memory leak as well as the reason to why it happened in the first place. To diagnose the problem, I used Golang's profiling tool called `pprof`.\nIn this post, I will explain what is pprof and show how I diagnosed the memory leak.\n\n\n### Preface\nOur clients use our system through a proxy service, to which, we provide access to. The said memory leak happened in the proxy service.\n\n### Disclaimer\nSome of the images here will be cropped and missing some information due to security reasons.\n\n### The Memory Leak\nAfter getting complaints from clients about hiccups and disconnects, I started digging for the problem.\nFirst thing I did, was go into the company's Grafana and check the memory and cpu of the proxy service.\nI looked at the service and compared metrics from 3 different scenarios:\n- Service is after restart and idle\n- Service is under load\n- Service was under load and now idle\n\nAll the overlapping lines below are idle instances of the service, only the green line gets traffic.\n![](./leak.png)\n\nThere are a couple of obervations from the image above\n- When the service is idle and there is no traffic, its memory stays low\n- After traffic stops hitting the single instance, its memory level drops but stays well above the others.\n\n\nBefore jumping on a profiling adventure (some may call it a nightmare), I made a small checklist of things I wanted to exclude:\n- I was using Golang version 1.12.5, so I wanted to make sure that the potential leak was not coming from the runtime (even runtimes have issues). A good place to start is by looking at [open issues on the github page](https://github.com/golang/go/issues)\n- Try agressive garbage collection using [debug.SetGCPercent(10)](https://golang.org/pkg/runtime/debug/#SetGCPercent)\n- Try Manual [debug.FreeOSMemory()](https://golang.org/pkg/runtime/debug/#FreeOSMemory). Runtimes are all about performance, after memory has been garbage collected, it is not freed back to the OS immediately for performance reasons.\n- Try to reproduce the leak in a staging environment with a small load test to confirm my suspicions.\n\nAfter completing my checklist and seeing the leak was still present and that it was reproducible, I started profiling the service with pprof.\n\n### Golang's Profiling Tool - pprof\nFrom the [pproff github page](https://github.com/google/pprof)\n> pprof is a tool for visualization and analysis of profiling data.\npprof reads a collection of profiling samples in profile.proto format and generates reports to visualize and help analyze the data. It can generate both text and graphical reports (through the use of the dot visualization package).\n\n#### Profiling Types\n\nThere are several profiles you can collect\n- goroutine    - stack traces of all current goroutines\n- heap         - a sampling of all heap allocations\n- threadcreate - stack traces that led to the creation of new OS threads\n- block        - stack traces that led to blocking on synchronization primitives\n- mutex        - stack traces of holders of contended mutexes\n- profile      - cpu profile\n- trace        - allows collecting all the profiles for a certain duration\n\n\n#### Profiling Example\nTo start the profiling, I imported pprof and started an HTTP server for it.\nNote, that if you already have an HTTP server running, the import statement is sufficient.\nI had a TCP server running, so I added another goroutine to listen on a separate port for the pprof.\n\n```golang\nimport _ \"net/http/pprof\"\n\ngo func() {\n\tlog.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n```\n\nFor memory leaks, we want to start with the heap profile. \n\nTo capture a profile we run `curl http://localhost:6060/debug/pprof/heap?seconds=30 > heap.out`.\n\nTo inspect a profile we run `go tool pprof heap.out`.\n\nThere are two types of allocations the profile will collect\n- in_use - current allocations\n![](./pprof_inuse_space.png)\n\n- alloc - total allocations since the program started running, regardless of whether the memory was freed or not.\n![](./pprof_alloc_space.png)\n\nEntering top will display the top 10 results that make up the most memory consumers. We can write any number after top to see the top results.\nWe have two important fields to look out for\n- flat - how much memory is allocated by this function\n- cum - how much cumulative memory is allocated by this function or a function it called down the stack\n\npprof also has a web interface to visually examine the profile.\nTo run pprof with the web ui run `go tool pprof -http=':8081' heap.out`, notice the http flag.\nThe biggest memory consumers in the profile collected will be shown as red, which are your points of reference.\nWe can see in the image below, that there are two red paths, one for the http server and one for runtime.malg\n\n![](./malg.png)\n\n### Diagnosing the Leak\nPprof has another helpful feature that allows comparing profiles using the `-base` and the `-diff_base` flags.\nWe run it like so `go tool pprof -http=':8081' -diff_base heap-new-16:22:04:N.out heap-new-17:32:38:N.out`\n\nAfter collecting a 30 second profile before and after a service got traffic, I compared the profiles. Immediately, `runtime.malg` that grew in memory caught my eye.\n![](./malg3.png)\n\nAt idle runtime.malg was around 1MB and it grew to 38MB.\nWhen creating a new goroutine the runtime.malg function is called. It allocates a stack trace for the newly created goroutine and holds a reference to it until the goroutine finishes execution.\n![](./malg2.png)\n\n\n### The Fix\nBy now, pprof pointed me towards runtime.malg, that held all goroutine descriptors, which did not get garbage collected. \nA goroutine that is never garbage collected means it never finishes execution, which happens on two occasions\n- A `for{}` or a `select{}` loop without a stopping condition\n- A `channel` that waits for messages and is not getting closed properly\n\nTo confirm my suspicions, I took a goroutine profile, which looked like this\n![](./goroutines.png)\n\nThe profile above shows that I have a lot of goroutines spawned that are doing nothing , because they are waiting on a channel.\n\nI immediately looked at the piece of code that the profile above points at and found the following\n\n```golang\ngo func() {\n  for {\n    select {\n    case <-sa.reader.C:\n      sa.read()\n    }\n  }\n}()\n```\n\nThe goroutine has a for loop which always listens on a channel from `time.Ticker`.\nChecking how the stopping of the time.Ticker occurs looks like this\n```golang\n  sa.reader.Stop()\n```\n\nLooking at the [documentation](https://golang.org/pkg/time/#Ticker.Stop) of time.Ticker, I noticed this\n> Stop turns off a ticker. After Stop, no more ticks will be sent. `Stop does not close the channel`, to prevent a concurrent goroutine reading from the channel from seeing an erroneous \"tick\". \n\nIt immediately struck me, the channel is never getting closed, which leaves the goroutine in a waiting state forever, which leads to the runtime.malg to accumulate gouroutine descriptors, which increases the heap until we reach OOM exception.\n\nI added a done channel to the goroutine and made sure to close it on `ticker.Stop()`\n\n```golang\n\ntype Reader struct {\n\treader            *time.Ticker\n\treaderDone        chan bool\n}\n\nfunc NewReader() *Reader {\n  return &Reader{\n    readerDone: make(chan bool, 1),\n    reader: time.NewTicker(time.Second * 5)\n  }\n}\n\n// creation of ticker\n\nfunc (r *Reader) Read(){\n  go func() {\n    for {\n      select {\n      case <-r.reader.C: // previously stuck here indefinitely\n        // do something\n      case <-r.readerDone:\n        return // when done channel receives value the return causes the function to exit\n      }\n    }\n  }()\n}\n\n// other place in the code\nfunc (r *Reader) Stop(){\n  r.reader.Stop()\n  r.readerDone <- true\n}\n\n```\n\n\n### Summary\nThe memory leak above turned out to be a forgotten channel that caused a goroutine leak. A goroutine leak happens when goroutines never finish execution, which leads to their stack stay on the heap and never get garbage collected, which eventually leads to an out of memory exception.\nThe cause of memory leaks will **almost** always be from your applications side, but as I crunched through several of them, I noticed it is easier to start with the small things, like, checking the runtime Github page for new issues, or, if the leak started after a new release, comparing it to a previous release without the leak. These small things can save you tens if not hundreds of profiling hours. Regardless of where you choose to start, pprof can come to your aid. Pprof is Golang's profiling tool which allows you to take cpu, heap, OS thread and goroutines profiles and compare them visually.\n\n\n### Bibliography\n- [memory-leaking](https://go101.org/article/memory-leaking.html)\n- [how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices](https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/)\n- [how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase](https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/)","source":"_posts/Golang-Memory-Leaks.md","raw":"---\ntitle: Golang Memory Leaks\ntags:\n  - Golang\n  - Memory Leak\n  - Green Threads\n  - Investigation\n  - Profiling\ncategory: Programming\nthumbnail: images/Golang.png\ndate: 2020-11-07 19:59:35\n---\n\nRecently, I had a memory leak in production. I saw that a specific service's memory steadily rises when under load, until the process hits an out of memory exception. After a thorough investigation, I found out the source of the memory leak as well as the reason to why it happened in the first place. To diagnose the problem, I used Golang's profiling tool called `pprof`.\nIn this post, I will explain what is pprof and show how I diagnosed the memory leak.\n\n\n### Preface\nOur clients use our system through a proxy service, to which, we provide access to. The said memory leak happened in the proxy service.\n\n### Disclaimer\nSome of the images here will be cropped and missing some information due to security reasons.\n\n### The Memory Leak\nAfter getting complaints from clients about hiccups and disconnects, I started digging for the problem.\nFirst thing I did, was go into the company's Grafana and check the memory and cpu of the proxy service.\nI looked at the service and compared metrics from 3 different scenarios:\n- Service is after restart and idle\n- Service is under load\n- Service was under load and now idle\n\nAll the overlapping lines below are idle instances of the service, only the green line gets traffic.\n![](./leak.png)\n\nThere are a couple of obervations from the image above\n- When the service is idle and there is no traffic, its memory stays low\n- After traffic stops hitting the single instance, its memory level drops but stays well above the others.\n\n\nBefore jumping on a profiling adventure (some may call it a nightmare), I made a small checklist of things I wanted to exclude:\n- I was using Golang version 1.12.5, so I wanted to make sure that the potential leak was not coming from the runtime (even runtimes have issues). A good place to start is by looking at [open issues on the github page](https://github.com/golang/go/issues)\n- Try agressive garbage collection using [debug.SetGCPercent(10)](https://golang.org/pkg/runtime/debug/#SetGCPercent)\n- Try Manual [debug.FreeOSMemory()](https://golang.org/pkg/runtime/debug/#FreeOSMemory). Runtimes are all about performance, after memory has been garbage collected, it is not freed back to the OS immediately for performance reasons.\n- Try to reproduce the leak in a staging environment with a small load test to confirm my suspicions.\n\nAfter completing my checklist and seeing the leak was still present and that it was reproducible, I started profiling the service with pprof.\n\n### Golang's Profiling Tool - pprof\nFrom the [pproff github page](https://github.com/google/pprof)\n> pprof is a tool for visualization and analysis of profiling data.\npprof reads a collection of profiling samples in profile.proto format and generates reports to visualize and help analyze the data. It can generate both text and graphical reports (through the use of the dot visualization package).\n\n#### Profiling Types\n\nThere are several profiles you can collect\n- goroutine    - stack traces of all current goroutines\n- heap         - a sampling of all heap allocations\n- threadcreate - stack traces that led to the creation of new OS threads\n- block        - stack traces that led to blocking on synchronization primitives\n- mutex        - stack traces of holders of contended mutexes\n- profile      - cpu profile\n- trace        - allows collecting all the profiles for a certain duration\n\n\n#### Profiling Example\nTo start the profiling, I imported pprof and started an HTTP server for it.\nNote, that if you already have an HTTP server running, the import statement is sufficient.\nI had a TCP server running, so I added another goroutine to listen on a separate port for the pprof.\n\n```golang\nimport _ \"net/http/pprof\"\n\ngo func() {\n\tlog.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n```\n\nFor memory leaks, we want to start with the heap profile. \n\nTo capture a profile we run `curl http://localhost:6060/debug/pprof/heap?seconds=30 > heap.out`.\n\nTo inspect a profile we run `go tool pprof heap.out`.\n\nThere are two types of allocations the profile will collect\n- in_use - current allocations\n![](./pprof_inuse_space.png)\n\n- alloc - total allocations since the program started running, regardless of whether the memory was freed or not.\n![](./pprof_alloc_space.png)\n\nEntering top will display the top 10 results that make up the most memory consumers. We can write any number after top to see the top results.\nWe have two important fields to look out for\n- flat - how much memory is allocated by this function\n- cum - how much cumulative memory is allocated by this function or a function it called down the stack\n\npprof also has a web interface to visually examine the profile.\nTo run pprof with the web ui run `go tool pprof -http=':8081' heap.out`, notice the http flag.\nThe biggest memory consumers in the profile collected will be shown as red, which are your points of reference.\nWe can see in the image below, that there are two red paths, one for the http server and one for runtime.malg\n\n![](./malg.png)\n\n### Diagnosing the Leak\nPprof has another helpful feature that allows comparing profiles using the `-base` and the `-diff_base` flags.\nWe run it like so `go tool pprof -http=':8081' -diff_base heap-new-16:22:04:N.out heap-new-17:32:38:N.out`\n\nAfter collecting a 30 second profile before and after a service got traffic, I compared the profiles. Immediately, `runtime.malg` that grew in memory caught my eye.\n![](./malg3.png)\n\nAt idle runtime.malg was around 1MB and it grew to 38MB.\nWhen creating a new goroutine the runtime.malg function is called. It allocates a stack trace for the newly created goroutine and holds a reference to it until the goroutine finishes execution.\n![](./malg2.png)\n\n\n### The Fix\nBy now, pprof pointed me towards runtime.malg, that held all goroutine descriptors, which did not get garbage collected. \nA goroutine that is never garbage collected means it never finishes execution, which happens on two occasions\n- A `for{}` or a `select{}` loop without a stopping condition\n- A `channel` that waits for messages and is not getting closed properly\n\nTo confirm my suspicions, I took a goroutine profile, which looked like this\n![](./goroutines.png)\n\nThe profile above shows that I have a lot of goroutines spawned that are doing nothing , because they are waiting on a channel.\n\nI immediately looked at the piece of code that the profile above points at and found the following\n\n```golang\ngo func() {\n  for {\n    select {\n    case <-sa.reader.C:\n      sa.read()\n    }\n  }\n}()\n```\n\nThe goroutine has a for loop which always listens on a channel from `time.Ticker`.\nChecking how the stopping of the time.Ticker occurs looks like this\n```golang\n  sa.reader.Stop()\n```\n\nLooking at the [documentation](https://golang.org/pkg/time/#Ticker.Stop) of time.Ticker, I noticed this\n> Stop turns off a ticker. After Stop, no more ticks will be sent. `Stop does not close the channel`, to prevent a concurrent goroutine reading from the channel from seeing an erroneous \"tick\". \n\nIt immediately struck me, the channel is never getting closed, which leaves the goroutine in a waiting state forever, which leads to the runtime.malg to accumulate gouroutine descriptors, which increases the heap until we reach OOM exception.\n\nI added a done channel to the goroutine and made sure to close it on `ticker.Stop()`\n\n```golang\n\ntype Reader struct {\n\treader            *time.Ticker\n\treaderDone        chan bool\n}\n\nfunc NewReader() *Reader {\n  return &Reader{\n    readerDone: make(chan bool, 1),\n    reader: time.NewTicker(time.Second * 5)\n  }\n}\n\n// creation of ticker\n\nfunc (r *Reader) Read(){\n  go func() {\n    for {\n      select {\n      case <-r.reader.C: // previously stuck here indefinitely\n        // do something\n      case <-r.readerDone:\n        return // when done channel receives value the return causes the function to exit\n      }\n    }\n  }()\n}\n\n// other place in the code\nfunc (r *Reader) Stop(){\n  r.reader.Stop()\n  r.readerDone <- true\n}\n\n```\n\n\n### Summary\nThe memory leak above turned out to be a forgotten channel that caused a goroutine leak. A goroutine leak happens when goroutines never finish execution, which leads to their stack stay on the heap and never get garbage collected, which eventually leads to an out of memory exception.\nThe cause of memory leaks will **almost** always be from your applications side, but as I crunched through several of them, I noticed it is easier to start with the small things, like, checking the runtime Github page for new issues, or, if the leak started after a new release, comparing it to a previous release without the leak. These small things can save you tens if not hundreds of profiling hours. Regardless of where you choose to start, pprof can come to your aid. Pprof is Golang's profiling tool which allows you to take cpu, heap, OS thread and goroutines profiles and compare them visually.\n\n\n### Bibliography\n- [memory-leaking](https://go101.org/article/memory-leaking.html)\n- [how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices](https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/)\n- [how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase](https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/)","slug":"Golang-Memory-Leaks","published":1,"updated":"2021-01-22T11:07:55.934Z","_id":"ckravj1my000r78ta4hqlaxf8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Recently, I had a memory leak in production. I saw that a specific service’s memory steadily rises when under load, until the process hits an out of memory exception. After a thorough investigation, I found out the source of the memory leak as well as the reason to why it happened in the first place. To diagnose the problem, I used Golang’s profiling tool called <code>pprof</code>.\nIn this post, I will explain what is pprof and show how I diagnosed the memory leak.</p>\n<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>Our clients use our system through a proxy service, to which, we provide access to. The said memory leak happened in the proxy service.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>Some of the images here will be cropped and missing some information due to security reasons.</p>\n<h3 id=\"The-Memory-Leak\"><a href=\"#The-Memory-Leak\" class=\"headerlink\" title=\"The Memory Leak\"></a>The Memory Leak</h3><p>After getting complaints from clients about hiccups and disconnects, I started digging for the problem.<br>First thing I did, was go into the company’s Grafana and check the memory and cpu of the proxy service.<br>I looked at the service and compared metrics from 3 different scenarios:</p>\n<ul>\n<li>Service is after restart and idle</li>\n<li>Service is under load</li>\n<li>Service was under load and now idle</li>\n</ul>\n<p>All the overlapping lines below are idle instances of the service, only the green line gets traffic.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/leak.png\" alt></p>\n<p>There are a couple of obervations from the image above</p>\n<ul>\n<li>When the service is idle and there is no traffic, its memory stays low</li>\n<li>After traffic stops hitting the single instance, its memory level drops but stays well above the others.</li>\n</ul>\n<p>Before jumping on a profiling adventure (some may call it a nightmare), I made a small checklist of things I wanted to exclude:</p>\n<ul>\n<li>I was using Golang version 1.12.5, so I wanted to make sure that the potential leak was not coming from the runtime (even runtimes have issues). A good place to start is by looking at <a href=\"https://github.com/golang/go/issues\">open issues on the github page</a></li>\n<li>Try agressive garbage collection using <a href=\"https://golang.org/pkg/runtime/debug/#SetGCPercent\">debug.SetGCPercent(10)</a></li>\n<li>Try Manual <a href=\"https://golang.org/pkg/runtime/debug/#FreeOSMemory\">debug.FreeOSMemory()</a>. Runtimes are all about performance, after memory has been garbage collected, it is not freed back to the OS immediately for performance reasons.</li>\n<li>Try to reproduce the leak in a staging environment with a small load test to confirm my suspicions.</li>\n</ul>\n<p>After completing my checklist and seeing the leak was still present and that it was reproducible, I started profiling the service with pprof.</p>\n<h3 id=\"Golang’s-Profiling-Tool-pprof\"><a href=\"#Golang’s-Profiling-Tool-pprof\" class=\"headerlink\" title=\"Golang’s Profiling Tool - pprof\"></a>Golang’s Profiling Tool - pprof</h3><p>From the <a href=\"https://github.com/google/pprof\">pproff github page</a></p>\n<blockquote>\n<p>pprof is a tool for visualization and analysis of profiling data.<br>pprof reads a collection of profiling samples in profile.proto format and generates reports to visualize and help analyze the data. It can generate both text and graphical reports (through the use of the dot visualization package).</p>\n</blockquote>\n<h4 id=\"Profiling-Types\"><a href=\"#Profiling-Types\" class=\"headerlink\" title=\"Profiling Types\"></a>Profiling Types</h4><p>There are several profiles you can collect</p>\n<ul>\n<li>goroutine    - stack traces of all current goroutines</li>\n<li>heap         - a sampling of all heap allocations</li>\n<li>threadcreate - stack traces that led to the creation of new OS threads</li>\n<li>block        - stack traces that led to blocking on synchronization primitives</li>\n<li>mutex        - stack traces of holders of contended mutexes</li>\n<li>profile      - cpu profile</li>\n<li>trace        - allows collecting all the profiles for a certain duration</li>\n</ul>\n<h4 id=\"Profiling-Example\"><a href=\"#Profiling-Example\" class=\"headerlink\" title=\"Profiling Example\"></a>Profiling Example</h4><p>To start the profiling, I imported pprof and started an HTTP server for it.<br>Note, that if you already have an HTTP server running, the import statement is sufficient.<br>I had a TCP server running, so I added another goroutine to listen on a separate port for the pprof.</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> _ <span class=\"hljs-string\">&quot;net/http/pprof&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(http.ListenAndServe(<span class=\"hljs-string\">&quot;localhost:6060&quot;</span>, <span class=\"hljs-literal\">nil</span>))</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>For memory leaks, we want to start with the heap profile. </p>\n<p>To capture a profile we run <code>curl http://localhost:6060/debug/pprof/heap?seconds=30 &gt; heap.out</code>.</p>\n<p>To inspect a profile we run <code>go tool pprof heap.out</code>.</p>\n<p>There are two types of allocations the profile will collect</p>\n<ul>\n<li><p>in_use - current allocations<br><img src=\"/2020/11/07/Golang-Memory-Leaks/pprof_inuse_space.png\" alt></p>\n</li>\n<li><p>alloc - total allocations since the program started running, regardless of whether the memory was freed or not.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/pprof_alloc_space.png\" alt></p>\n</li>\n</ul>\n<p>Entering top will display the top 10 results that make up the most memory consumers. We can write any number after top to see the top results.<br>We have two important fields to look out for</p>\n<ul>\n<li>flat - how much memory is allocated by this function</li>\n<li>cum - how much cumulative memory is allocated by this function or a function it called down the stack</li>\n</ul>\n<p>pprof also has a web interface to visually examine the profile.<br>To run pprof with the web ui run <code>go tool pprof -http=&#39;:8081&#39; heap.out</code>, notice the http flag.<br>The biggest memory consumers in the profile collected will be shown as red, which are your points of reference.<br>We can see in the image below, that there are two red paths, one for the http server and one for runtime.malg</p>\n<p><img src=\"/2020/11/07/Golang-Memory-Leaks/malg.png\" alt></p>\n<h3 id=\"Diagnosing-the-Leak\"><a href=\"#Diagnosing-the-Leak\" class=\"headerlink\" title=\"Diagnosing the Leak\"></a>Diagnosing the Leak</h3><p>Pprof has another helpful feature that allows comparing profiles using the <code>-base</code> and the <code>-diff_base</code> flags.<br>We run it like so <code>go tool pprof -http=&#39;:8081&#39; -diff_base heap-new-16:22:04:N.out heap-new-17:32:38:N.out</code></p>\n<p>After collecting a 30 second profile before and after a service got traffic, I compared the profiles. Immediately, <code>runtime.malg</code> that grew in memory caught my eye.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/malg3.png\" alt></p>\n<p>At idle runtime.malg was around 1MB and it grew to 38MB.<br>When creating a new goroutine the runtime.malg function is called. It allocates a stack trace for the newly created goroutine and holds a reference to it until the goroutine finishes execution.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/malg2.png\" alt></p>\n<h3 id=\"The-Fix\"><a href=\"#The-Fix\" class=\"headerlink\" title=\"The Fix\"></a>The Fix</h3><p>By now, pprof pointed me towards runtime.malg, that held all goroutine descriptors, which did not get garbage collected.<br>A goroutine that is never garbage collected means it never finishes execution, which happens on two occasions</p>\n<ul>\n<li>A <code>for&#123;&#125;</code> or a <code>select&#123;&#125;</code> loop without a stopping condition</li>\n<li>A <code>channel</code> that waits for messages and is not getting closed properly</li>\n</ul>\n<p>To confirm my suspicions, I took a goroutine profile, which looked like this<br><img src=\"/2020/11/07/Golang-Memory-Leaks/goroutines.png\" alt></p>\n<p>The profile above shows that I have a lot of goroutines spawned that are doing nothing , because they are waiting on a channel.</p>\n<p>I immediately looked at the piece of code that the profile above points at and found the following</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">case</span> &lt;-sa.reader.C:</span><br><span class=\"line\">      sa.read()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>The goroutine has a for loop which always listens on a channel from <code>time.Ticker</code>.\nChecking how the stopping of the time.Ticker occurs looks like this</p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sa.reader.Stop()</span><br></pre></td></tr></table></figure>\n\n<p>Looking at the <a href=\"https://golang.org/pkg/time/#Ticker.Stop\">documentation</a> of time.Ticker, I noticed this</p>\n<blockquote>\n<p>Stop turns off a ticker. After Stop, no more ticks will be sent. <code>Stop does not close the channel</code>, to prevent a concurrent goroutine reading from the channel from seeing an erroneous “tick”. </p>\n</blockquote>\n<p>It immediately struck me, the channel is never getting closed, which leaves the goroutine in a waiting state forever, which leads to the runtime.malg to accumulate gouroutine descriptors, which increases the heap until we reach OOM exception.</p>\n<p>I added a done channel to the goroutine and made sure to close it on <code>ticker.Stop()</code></p>\n<figure class=\"highlight golang hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Reader <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">\treader            *time.Ticker</span><br><span class=\"line\">\treaderDone        <span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewReader</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">Reader</span></span> &#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> &amp;Reader&#123;</span><br><span class=\"line\">    readerDone: <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">bool</span>, <span class=\"hljs-number\">1</span>),</span><br><span class=\"line\">    reader: time.NewTicker(time.Second * <span class=\"hljs-number\">5</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// creation of ticker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *Reader)</span> <span class=\"hljs-title\">Read</span><span class=\"hljs-params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> &lt;-r.reader.C: <span class=\"hljs-comment\">// previously stuck here indefinitely</span></span><br><span class=\"line\">        <span class=\"hljs-comment\">// do something</span></span><br><span class=\"line\">      <span class=\"hljs-keyword\">case</span> &lt;-r.readerDone:</span><br><span class=\"line\">        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-comment\">// when done channel receives value the return causes the function to exit</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// other place in the code</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *Reader)</span> <span class=\"hljs-title\">Stop</span><span class=\"hljs-params\">()</span></span>&#123;</span><br><span class=\"line\">  r.reader.Stop()</span><br><span class=\"line\">  r.readerDone &lt;- <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>The memory leak above turned out to be a forgotten channel that caused a goroutine leak. A goroutine leak happens when goroutines never finish execution, which leads to their stack stay on the heap and never get garbage collected, which eventually leads to an out of memory exception.<br>The cause of memory leaks will <strong>almost</strong> always be from your applications side, but as I crunched through several of them, I noticed it is easier to start with the small things, like, checking the runtime Github page for new issues, or, if the leak started after a new release, comparing it to a previous release without the leak. These small things can save you tens if not hundreds of profiling hours. Regardless of where you choose to start, pprof can come to your aid. Pprof is Golang’s profiling tool which allows you to take cpu, heap, OS thread and goroutines profiles and compare them visually.</p>\n<h3 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h3><ul>\n<li><a href=\"https://go101.org/article/memory-leaking.html\">memory-leaking</a></li>\n<li><a href=\"https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/\">how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/\">how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Recently, I had a memory leak in production. I saw that a specific service’s memory steadily rises when under load, until the process hits an out of memory exception. After a thorough investigation, I found out the source of the memory leak as well as the reason to why it happened in the first place. To diagnose the problem, I used Golang’s profiling tool called <code>pprof</code>.\nIn this post, I will explain what is pprof and show how I diagnosed the memory leak.</p>\n<h3 id=\"Preface\"><a href=\"#Preface\" class=\"headerlink\" title=\"Preface\"></a>Preface</h3><p>Our clients use our system through a proxy service, to which, we provide access to. The said memory leak happened in the proxy service.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>Some of the images here will be cropped and missing some information due to security reasons.</p>\n<h3 id=\"The-Memory-Leak\"><a href=\"#The-Memory-Leak\" class=\"headerlink\" title=\"The Memory Leak\"></a>The Memory Leak</h3><p>After getting complaints from clients about hiccups and disconnects, I started digging for the problem.<br>First thing I did, was go into the company’s Grafana and check the memory and cpu of the proxy service.<br>I looked at the service and compared metrics from 3 different scenarios:</p>\n<ul>\n<li>Service is after restart and idle</li>\n<li>Service is under load</li>\n<li>Service was under load and now idle</li>\n</ul>\n<p>All the overlapping lines below are idle instances of the service, only the green line gets traffic.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/leak.png\" alt></p>\n<p>There are a couple of obervations from the image above</p>\n<ul>\n<li>When the service is idle and there is no traffic, its memory stays low</li>\n<li>After traffic stops hitting the single instance, its memory level drops but stays well above the others.</li>\n</ul>\n<p>Before jumping on a profiling adventure (some may call it a nightmare), I made a small checklist of things I wanted to exclude:</p>\n<ul>\n<li>I was using Golang version 1.12.5, so I wanted to make sure that the potential leak was not coming from the runtime (even runtimes have issues). A good place to start is by looking at <a href=\"https://github.com/golang/go/issues\">open issues on the github page</a></li>\n<li>Try agressive garbage collection using <a href=\"https://golang.org/pkg/runtime/debug/#SetGCPercent\">debug.SetGCPercent(10)</a></li>\n<li>Try Manual <a href=\"https://golang.org/pkg/runtime/debug/#FreeOSMemory\">debug.FreeOSMemory()</a>. Runtimes are all about performance, after memory has been garbage collected, it is not freed back to the OS immediately for performance reasons.</li>\n<li>Try to reproduce the leak in a staging environment with a small load test to confirm my suspicions.</li>\n</ul>\n<p>After completing my checklist and seeing the leak was still present and that it was reproducible, I started profiling the service with pprof.</p>\n<h3 id=\"Golang’s-Profiling-Tool-pprof\"><a href=\"#Golang’s-Profiling-Tool-pprof\" class=\"headerlink\" title=\"Golang’s Profiling Tool - pprof\"></a>Golang’s Profiling Tool - pprof</h3><p>From the <a href=\"https://github.com/google/pprof\">pproff github page</a></p>\n<blockquote>\n<p>pprof is a tool for visualization and analysis of profiling data.<br>pprof reads a collection of profiling samples in profile.proto format and generates reports to visualize and help analyze the data. It can generate both text and graphical reports (through the use of the dot visualization package).</p>\n</blockquote>\n<h4 id=\"Profiling-Types\"><a href=\"#Profiling-Types\" class=\"headerlink\" title=\"Profiling Types\"></a>Profiling Types</h4><p>There are several profiles you can collect</p>\n<ul>\n<li>goroutine    - stack traces of all current goroutines</li>\n<li>heap         - a sampling of all heap allocations</li>\n<li>threadcreate - stack traces that led to the creation of new OS threads</li>\n<li>block        - stack traces that led to blocking on synchronization primitives</li>\n<li>mutex        - stack traces of holders of contended mutexes</li>\n<li>profile      - cpu profile</li>\n<li>trace        - allows collecting all the profiles for a certain duration</li>\n</ul>\n<h4 id=\"Profiling-Example\"><a href=\"#Profiling-Example\" class=\"headerlink\" title=\"Profiling Example\"></a>Profiling Example</h4><p>To start the profiling, I imported pprof and started an HTTP server for it.<br>Note, that if you already have an HTTP server running, the import statement is sufficient.<br>I had a TCP server running, so I added another goroutine to listen on a separate port for the pprof.</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;net/http/pprof&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tlog.Println(http.ListenAndServe(<span class=\"string\">&quot;localhost:6060&quot;</span>, <span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>For memory leaks, we want to start with the heap profile. </p>\n<p>To capture a profile we run <code>curl http://localhost:6060/debug/pprof/heap?seconds=30 &gt; heap.out</code>.</p>\n<p>To inspect a profile we run <code>go tool pprof heap.out</code>.</p>\n<p>There are two types of allocations the profile will collect</p>\n<ul>\n<li><p>in_use - current allocations<br><img src=\"/2020/11/07/Golang-Memory-Leaks/pprof_inuse_space.png\" alt></p>\n</li>\n<li><p>alloc - total allocations since the program started running, regardless of whether the memory was freed or not.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/pprof_alloc_space.png\" alt></p>\n</li>\n</ul>\n<p>Entering top will display the top 10 results that make up the most memory consumers. We can write any number after top to see the top results.<br>We have two important fields to look out for</p>\n<ul>\n<li>flat - how much memory is allocated by this function</li>\n<li>cum - how much cumulative memory is allocated by this function or a function it called down the stack</li>\n</ul>\n<p>pprof also has a web interface to visually examine the profile.<br>To run pprof with the web ui run <code>go tool pprof -http=&#39;:8081&#39; heap.out</code>, notice the http flag.<br>The biggest memory consumers in the profile collected will be shown as red, which are your points of reference.<br>We can see in the image below, that there are two red paths, one for the http server and one for runtime.malg</p>\n<p><img src=\"/2020/11/07/Golang-Memory-Leaks/malg.png\" alt></p>\n<h3 id=\"Diagnosing-the-Leak\"><a href=\"#Diagnosing-the-Leak\" class=\"headerlink\" title=\"Diagnosing the Leak\"></a>Diagnosing the Leak</h3><p>Pprof has another helpful feature that allows comparing profiles using the <code>-base</code> and the <code>-diff_base</code> flags.<br>We run it like so <code>go tool pprof -http=&#39;:8081&#39; -diff_base heap-new-16:22:04:N.out heap-new-17:32:38:N.out</code></p>\n<p>After collecting a 30 second profile before and after a service got traffic, I compared the profiles. Immediately, <code>runtime.malg</code> that grew in memory caught my eye.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/malg3.png\" alt></p>\n<p>At idle runtime.malg was around 1MB and it grew to 38MB.<br>When creating a new goroutine the runtime.malg function is called. It allocates a stack trace for the newly created goroutine and holds a reference to it until the goroutine finishes execution.<br><img src=\"/2020/11/07/Golang-Memory-Leaks/malg2.png\" alt></p>\n<h3 id=\"The-Fix\"><a href=\"#The-Fix\" class=\"headerlink\" title=\"The Fix\"></a>The Fix</h3><p>By now, pprof pointed me towards runtime.malg, that held all goroutine descriptors, which did not get garbage collected.<br>A goroutine that is never garbage collected means it never finishes execution, which happens on two occasions</p>\n<ul>\n<li>A <code>for&#123;&#125;</code> or a <code>select&#123;&#125;</code> loop without a stopping condition</li>\n<li>A <code>channel</code> that waits for messages and is not getting closed properly</li>\n</ul>\n<p>To confirm my suspicions, I took a goroutine profile, which looked like this<br><img src=\"/2020/11/07/Golang-Memory-Leaks/goroutines.png\" alt></p>\n<p>The profile above shows that I have a lot of goroutines spawned that are doing nothing , because they are waiting on a channel.</p>\n<p>I immediately looked at the piece of code that the profile above points at and found the following</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> &lt;-sa.reader.C:</span><br><span class=\"line\">      sa.read()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n\n<p>The goroutine has a for loop which always listens on a channel from <code>time.Ticker</code>.\nChecking how the stopping of the time.Ticker occurs looks like this</p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sa.reader.Stop()</span><br></pre></td></tr></table></figure>\n\n<p>Looking at the <a href=\"https://golang.org/pkg/time/#Ticker.Stop\">documentation</a> of time.Ticker, I noticed this</p>\n<blockquote>\n<p>Stop turns off a ticker. After Stop, no more ticks will be sent. <code>Stop does not close the channel</code>, to prevent a concurrent goroutine reading from the channel from seeing an erroneous “tick”. </p>\n</blockquote>\n<p>It immediately struck me, the channel is never getting closed, which leaves the goroutine in a waiting state forever, which leads to the runtime.malg to accumulate gouroutine descriptors, which increases the heap until we reach OOM exception.</p>\n<p>I added a done channel to the goroutine and made sure to close it on <code>ticker.Stop()</code></p>\n<figure class=\"highlight golang\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Reader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\treader            *time.Ticker</span><br><span class=\"line\">\treaderDone        <span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewReader</span><span class=\"params\">()</span> *<span class=\"title\">Reader</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Reader&#123;</span><br><span class=\"line\">    readerDone: <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>, <span class=\"number\">1</span>),</span><br><span class=\"line\">    reader: time.NewTicker(time.Second * <span class=\"number\">5</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// creation of ticker</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Reader)</span> <span class=\"title\">Read</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-r.reader.C: <span class=\"comment\">// previously stuck here indefinitely</span></span><br><span class=\"line\">        <span class=\"comment\">// do something</span></span><br><span class=\"line\">      <span class=\"keyword\">case</span> &lt;-r.readerDone:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"comment\">// when done channel receives value the return causes the function to exit</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// other place in the code</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *Reader)</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  r.reader.Stop()</span><br><span class=\"line\">  r.readerDone &lt;- <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>The memory leak above turned out to be a forgotten channel that caused a goroutine leak. A goroutine leak happens when goroutines never finish execution, which leads to their stack stay on the heap and never get garbage collected, which eventually leads to an out of memory exception.<br>The cause of memory leaks will <strong>almost</strong> always be from your applications side, but as I crunched through several of them, I noticed it is easier to start with the small things, like, checking the runtime Github page for new issues, or, if the leak started after a new release, comparing it to a previous release without the leak. These small things can save you tens if not hundreds of profiling hours. Regardless of where you choose to start, pprof can come to your aid. Pprof is Golang’s profiling tool which allows you to take cpu, heap, OS thread and goroutines profiles and compare them visually.</p>\n<h3 id=\"Bibliography\"><a href=\"#Bibliography\" class=\"headerlink\" title=\"Bibliography\"></a>Bibliography</h3><ul>\n<li><a href=\"https://go101.org/article/memory-leaking.html\">memory-leaking</a></li>\n<li><a href=\"https://blog.detectify.com/2019/09/05/how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices/\">how-we-tracked-down-a-memory-leak-in-one-of-our-go-microservices</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase-4bec4325e192/\">how-i-investigated-memory-leaks-in-go-using-pprof-on-a-large-codebase</a></li>\n</ul>\n"},{"title":"Switching From Node.js to Elixir","date":"2019-06-17T18:11:52.000Z","_content":"After writing software for the past 6 years, I realized that the implementations that we write are far more important than the languages we choose, but, having a developer friendly, safe, strict language, can guide you towards better implementations. That is why I set out to search for a new programming language, that will replace my daily driver - `Node.js`. \nIn a search for a new programming language, I asked myself two questions - *what are the must-have features I expect from a programming language?* and *do its pros outweigh its cons?*\nIn this post, I will weigh some of Javascript's pros and cons, later on, I will list the features, I believe, a programming language should have, afterwards, I will explain why I chose to learn `Elixir` and at last, I will weigh Elixir's pros and cons.\n\n## Javscript - The Pros\n  1. Low development times - it is very easy to get started with Javascript\n  2. The biggest community in the world - thousands of questions on stackoverflow and npm - the biggest package registry in the world.\n  3. A lot of battle-tested frameworks and projects online - due to the popularity, there are a lot of open source projects out there.\n  4. Hiring is easier than other languages due to the popularity.\n  5. Runs on both the browser and the server - great for front end developers that want or need to make the switch.\n\n## Javascript - The Cons \n  1. Single threaded - If you have a long running sync operation, your entire application will halt.\n  2. Memory leaks are hard to diagnose and will bite without large amounts of debugging and profiling.\n  3. As easy as it is to start programming in Node.js, as hard it is to master it. The event loop, which I had covered extensively [in my previous post](/2019/06/09/Node-JS-Event-Loop-0/), is not a simple beast to handle.\n  4. The coupling to npm. I had several times where `npm install` failed in production because of some strange dependency not getting installed even though it was available in the registry. I even had published packages disappear into thin air.\n  5. The hybrid approach - The JS community advocates that it is great that you can write the same thing in a lot of ways, both in the `Object Oriented` and `Functional` programming paradigms, but in reality, not having a unified approach to writing code leads to worse codebases, especially in large groups with tens of developers from different backgrounds.\n\n## Do Javascript's pros outweigh its cons ?\nAfter having to deal with nasty memory leaks, tough debugging sessions and data being mutated wherever and whenever, I decided to tilt towards **no**. The single threaded nature is both good and bad, the syntax changes so fast, I have seen callbacks wrapped in promises and awaited on using the new async await syntax and debugging in production **can** be a nightmare in large projects.\n\n\n## What are some of the things I expect from a programming language\n  1. Functional programming paradigm - Writing in a functional style for the past 3 years with [Ramda.js](https://ramdajs.com/) has taught me a lot and I wanted a purely functional language. Switching to legacy projects written in an OO way always felt harder to reason about. I believe currying, functions as first class citizens and data immutability helps with the struggles of debugging.\n  2. Language syntax - I wanted a simple to understand syntax that has no drastic changes throughout its lifespan.\n  3. Compiled language - If everything compiled, I can sleep better at night. I am not expecting runtime errors to be unheard of, but, if I can minimize them, why not?\n  4. Good standard library - To minimize the need for 3rd party modules.\n  5. Strong community - For when I have a non trivial problem at hand.\n  6. Concurrency - I want a language that can handle concurrency, without worrying about a single thread struggling to keep up or handling a threadpool and the accompanied mutexes/locks/deadlocks.\n\nAfter playing with a few languages, I stumbled across Elixir.\n\n## What is Elixir ?\nfrom the elixir [website](https://elixir-lang.org/)\n> Elixir is a dynamic, functional language designed for building scalable and maintainable applications. Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.\n\nAfter reading the initial documentation, seeing that there is less than 10 open issues in the language's [github](https://github.com/elixir-lang/elixir) and writing a couple of projects for the past few months, I came back to my list and looked if `Elixir` has ticked all the boxes.\n  - [x] *Is it Functional?*\n  - [x] *Is the syntax simple?* inspired by `Ruby`, which is very easy to understand.\n  - [x] *Is is compiled?* It is still dynamic typed though, so run time type errors will occur, but Elixir has guards and pattern matching for that.\n  - [x] *Does it have a good standard library?* It has a detailed and well documented standard library.\n  - [X] *Is the community active?* Elixir has its own forums, which are really active.\n  - [X] *Is it concurrent?* All Elixir code runs inside lightweight threads of execution (called processes) that are isolated and exchange information via messages - [Actor Model](https://en.wikipedia.org/wiki/Actor_model).\n\n## Elixir - The Pros\n  1. Highly concurrent - thanks to the Actor Model\n  2. Functional - so we gain data immutability\n  3. Scalable - distrubution of work across multiple nodes and communication is baked in the Erlang VM. \n  4. Highly available - Due to their lightweight nature, it is not uncommon to have hundreds of thousands of processes running concurrently in the same machine. Isolation allows processes to be garbage collected independently, reducing system-wide pauses, and using all machine resources as efficiently as possible (vertical scaling).\n  5. Pattern matching - Elixir has pattern matching and guard clauses.\n\n## Elixir - The Cons\n  1. Young - It will take time until Elixir matures and shapes to a full featured language.\n  2. Functional programming paradigm is difficult to learn.\n  3. Hiring will be a pain as there are not a lot of experts in this domain.\n  4. Up until v1.9 it was very confusing on how to compile a release.\n  5. Raw processing - If all you do is number crunching, maybe you are better of with a different language. Elixir puts an emphasis on being highly concurrent and fault tolerant, but there are better languages out there for raw processing power.\n\n## Do Elixir's Pros outweigh its cons ?\nCompanies, like Pinterest and Discord use Elixir for their highly sensitive systems and are very happy with the results. The language has a great standard library, good community, great debugging tools, like remote host connect and real time process inspections. The Erlang VM utilizes all of the machines resources and provides a full featured and stable runtime. My answer for now, will be - **yes**.","source":"_posts/Switching-From-Node.js-To-Elixir.md","raw":"---\ntitle: Switching from Node.js to Elixir\ndate: 2019-06-17 21:11:52\ncategory: Programming\ntags: \n  - Elixir\n  - Actor Model\n  - Functional\n  - Node.js\n---\nAfter writing software for the past 6 years, I realized that the implementations that we write are far more important than the languages we choose, but, having a developer friendly, safe, strict language, can guide you towards better implementations. That is why I set out to search for a new programming language, that will replace my daily driver - `Node.js`. \nIn a search for a new programming language, I asked myself two questions - *what are the must-have features I expect from a programming language?* and *do its pros outweigh its cons?*\nIn this post, I will weigh some of Javascript's pros and cons, later on, I will list the features, I believe, a programming language should have, afterwards, I will explain why I chose to learn `Elixir` and at last, I will weigh Elixir's pros and cons.\n\n## Javscript - The Pros\n  1. Low development times - it is very easy to get started with Javascript\n  2. The biggest community in the world - thousands of questions on stackoverflow and npm - the biggest package registry in the world.\n  3. A lot of battle-tested frameworks and projects online - due to the popularity, there are a lot of open source projects out there.\n  4. Hiring is easier than other languages due to the popularity.\n  5. Runs on both the browser and the server - great for front end developers that want or need to make the switch.\n\n## Javascript - The Cons \n  1. Single threaded - If you have a long running sync operation, your entire application will halt.\n  2. Memory leaks are hard to diagnose and will bite without large amounts of debugging and profiling.\n  3. As easy as it is to start programming in Node.js, as hard it is to master it. The event loop, which I had covered extensively [in my previous post](/2019/06/09/Node-JS-Event-Loop-0/), is not a simple beast to handle.\n  4. The coupling to npm. I had several times where `npm install` failed in production because of some strange dependency not getting installed even though it was available in the registry. I even had published packages disappear into thin air.\n  5. The hybrid approach - The JS community advocates that it is great that you can write the same thing in a lot of ways, both in the `Object Oriented` and `Functional` programming paradigms, but in reality, not having a unified approach to writing code leads to worse codebases, especially in large groups with tens of developers from different backgrounds.\n\n## Do Javascript's pros outweigh its cons ?\nAfter having to deal with nasty memory leaks, tough debugging sessions and data being mutated wherever and whenever, I decided to tilt towards **no**. The single threaded nature is both good and bad, the syntax changes so fast, I have seen callbacks wrapped in promises and awaited on using the new async await syntax and debugging in production **can** be a nightmare in large projects.\n\n\n## What are some of the things I expect from a programming language\n  1. Functional programming paradigm - Writing in a functional style for the past 3 years with [Ramda.js](https://ramdajs.com/) has taught me a lot and I wanted a purely functional language. Switching to legacy projects written in an OO way always felt harder to reason about. I believe currying, functions as first class citizens and data immutability helps with the struggles of debugging.\n  2. Language syntax - I wanted a simple to understand syntax that has no drastic changes throughout its lifespan.\n  3. Compiled language - If everything compiled, I can sleep better at night. I am not expecting runtime errors to be unheard of, but, if I can minimize them, why not?\n  4. Good standard library - To minimize the need for 3rd party modules.\n  5. Strong community - For when I have a non trivial problem at hand.\n  6. Concurrency - I want a language that can handle concurrency, without worrying about a single thread struggling to keep up or handling a threadpool and the accompanied mutexes/locks/deadlocks.\n\nAfter playing with a few languages, I stumbled across Elixir.\n\n## What is Elixir ?\nfrom the elixir [website](https://elixir-lang.org/)\n> Elixir is a dynamic, functional language designed for building scalable and maintainable applications. Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.\n\nAfter reading the initial documentation, seeing that there is less than 10 open issues in the language's [github](https://github.com/elixir-lang/elixir) and writing a couple of projects for the past few months, I came back to my list and looked if `Elixir` has ticked all the boxes.\n  - [x] *Is it Functional?*\n  - [x] *Is the syntax simple?* inspired by `Ruby`, which is very easy to understand.\n  - [x] *Is is compiled?* It is still dynamic typed though, so run time type errors will occur, but Elixir has guards and pattern matching for that.\n  - [x] *Does it have a good standard library?* It has a detailed and well documented standard library.\n  - [X] *Is the community active?* Elixir has its own forums, which are really active.\n  - [X] *Is it concurrent?* All Elixir code runs inside lightweight threads of execution (called processes) that are isolated and exchange information via messages - [Actor Model](https://en.wikipedia.org/wiki/Actor_model).\n\n## Elixir - The Pros\n  1. Highly concurrent - thanks to the Actor Model\n  2. Functional - so we gain data immutability\n  3. Scalable - distrubution of work across multiple nodes and communication is baked in the Erlang VM. \n  4. Highly available - Due to their lightweight nature, it is not uncommon to have hundreds of thousands of processes running concurrently in the same machine. Isolation allows processes to be garbage collected independently, reducing system-wide pauses, and using all machine resources as efficiently as possible (vertical scaling).\n  5. Pattern matching - Elixir has pattern matching and guard clauses.\n\n## Elixir - The Cons\n  1. Young - It will take time until Elixir matures and shapes to a full featured language.\n  2. Functional programming paradigm is difficult to learn.\n  3. Hiring will be a pain as there are not a lot of experts in this domain.\n  4. Up until v1.9 it was very confusing on how to compile a release.\n  5. Raw processing - If all you do is number crunching, maybe you are better of with a different language. Elixir puts an emphasis on being highly concurrent and fault tolerant, but there are better languages out there for raw processing power.\n\n## Do Elixir's Pros outweigh its cons ?\nCompanies, like Pinterest and Discord use Elixir for their highly sensitive systems and are very happy with the results. The language has a great standard library, good community, great debugging tools, like remote host connect and real time process inspections. The Erlang VM utilizes all of the machines resources and provides a full featured and stable runtime. My answer for now, will be - **yes**.","slug":"Switching-From-Node.js-To-Elixir","published":1,"updated":"2021-07-08T17:55:19.471Z","_id":"ckravj1mz000u78taes2ldcuq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After writing software for the past 6 years, I realized that the implementations that we write are far more important than the languages we choose, but, having a developer friendly, safe, strict language, can guide you towards better implementations. That is why I set out to search for a new programming language, that will replace my daily driver - <code>Node.js</code>. \nIn a search for a new programming language, I asked myself two questions - <em>what are the must-have features I expect from a programming language?</em> and <em>do its pros outweigh its cons?</em><br>In this post, I will weigh some of Javascript’s pros and cons, later on, I will list the features, I believe, a programming language should have, afterwards, I will explain why I chose to learn <code>Elixir</code> and at last, I will weigh Elixir’s pros and cons.</p>\n<h2 id=\"Javscript-The-Pros\"><a href=\"#Javscript-The-Pros\" class=\"headerlink\" title=\"Javscript - The Pros\"></a>Javscript - The Pros</h2><ol>\n<li>Low development times - it is very easy to get started with Javascript</li>\n<li>The biggest community in the world - thousands of questions on stackoverflow and npm - the biggest package registry in the world.</li>\n<li>A lot of battle-tested frameworks and projects online - due to the popularity, there are a lot of open source projects out there.</li>\n<li>Hiring is easier than other languages due to the popularity.</li>\n<li>Runs on both the browser and the server - great for front end developers that want or need to make the switch.</li>\n</ol>\n<h2 id=\"Javascript-The-Cons\"><a href=\"#Javascript-The-Cons\" class=\"headerlink\" title=\"Javascript - The Cons\"></a>Javascript - The Cons</h2><ol>\n<li>Single threaded - If you have a long running sync operation, your entire application will halt.</li>\n<li>Memory leaks are hard to diagnose and will bite without large amounts of debugging and profiling.</li>\n<li>As easy as it is to start programming in Node.js, as hard it is to master it. The event loop, which I had covered extensively <a href=\"/2019/06/09/Node-JS-Event-Loop-0/\">in my previous post</a>, is not a simple beast to handle.</li>\n<li>The coupling to npm. I had several times where <code>npm install</code> failed in production because of some strange dependency not getting installed even though it was available in the registry. I even had published packages disappear into thin air.</li>\n<li>The hybrid approach - The JS community advocates that it is great that you can write the same thing in a lot of ways, both in the <code>Object Oriented</code> and <code>Functional</code> programming paradigms, but in reality, not having a unified approach to writing code leads to worse codebases, especially in large groups with tens of developers from different backgrounds.</li>\n</ol>\n<h2 id=\"Do-Javascript’s-pros-outweigh-its-cons\"><a href=\"#Do-Javascript’s-pros-outweigh-its-cons\" class=\"headerlink\" title=\"Do Javascript’s pros outweigh its cons ?\"></a>Do Javascript’s pros outweigh its cons ?</h2><p>After having to deal with nasty memory leaks, tough debugging sessions and data being mutated wherever and whenever, I decided to tilt towards <strong>no</strong>. The single threaded nature is both good and bad, the syntax changes so fast, I have seen callbacks wrapped in promises and awaited on using the new async await syntax and debugging in production <strong>can</strong> be a nightmare in large projects.</p>\n<h2 id=\"What-are-some-of-the-things-I-expect-from-a-programming-language\"><a href=\"#What-are-some-of-the-things-I-expect-from-a-programming-language\" class=\"headerlink\" title=\"What are some of the things I expect from a programming language\"></a>What are some of the things I expect from a programming language</h2><ol>\n<li>Functional programming paradigm - Writing in a functional style for the past 3 years with <a href=\"https://ramdajs.com/\">Ramda.js</a> has taught me a lot and I wanted a purely functional language. Switching to legacy projects written in an OO way always felt harder to reason about. I believe currying, functions as first class citizens and data immutability helps with the struggles of debugging.</li>\n<li>Language syntax - I wanted a simple to understand syntax that has no drastic changes throughout its lifespan.</li>\n<li>Compiled language - If everything compiled, I can sleep better at night. I am not expecting runtime errors to be unheard of, but, if I can minimize them, why not?</li>\n<li>Good standard library - To minimize the need for 3rd party modules.</li>\n<li>Strong community - For when I have a non trivial problem at hand.</li>\n<li>Concurrency - I want a language that can handle concurrency, without worrying about a single thread struggling to keep up or handling a threadpool and the accompanied mutexes/locks/deadlocks.</li>\n</ol>\n<p>After playing with a few languages, I stumbled across Elixir.</p>\n<h2 id=\"What-is-Elixir\"><a href=\"#What-is-Elixir\" class=\"headerlink\" title=\"What is Elixir ?\"></a>What is Elixir ?</h2><p>from the elixir <a href=\"https://elixir-lang.org/\">website</a></p>\n<blockquote>\n<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications. Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.</p>\n</blockquote>\n<p>After reading the initial documentation, seeing that there is less than 10 open issues in the language’s <a href=\"https://github.com/elixir-lang/elixir\">github</a> and writing a couple of projects for the past few months, I came back to my list and looked if <code>Elixir</code> has ticked all the boxes.</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <em>Is it Functional?</em></li>\n<li><input checked disabled type=\"checkbox\"> <em>Is the syntax simple?</em> inspired by <code>Ruby</code>, which is very easy to understand.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is is compiled?</em> It is still dynamic typed though, so run time type errors will occur, but Elixir has guards and pattern matching for that.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Does it have a good standard library?</em> It has a detailed and well documented standard library.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is the community active?</em> Elixir has its own forums, which are really active.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is it concurrent?</em> All Elixir code runs inside lightweight threads of execution (called processes) that are isolated and exchange information via messages - <a href=\"https://en.wikipedia.org/wiki/Actor_model\">Actor Model</a>.</li>\n</ul>\n<h2 id=\"Elixir-The-Pros\"><a href=\"#Elixir-The-Pros\" class=\"headerlink\" title=\"Elixir - The Pros\"></a>Elixir - The Pros</h2><ol>\n<li>Highly concurrent - thanks to the Actor Model</li>\n<li>Functional - so we gain data immutability</li>\n<li>Scalable - distrubution of work across multiple nodes and communication is baked in the Erlang VM. </li>\n<li>Highly available - Due to their lightweight nature, it is not uncommon to have hundreds of thousands of processes running concurrently in the same machine. Isolation allows processes to be garbage collected independently, reducing system-wide pauses, and using all machine resources as efficiently as possible (vertical scaling).</li>\n<li>Pattern matching - Elixir has pattern matching and guard clauses.</li>\n</ol>\n<h2 id=\"Elixir-The-Cons\"><a href=\"#Elixir-The-Cons\" class=\"headerlink\" title=\"Elixir - The Cons\"></a>Elixir - The Cons</h2><ol>\n<li>Young - It will take time until Elixir matures and shapes to a full featured language.</li>\n<li>Functional programming paradigm is difficult to learn.</li>\n<li>Hiring will be a pain as there are not a lot of experts in this domain.</li>\n<li>Up until v1.9 it was very confusing on how to compile a release.</li>\n<li>Raw processing - If all you do is number crunching, maybe you are better of with a different language. Elixir puts an emphasis on being highly concurrent and fault tolerant, but there are better languages out there for raw processing power.</li>\n</ol>\n<h2 id=\"Do-Elixir’s-Pros-outweigh-its-cons\"><a href=\"#Do-Elixir’s-Pros-outweigh-its-cons\" class=\"headerlink\" title=\"Do Elixir’s Pros outweigh its cons ?\"></a>Do Elixir’s Pros outweigh its cons ?</h2><p>Companies, like Pinterest and Discord use Elixir for their highly sensitive systems and are very happy with the results. The language has a great standard library, good community, great debugging tools, like remote host connect and real time process inspections. The Erlang VM utilizes all of the machines resources and provides a full featured and stable runtime. My answer for now, will be - <strong>yes</strong>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After writing software for the past 6 years, I realized that the implementations that we write are far more important than the languages we choose, but, having a developer friendly, safe, strict language, can guide you towards better implementations. That is why I set out to search for a new programming language, that will replace my daily driver - <code>Node.js</code>. \nIn a search for a new programming language, I asked myself two questions - <em>what are the must-have features I expect from a programming language?</em> and <em>do its pros outweigh its cons?</em><br>In this post, I will weigh some of Javascript’s pros and cons, later on, I will list the features, I believe, a programming language should have, afterwards, I will explain why I chose to learn <code>Elixir</code> and at last, I will weigh Elixir’s pros and cons.</p>\n<h2 id=\"Javscript-The-Pros\"><a href=\"#Javscript-The-Pros\" class=\"headerlink\" title=\"Javscript - The Pros\"></a>Javscript - The Pros</h2><ol>\n<li>Low development times - it is very easy to get started with Javascript</li>\n<li>The biggest community in the world - thousands of questions on stackoverflow and npm - the biggest package registry in the world.</li>\n<li>A lot of battle-tested frameworks and projects online - due to the popularity, there are a lot of open source projects out there.</li>\n<li>Hiring is easier than other languages due to the popularity.</li>\n<li>Runs on both the browser and the server - great for front end developers that want or need to make the switch.</li>\n</ol>\n<h2 id=\"Javascript-The-Cons\"><a href=\"#Javascript-The-Cons\" class=\"headerlink\" title=\"Javascript - The Cons\"></a>Javascript - The Cons</h2><ol>\n<li>Single threaded - If you have a long running sync operation, your entire application will halt.</li>\n<li>Memory leaks are hard to diagnose and will bite without large amounts of debugging and profiling.</li>\n<li>As easy as it is to start programming in Node.js, as hard it is to master it. The event loop, which I had covered extensively <a href=\"/2019/06/09/Node-JS-Event-Loop-0/\">in my previous post</a>, is not a simple beast to handle.</li>\n<li>The coupling to npm. I had several times where <code>npm install</code> failed in production because of some strange dependency not getting installed even though it was available in the registry. I even had published packages disappear into thin air.</li>\n<li>The hybrid approach - The JS community advocates that it is great that you can write the same thing in a lot of ways, both in the <code>Object Oriented</code> and <code>Functional</code> programming paradigms, but in reality, not having a unified approach to writing code leads to worse codebases, especially in large groups with tens of developers from different backgrounds.</li>\n</ol>\n<h2 id=\"Do-Javascript’s-pros-outweigh-its-cons\"><a href=\"#Do-Javascript’s-pros-outweigh-its-cons\" class=\"headerlink\" title=\"Do Javascript’s pros outweigh its cons ?\"></a>Do Javascript’s pros outweigh its cons ?</h2><p>After having to deal with nasty memory leaks, tough debugging sessions and data being mutated wherever and whenever, I decided to tilt towards <strong>no</strong>. The single threaded nature is both good and bad, the syntax changes so fast, I have seen callbacks wrapped in promises and awaited on using the new async await syntax and debugging in production <strong>can</strong> be a nightmare in large projects.</p>\n<h2 id=\"What-are-some-of-the-things-I-expect-from-a-programming-language\"><a href=\"#What-are-some-of-the-things-I-expect-from-a-programming-language\" class=\"headerlink\" title=\"What are some of the things I expect from a programming language\"></a>What are some of the things I expect from a programming language</h2><ol>\n<li>Functional programming paradigm - Writing in a functional style for the past 3 years with <a href=\"https://ramdajs.com/\">Ramda.js</a> has taught me a lot and I wanted a purely functional language. Switching to legacy projects written in an OO way always felt harder to reason about. I believe currying, functions as first class citizens and data immutability helps with the struggles of debugging.</li>\n<li>Language syntax - I wanted a simple to understand syntax that has no drastic changes throughout its lifespan.</li>\n<li>Compiled language - If everything compiled, I can sleep better at night. I am not expecting runtime errors to be unheard of, but, if I can minimize them, why not?</li>\n<li>Good standard library - To minimize the need for 3rd party modules.</li>\n<li>Strong community - For when I have a non trivial problem at hand.</li>\n<li>Concurrency - I want a language that can handle concurrency, without worrying about a single thread struggling to keep up or handling a threadpool and the accompanied mutexes/locks/deadlocks.</li>\n</ol>\n<p>After playing with a few languages, I stumbled across Elixir.</p>\n<h2 id=\"What-is-Elixir\"><a href=\"#What-is-Elixir\" class=\"headerlink\" title=\"What is Elixir ?\"></a>What is Elixir ?</h2><p>from the elixir <a href=\"https://elixir-lang.org/\">website</a></p>\n<blockquote>\n<p>Elixir is a dynamic, functional language designed for building scalable and maintainable applications. Elixir leverages the Erlang VM, known for running low-latency, distributed and fault-tolerant systems, while also being successfully used in web development and the embedded software domain.</p>\n</blockquote>\n<p>After reading the initial documentation, seeing that there is less than 10 open issues in the language’s <a href=\"https://github.com/elixir-lang/elixir\">github</a> and writing a couple of projects for the past few months, I came back to my list and looked if <code>Elixir</code> has ticked all the boxes.</p>\n<ul>\n<li><input checked disabled type=\"checkbox\"> <em>Is it Functional?</em></li>\n<li><input checked disabled type=\"checkbox\"> <em>Is the syntax simple?</em> inspired by <code>Ruby</code>, which is very easy to understand.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is is compiled?</em> It is still dynamic typed though, so run time type errors will occur, but Elixir has guards and pattern matching for that.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Does it have a good standard library?</em> It has a detailed and well documented standard library.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is the community active?</em> Elixir has its own forums, which are really active.</li>\n<li><input checked disabled type=\"checkbox\"> <em>Is it concurrent?</em> All Elixir code runs inside lightweight threads of execution (called processes) that are isolated and exchange information via messages - <a href=\"https://en.wikipedia.org/wiki/Actor_model\">Actor Model</a>.</li>\n</ul>\n<h2 id=\"Elixir-The-Pros\"><a href=\"#Elixir-The-Pros\" class=\"headerlink\" title=\"Elixir - The Pros\"></a>Elixir - The Pros</h2><ol>\n<li>Highly concurrent - thanks to the Actor Model</li>\n<li>Functional - so we gain data immutability</li>\n<li>Scalable - distrubution of work across multiple nodes and communication is baked in the Erlang VM. </li>\n<li>Highly available - Due to their lightweight nature, it is not uncommon to have hundreds of thousands of processes running concurrently in the same machine. Isolation allows processes to be garbage collected independently, reducing system-wide pauses, and using all machine resources as efficiently as possible (vertical scaling).</li>\n<li>Pattern matching - Elixir has pattern matching and guard clauses.</li>\n</ol>\n<h2 id=\"Elixir-The-Cons\"><a href=\"#Elixir-The-Cons\" class=\"headerlink\" title=\"Elixir - The Cons\"></a>Elixir - The Cons</h2><ol>\n<li>Young - It will take time until Elixir matures and shapes to a full featured language.</li>\n<li>Functional programming paradigm is difficult to learn.</li>\n<li>Hiring will be a pain as there are not a lot of experts in this domain.</li>\n<li>Up until v1.9 it was very confusing on how to compile a release.</li>\n<li>Raw processing - If all you do is number crunching, maybe you are better of with a different language. Elixir puts an emphasis on being highly concurrent and fault tolerant, but there are better languages out there for raw processing power.</li>\n</ol>\n<h2 id=\"Do-Elixir’s-Pros-outweigh-its-cons\"><a href=\"#Do-Elixir’s-Pros-outweigh-its-cons\" class=\"headerlink\" title=\"Do Elixir’s Pros outweigh its cons ?\"></a>Do Elixir’s Pros outweigh its cons ?</h2><p>Companies, like Pinterest and Discord use Elixir for their highly sensitive systems and are very happy with the results. The language has a great standard library, good community, great debugging tools, like remote host connect and real time process inspections. The Erlang VM utilizes all of the machines resources and provides a full featured and stable runtime. My answer for now, will be - <strong>yes</strong>.</p>\n"},{"title":"Microservices Epiphany","date":"2019-07-15T21:46:10.000Z","thumbnail":"images/what.jpg","_content":"The majority of the posts I see about microservices talk about the differences vs monoliths and how everyone, including myself, is rushing to build microservices in this fast paced world we live in. Recently, I read *Implementing Domain Driven Design* by Vaughn Vernon, which seemed unrelated to microservices at first but soon changed my perspective on things. What I experienced, like the title suggests, was an epiphany that I was building microservices wrong all along. In fact, I was building smaller monoliths, separated by a url subdomain. *Head Explodes!* In this short post, I will show a couple of symptoms that I found are a sign your microservices architecture might suffer in the long run.\n\n## Symptoms of a monolith\nOne of the things I noticed after practicing DDD for a while, was that all the services I recently wrote were small monoliths. I mention DDD due to the fact that I understood some concepts, like bounded contexts, context maps and etc that helped me question my past design choices. The **first symptom** is that your services do not communicate. If you have a microservices architecture, you should have a mesh of interconnected components, either RESTful or evented. In fact, if you had the \"joy\" between deciding where to join responses, either at the gateway level or at the service level, risking over coupling, it means you have services with some boundaries and you reuse past implementations. Otherwise, you simply have a bunch of services under the same domain.\n\n## Continuing the streak\nThe **second symptom** I noticed and the first thing that should have startled me a long time ago was a *one rules them all database*. My team and I had a legacy MongoDB Replica which was the only database we had and we tried building microservices while ignoring the database per service rule. Not only is it a single point of failure, but even worse, is the fact that, having everything stored in one place lures you in favor of adding *just* another feature that might not be related to a particular service and belongs in its own context. Of course this ends badly with monoliths bombed with 30 features each with non related behavior whatsoever and you excuse yourself with *Why should I duplicate the data, I have everything right here*. Obey the Rules!\n\n## How Domain Driven Design helped\nUnderstanding parts like where to set clear boundaries between services, defining a shared langauge with the domain experts, and seeking reuse together with careful design, led me to the understanding that things that might seem unrelated at first like DDD and microservices, have in fact so much in common. What I really mean is that when you looked at each component separately everything looked great, but when the entire infrastructure and services were charted **together**, things started to look disconnected and along came the epiphany accompanied with *What have I done!?*\n\n## Summary\nAfter all, there are hundreds, if not thousands of tutorials on how to build microservices out in the wild. So how come my team and I repeated the few things everyone warned us not to do. Maybe it was the laziness to refactor or the so-called \"developers ego\" or perhaps the notion of \"it works so why bother changing?\" Either way, learning something that seemed unrelated and applying it to something existing opened my eyes.","source":"_posts/Microservices-Epiphany.md","raw":"---\ntitle: Microservices Epiphany\ndate: 2019-07-16 00:46:10\ncategory: Architecture\ntags: \n  - Microservices\n  - DDD\n  - Maybe a rant\nthumbnail: images/what.jpg\n\n---\nThe majority of the posts I see about microservices talk about the differences vs monoliths and how everyone, including myself, is rushing to build microservices in this fast paced world we live in. Recently, I read *Implementing Domain Driven Design* by Vaughn Vernon, which seemed unrelated to microservices at first but soon changed my perspective on things. What I experienced, like the title suggests, was an epiphany that I was building microservices wrong all along. In fact, I was building smaller monoliths, separated by a url subdomain. *Head Explodes!* In this short post, I will show a couple of symptoms that I found are a sign your microservices architecture might suffer in the long run.\n\n## Symptoms of a monolith\nOne of the things I noticed after practicing DDD for a while, was that all the services I recently wrote were small monoliths. I mention DDD due to the fact that I understood some concepts, like bounded contexts, context maps and etc that helped me question my past design choices. The **first symptom** is that your services do not communicate. If you have a microservices architecture, you should have a mesh of interconnected components, either RESTful or evented. In fact, if you had the \"joy\" between deciding where to join responses, either at the gateway level or at the service level, risking over coupling, it means you have services with some boundaries and you reuse past implementations. Otherwise, you simply have a bunch of services under the same domain.\n\n## Continuing the streak\nThe **second symptom** I noticed and the first thing that should have startled me a long time ago was a *one rules them all database*. My team and I had a legacy MongoDB Replica which was the only database we had and we tried building microservices while ignoring the database per service rule. Not only is it a single point of failure, but even worse, is the fact that, having everything stored in one place lures you in favor of adding *just* another feature that might not be related to a particular service and belongs in its own context. Of course this ends badly with monoliths bombed with 30 features each with non related behavior whatsoever and you excuse yourself with *Why should I duplicate the data, I have everything right here*. Obey the Rules!\n\n## How Domain Driven Design helped\nUnderstanding parts like where to set clear boundaries between services, defining a shared langauge with the domain experts, and seeking reuse together with careful design, led me to the understanding that things that might seem unrelated at first like DDD and microservices, have in fact so much in common. What I really mean is that when you looked at each component separately everything looked great, but when the entire infrastructure and services were charted **together**, things started to look disconnected and along came the epiphany accompanied with *What have I done!?*\n\n## Summary\nAfter all, there are hundreds, if not thousands of tutorials on how to build microservices out in the wild. So how come my team and I repeated the few things everyone warned us not to do. Maybe it was the laziness to refactor or the so-called \"developers ego\" or perhaps the notion of \"it works so why bother changing?\" Either way, learning something that seemed unrelated and applying it to something existing opened my eyes.","slug":"Microservices-Epiphany","published":1,"updated":"2021-01-22T11:07:55.951Z","_id":"ckravj1n1000w78ta8x0d65u8","comments":1,"layout":"post","photos":[],"link":"","content":"<p>The majority of the posts I see about microservices talk about the differences vs monoliths and how everyone, including myself, is rushing to build microservices in this fast paced world we live in. Recently, I read <em>Implementing Domain Driven Design</em> by Vaughn Vernon, which seemed unrelated to microservices at first but soon changed my perspective on things. What I experienced, like the title suggests, was an epiphany that I was building microservices wrong all along. In fact, I was building smaller monoliths, separated by a url subdomain. <em>Head Explodes!</em> In this short post, I will show a couple of symptoms that I found are a sign your microservices architecture might suffer in the long run.</p>\n<h2 id=\"Symptoms-of-a-monolith\"><a href=\"#Symptoms-of-a-monolith\" class=\"headerlink\" title=\"Symptoms of a monolith\"></a>Symptoms of a monolith</h2><p>One of the things I noticed after practicing DDD for a while, was that all the services I recently wrote were small monoliths. I mention DDD due to the fact that I understood some concepts, like bounded contexts, context maps and etc that helped me question my past design choices. The <strong>first symptom</strong> is that your services do not communicate. If you have a microservices architecture, you should have a mesh of interconnected components, either RESTful or evented. In fact, if you had the “joy” between deciding where to join responses, either at the gateway level or at the service level, risking over coupling, it means you have services with some boundaries and you reuse past implementations. Otherwise, you simply have a bunch of services under the same domain.</p>\n<h2 id=\"Continuing-the-streak\"><a href=\"#Continuing-the-streak\" class=\"headerlink\" title=\"Continuing the streak\"></a>Continuing the streak</h2><p>The <strong>second symptom</strong> I noticed and the first thing that should have startled me a long time ago was a <em>one rules them all database</em>. My team and I had a legacy MongoDB Replica which was the only database we had and we tried building microservices while ignoring the database per service rule. Not only is it a single point of failure, but even worse, is the fact that, having everything stored in one place lures you in favor of adding <em>just</em> another feature that might not be related to a particular service and belongs in its own context. Of course this ends badly with monoliths bombed with 30 features each with non related behavior whatsoever and you excuse yourself with <em>Why should I duplicate the data, I have everything right here</em>. Obey the Rules!</p>\n<h2 id=\"How-Domain-Driven-Design-helped\"><a href=\"#How-Domain-Driven-Design-helped\" class=\"headerlink\" title=\"How Domain Driven Design helped\"></a>How Domain Driven Design helped</h2><p>Understanding parts like where to set clear boundaries between services, defining a shared langauge with the domain experts, and seeking reuse together with careful design, led me to the understanding that things that might seem unrelated at first like DDD and microservices, have in fact so much in common. What I really mean is that when you looked at each component separately everything looked great, but when the entire infrastructure and services were charted <strong>together</strong>, things started to look disconnected and along came the epiphany accompanied with <em>What have I done!?</em></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>After all, there are hundreds, if not thousands of tutorials on how to build microservices out in the wild. So how come my team and I repeated the few things everyone warned us not to do. Maybe it was the laziness to refactor or the so-called “developers ego” or perhaps the notion of “it works so why bother changing?” Either way, learning something that seemed unrelated and applying it to something existing opened my eyes.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The majority of the posts I see about microservices talk about the differences vs monoliths and how everyone, including myself, is rushing to build microservices in this fast paced world we live in. Recently, I read <em>Implementing Domain Driven Design</em> by Vaughn Vernon, which seemed unrelated to microservices at first but soon changed my perspective on things. What I experienced, like the title suggests, was an epiphany that I was building microservices wrong all along. In fact, I was building smaller monoliths, separated by a url subdomain. <em>Head Explodes!</em> In this short post, I will show a couple of symptoms that I found are a sign your microservices architecture might suffer in the long run.</p>\n<h2 id=\"Symptoms-of-a-monolith\"><a href=\"#Symptoms-of-a-monolith\" class=\"headerlink\" title=\"Symptoms of a monolith\"></a>Symptoms of a monolith</h2><p>One of the things I noticed after practicing DDD for a while, was that all the services I recently wrote were small monoliths. I mention DDD due to the fact that I understood some concepts, like bounded contexts, context maps and etc that helped me question my past design choices. The <strong>first symptom</strong> is that your services do not communicate. If you have a microservices architecture, you should have a mesh of interconnected components, either RESTful or evented. In fact, if you had the “joy” between deciding where to join responses, either at the gateway level or at the service level, risking over coupling, it means you have services with some boundaries and you reuse past implementations. Otherwise, you simply have a bunch of services under the same domain.</p>\n<h2 id=\"Continuing-the-streak\"><a href=\"#Continuing-the-streak\" class=\"headerlink\" title=\"Continuing the streak\"></a>Continuing the streak</h2><p>The <strong>second symptom</strong> I noticed and the first thing that should have startled me a long time ago was a <em>one rules them all database</em>. My team and I had a legacy MongoDB Replica which was the only database we had and we tried building microservices while ignoring the database per service rule. Not only is it a single point of failure, but even worse, is the fact that, having everything stored in one place lures you in favor of adding <em>just</em> another feature that might not be related to a particular service and belongs in its own context. Of course this ends badly with monoliths bombed with 30 features each with non related behavior whatsoever and you excuse yourself with <em>Why should I duplicate the data, I have everything right here</em>. Obey the Rules!</p>\n<h2 id=\"How-Domain-Driven-Design-helped\"><a href=\"#How-Domain-Driven-Design-helped\" class=\"headerlink\" title=\"How Domain Driven Design helped\"></a>How Domain Driven Design helped</h2><p>Understanding parts like where to set clear boundaries between services, defining a shared langauge with the domain experts, and seeking reuse together with careful design, led me to the understanding that things that might seem unrelated at first like DDD and microservices, have in fact so much in common. What I really mean is that when you looked at each component separately everything looked great, but when the entire infrastructure and services were charted <strong>together</strong>, things started to look disconnected and along came the epiphany accompanied with <em>What have I done!?</em></p>\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>After all, there are hundreds, if not thousands of tutorials on how to build microservices out in the wild. So how come my team and I repeated the few things everyone warned us not to do. Maybe it was the laziness to refactor or the so-called “developers ego” or perhaps the notion of “it works so why bother changing?” Either way, learning something that seemed unrelated and applying it to something existing opened my eyes.</p>\n"},{"title":"What Are Microservices","date":"2019-11-05T18:24:24.000Z","thumbnail":"images/legos-2.jpg","_content":"\nAfter having written and implemented several microservice architectures, I wanted to have a go at explaining microservices from my point of view and share my insights. In this post I will explain what are microservices, what are their pros and cons, how they communicate and the different approaches towards building microservices.\n\n## What are microservices\nThere are a lot of explanations out in the wild regarding what are microservices. Everyone keeps mentioning loose coupling and independant deployments, but in my experience, that is not always true. Sometimes, you will have to deploy several microservices together because they are coupled, a.k.a, orchestration. In my point of view, microservices need to control their own copy of the application data and they should be self contained, meaning, the business logic they handle should only be tied to a specific microservice and to it alone.\n\n## Microservices Pros\n  - The complexity of the app is too large for a single team/repo/server to handle\n  - Smaller codebase for each team to work on and **if possible** deploy independently\n  - Faster deployments\n  - Safer deployments, we avoid breaking the entire app, each of the services should be self contained\n  - Freedom in choosing tech stack, language, database as every service is independant and knows how to speak to the other services\n\n## Microservices Cons\n  - Having a lot of small services means a lot of deployments from various teams, you will need strong CI/CD tools and best practices to keep up.\n  - Integration testing and integration in general will be tougher, as in the real world some services will have to deploy together, so orchestration is needed.\n  - Each service having its own copy of the data means your data will be eventually consistent at best, distributed transactions are usually a performance bottleneck\n  - Identifying which services belong together and which are not is hard.\n  - Communication is a pain in the butt. Do we need gRPC or Websockets or HTTP or Event bus? A lot of factors to consider\n\n## Microservices communication\nMicroservices can communicate with each other either sync or async:\n\n### Sync - HTTP 1.1\nPros:\n  * Most tutorials, examples and implementations are in HTTP, so it is easier to pick it up and get started\n\nCons:\n  * For applications that need to do long running work and/or react to certain events, this type of design can quickly become a bottleneck\n\n### Async - gRPC, websockets, events\nPros:\n  * Makes more sense when the application does a lot of background work and with the use of gRPC/websockets notifies the user when it is done.\n\nCons:\n  * Tougher to manage, as each event can trigger a lot of reactions which cascade to more events being created.\n\n## Approaches to building microservices\n\n### Side Car\nExpose the services directly. Each service will have a `side-car`, which is a service attached to each of your services, hence side-car, which does all the logging, forwarding, service discovery, ssl termination, authentication and authorization.\n![](./side-car.png)\n\nPros:\n  * Direct client/server communication, means better performance than dealing with extra layers\n\nCons:\n  * Must conform to client communication mechanism. If the client uses HTTP 1.1 your services must use it too.\n\n### API Gateway\nExpose an `API Gateway`, which will act as another layer between your services and the clients. \n\n![](./gateway.png)\n\nPros:\n  * Services can be hidden from the public internet, which means better security\n  * Internal communication can be whatever you like, because you have an extra translation layer\n\nCons:\n  * Another layer to take care of\n  * Reduced performance because of said layer\n\n### API Composer\nThis acts as an `API Gateway`, but it does the requests to the services on behalf of the client and composes their responses as well.\n\n![](./api-composer.png)\n\nPros:\n  * Removes the burden from the client of making multiple requests to the server, as the composer composes all the responses for the client\n  * Decouples the services even further as their communication is reduced\n\nCons:\n  * Easy to leak functionality outside of services\n  * Extra layer to take care of\n\n### Backend For Frontend\nThis acts like an `API Composer`, but you create a composer per client (mobile vs tv). This allows you to make different data requests to your inner services based on the client. For example you have a mobile client and a tv client, which both request data streams from your services. The data and bandwidth needs of your mobile and tv greatly differ, so instead of dealing with managing compatability with a lot of clients in a single composer, you create a composer per client.\n\n![](./bff.png)\n\nPros:\n  * Allows each team to focus on their specific client needs without breaking the other composers. All the composers rely on the services layer.\n  * Allows the team that writes the front end to use the composer to their needs as long as the services layer can support their needs, hence the backend for frontend pattern.\n\nCons:\n  * Easy to leak functionality outside of services\n  * Duplication of code between multiple composers\n\n## Wrapping Up\nBefore rushing to build microservices, remember that there is a lot more to them.\n\nPeople say monolith like it is a bad word, when in reality, they talk about the code and that it is coupled, undocumented and not modular.\n\nIt is perfectly fine and desired to run your code on a single server with a single database on a single platform, as long as you keep your code modular.\n\nMicroservices are an **evolutionary step** you need to take as your business needs progress and become more demanding/complex  to the point microservices are helpful and not a burden.","source":"_posts/what-are-microservices.md","raw":"---\ntitle: What Are Microservices\ntags:\n  - Microservices\n  - Design\n  - Node.js\n  - Backend For Frontend\n  - API Gateway\n  - Sidecar Pattern\n  - Software Architecture\ncategory: Architecture\ndate: 2019-11-05 20:24:24\nthumbnail: images/legos-2.jpg\n---\n\nAfter having written and implemented several microservice architectures, I wanted to have a go at explaining microservices from my point of view and share my insights. In this post I will explain what are microservices, what are their pros and cons, how they communicate and the different approaches towards building microservices.\n\n## What are microservices\nThere are a lot of explanations out in the wild regarding what are microservices. Everyone keeps mentioning loose coupling and independant deployments, but in my experience, that is not always true. Sometimes, you will have to deploy several microservices together because they are coupled, a.k.a, orchestration. In my point of view, microservices need to control their own copy of the application data and they should be self contained, meaning, the business logic they handle should only be tied to a specific microservice and to it alone.\n\n## Microservices Pros\n  - The complexity of the app is too large for a single team/repo/server to handle\n  - Smaller codebase for each team to work on and **if possible** deploy independently\n  - Faster deployments\n  - Safer deployments, we avoid breaking the entire app, each of the services should be self contained\n  - Freedom in choosing tech stack, language, database as every service is independant and knows how to speak to the other services\n\n## Microservices Cons\n  - Having a lot of small services means a lot of deployments from various teams, you will need strong CI/CD tools and best practices to keep up.\n  - Integration testing and integration in general will be tougher, as in the real world some services will have to deploy together, so orchestration is needed.\n  - Each service having its own copy of the data means your data will be eventually consistent at best, distributed transactions are usually a performance bottleneck\n  - Identifying which services belong together and which are not is hard.\n  - Communication is a pain in the butt. Do we need gRPC or Websockets or HTTP or Event bus? A lot of factors to consider\n\n## Microservices communication\nMicroservices can communicate with each other either sync or async:\n\n### Sync - HTTP 1.1\nPros:\n  * Most tutorials, examples and implementations are in HTTP, so it is easier to pick it up and get started\n\nCons:\n  * For applications that need to do long running work and/or react to certain events, this type of design can quickly become a bottleneck\n\n### Async - gRPC, websockets, events\nPros:\n  * Makes more sense when the application does a lot of background work and with the use of gRPC/websockets notifies the user when it is done.\n\nCons:\n  * Tougher to manage, as each event can trigger a lot of reactions which cascade to more events being created.\n\n## Approaches to building microservices\n\n### Side Car\nExpose the services directly. Each service will have a `side-car`, which is a service attached to each of your services, hence side-car, which does all the logging, forwarding, service discovery, ssl termination, authentication and authorization.\n![](./side-car.png)\n\nPros:\n  * Direct client/server communication, means better performance than dealing with extra layers\n\nCons:\n  * Must conform to client communication mechanism. If the client uses HTTP 1.1 your services must use it too.\n\n### API Gateway\nExpose an `API Gateway`, which will act as another layer between your services and the clients. \n\n![](./gateway.png)\n\nPros:\n  * Services can be hidden from the public internet, which means better security\n  * Internal communication can be whatever you like, because you have an extra translation layer\n\nCons:\n  * Another layer to take care of\n  * Reduced performance because of said layer\n\n### API Composer\nThis acts as an `API Gateway`, but it does the requests to the services on behalf of the client and composes their responses as well.\n\n![](./api-composer.png)\n\nPros:\n  * Removes the burden from the client of making multiple requests to the server, as the composer composes all the responses for the client\n  * Decouples the services even further as their communication is reduced\n\nCons:\n  * Easy to leak functionality outside of services\n  * Extra layer to take care of\n\n### Backend For Frontend\nThis acts like an `API Composer`, but you create a composer per client (mobile vs tv). This allows you to make different data requests to your inner services based on the client. For example you have a mobile client and a tv client, which both request data streams from your services. The data and bandwidth needs of your mobile and tv greatly differ, so instead of dealing with managing compatability with a lot of clients in a single composer, you create a composer per client.\n\n![](./bff.png)\n\nPros:\n  * Allows each team to focus on their specific client needs without breaking the other composers. All the composers rely on the services layer.\n  * Allows the team that writes the front end to use the composer to their needs as long as the services layer can support their needs, hence the backend for frontend pattern.\n\nCons:\n  * Easy to leak functionality outside of services\n  * Duplication of code between multiple composers\n\n## Wrapping Up\nBefore rushing to build microservices, remember that there is a lot more to them.\n\nPeople say monolith like it is a bad word, when in reality, they talk about the code and that it is coupled, undocumented and not modular.\n\nIt is perfectly fine and desired to run your code on a single server with a single database on a single platform, as long as you keep your code modular.\n\nMicroservices are an **evolutionary step** you need to take as your business needs progress and become more demanding/complex  to the point microservices are helpful and not a burden.","slug":"what-are-microservices","published":1,"updated":"2021-01-22T11:07:55.953Z","_id":"ckravj1n2001078tafqybakyv","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After having written and implemented several microservice architectures, I wanted to have a go at explaining microservices from my point of view and share my insights. In this post I will explain what are microservices, what are their pros and cons, how they communicate and the different approaches towards building microservices.</p>\n<h2 id=\"What-are-microservices\"><a href=\"#What-are-microservices\" class=\"headerlink\" title=\"What are microservices\"></a>What are microservices</h2><p>There are a lot of explanations out in the wild regarding what are microservices. Everyone keeps mentioning loose coupling and independant deployments, but in my experience, that is not always true. Sometimes, you will have to deploy several microservices together because they are coupled, a.k.a, orchestration. In my point of view, microservices need to control their own copy of the application data and they should be self contained, meaning, the business logic they handle should only be tied to a specific microservice and to it alone.</p>\n<h2 id=\"Microservices-Pros\"><a href=\"#Microservices-Pros\" class=\"headerlink\" title=\"Microservices Pros\"></a>Microservices Pros</h2><ul>\n<li>The complexity of the app is too large for a single team/repo/server to handle</li>\n<li>Smaller codebase for each team to work on and <strong>if possible</strong> deploy independently</li>\n<li>Faster deployments</li>\n<li>Safer deployments, we avoid breaking the entire app, each of the services should be self contained</li>\n<li>Freedom in choosing tech stack, language, database as every service is independant and knows how to speak to the other services</li>\n</ul>\n<h2 id=\"Microservices-Cons\"><a href=\"#Microservices-Cons\" class=\"headerlink\" title=\"Microservices Cons\"></a>Microservices Cons</h2><ul>\n<li>Having a lot of small services means a lot of deployments from various teams, you will need strong CI/CD tools and best practices to keep up.</li>\n<li>Integration testing and integration in general will be tougher, as in the real world some services will have to deploy together, so orchestration is needed.</li>\n<li>Each service having its own copy of the data means your data will be eventually consistent at best, distributed transactions are usually a performance bottleneck</li>\n<li>Identifying which services belong together and which are not is hard.</li>\n<li>Communication is a pain in the butt. Do we need gRPC or Websockets or HTTP or Event bus? A lot of factors to consider</li>\n</ul>\n<h2 id=\"Microservices-communication\"><a href=\"#Microservices-communication\" class=\"headerlink\" title=\"Microservices communication\"></a>Microservices communication</h2><p>Microservices can communicate with each other either sync or async:</p>\n<h3 id=\"Sync-HTTP-1-1\"><a href=\"#Sync-HTTP-1-1\" class=\"headerlink\" title=\"Sync - HTTP 1.1\"></a>Sync - HTTP 1.1</h3><p>Pros:</p>\n<ul>\n<li>Most tutorials, examples and implementations are in HTTP, so it is easier to pick it up and get started</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>For applications that need to do long running work and/or react to certain events, this type of design can quickly become a bottleneck</li>\n</ul>\n<h3 id=\"Async-gRPC-websockets-events\"><a href=\"#Async-gRPC-websockets-events\" class=\"headerlink\" title=\"Async - gRPC, websockets, events\"></a>Async - gRPC, websockets, events</h3><p>Pros:</p>\n<ul>\n<li>Makes more sense when the application does a lot of background work and with the use of gRPC/websockets notifies the user when it is done.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Tougher to manage, as each event can trigger a lot of reactions which cascade to more events being created.</li>\n</ul>\n<h2 id=\"Approaches-to-building-microservices\"><a href=\"#Approaches-to-building-microservices\" class=\"headerlink\" title=\"Approaches to building microservices\"></a>Approaches to building microservices</h2><h3 id=\"Side-Car\"><a href=\"#Side-Car\" class=\"headerlink\" title=\"Side Car\"></a>Side Car</h3><p>Expose the services directly. Each service will have a <code>side-car</code>, which is a service attached to each of your services, hence side-car, which does all the logging, forwarding, service discovery, ssl termination, authentication and authorization.<br><img src=\"/2019/11/05/what-are-microservices/side-car.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Direct client/server communication, means better performance than dealing with extra layers</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Must conform to client communication mechanism. If the client uses HTTP 1.1 your services must use it too.</li>\n</ul>\n<h3 id=\"API-Gateway\"><a href=\"#API-Gateway\" class=\"headerlink\" title=\"API Gateway\"></a>API Gateway</h3><p>Expose an <code>API Gateway</code>, which will act as another layer between your services and the clients. </p>\n<p><img src=\"/2019/11/05/what-are-microservices/gateway.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Services can be hidden from the public internet, which means better security</li>\n<li>Internal communication can be whatever you like, because you have an extra translation layer</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Another layer to take care of</li>\n<li>Reduced performance because of said layer</li>\n</ul>\n<h3 id=\"API-Composer\"><a href=\"#API-Composer\" class=\"headerlink\" title=\"API Composer\"></a>API Composer</h3><p>This acts as an <code>API Gateway</code>, but it does the requests to the services on behalf of the client and composes their responses as well.</p>\n<p><img src=\"/2019/11/05/what-are-microservices/api-composer.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Removes the burden from the client of making multiple requests to the server, as the composer composes all the responses for the client</li>\n<li>Decouples the services even further as their communication is reduced</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Easy to leak functionality outside of services</li>\n<li>Extra layer to take care of</li>\n</ul>\n<h3 id=\"Backend-For-Frontend\"><a href=\"#Backend-For-Frontend\" class=\"headerlink\" title=\"Backend For Frontend\"></a>Backend For Frontend</h3><p>This acts like an <code>API Composer</code>, but you create a composer per client (mobile vs tv). This allows you to make different data requests to your inner services based on the client. For example you have a mobile client and a tv client, which both request data streams from your services. The data and bandwidth needs of your mobile and tv greatly differ, so instead of dealing with managing compatability with a lot of clients in a single composer, you create a composer per client.</p>\n<p><img src=\"/2019/11/05/what-are-microservices/bff.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Allows each team to focus on their specific client needs without breaking the other composers. All the composers rely on the services layer.</li>\n<li>Allows the team that writes the front end to use the composer to their needs as long as the services layer can support their needs, hence the backend for frontend pattern.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Easy to leak functionality outside of services</li>\n<li>Duplication of code between multiple composers</li>\n</ul>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>Before rushing to build microservices, remember that there is a lot more to them.</p>\n<p>People say monolith like it is a bad word, when in reality, they talk about the code and that it is coupled, undocumented and not modular.</p>\n<p>It is perfectly fine and desired to run your code on a single server with a single database on a single platform, as long as you keep your code modular.</p>\n<p>Microservices are an <strong>evolutionary step</strong> you need to take as your business needs progress and become more demanding/complex  to the point microservices are helpful and not a burden.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After having written and implemented several microservice architectures, I wanted to have a go at explaining microservices from my point of view and share my insights. In this post I will explain what are microservices, what are their pros and cons, how they communicate and the different approaches towards building microservices.</p>\n<h2 id=\"What-are-microservices\"><a href=\"#What-are-microservices\" class=\"headerlink\" title=\"What are microservices\"></a>What are microservices</h2><p>There are a lot of explanations out in the wild regarding what are microservices. Everyone keeps mentioning loose coupling and independant deployments, but in my experience, that is not always true. Sometimes, you will have to deploy several microservices together because they are coupled, a.k.a, orchestration. In my point of view, microservices need to control their own copy of the application data and they should be self contained, meaning, the business logic they handle should only be tied to a specific microservice and to it alone.</p>\n<h2 id=\"Microservices-Pros\"><a href=\"#Microservices-Pros\" class=\"headerlink\" title=\"Microservices Pros\"></a>Microservices Pros</h2><ul>\n<li>The complexity of the app is too large for a single team/repo/server to handle</li>\n<li>Smaller codebase for each team to work on and <strong>if possible</strong> deploy independently</li>\n<li>Faster deployments</li>\n<li>Safer deployments, we avoid breaking the entire app, each of the services should be self contained</li>\n<li>Freedom in choosing tech stack, language, database as every service is independant and knows how to speak to the other services</li>\n</ul>\n<h2 id=\"Microservices-Cons\"><a href=\"#Microservices-Cons\" class=\"headerlink\" title=\"Microservices Cons\"></a>Microservices Cons</h2><ul>\n<li>Having a lot of small services means a lot of deployments from various teams, you will need strong CI/CD tools and best practices to keep up.</li>\n<li>Integration testing and integration in general will be tougher, as in the real world some services will have to deploy together, so orchestration is needed.</li>\n<li>Each service having its own copy of the data means your data will be eventually consistent at best, distributed transactions are usually a performance bottleneck</li>\n<li>Identifying which services belong together and which are not is hard.</li>\n<li>Communication is a pain in the butt. Do we need gRPC or Websockets or HTTP or Event bus? A lot of factors to consider</li>\n</ul>\n<h2 id=\"Microservices-communication\"><a href=\"#Microservices-communication\" class=\"headerlink\" title=\"Microservices communication\"></a>Microservices communication</h2><p>Microservices can communicate with each other either sync or async:</p>\n<h3 id=\"Sync-HTTP-1-1\"><a href=\"#Sync-HTTP-1-1\" class=\"headerlink\" title=\"Sync - HTTP 1.1\"></a>Sync - HTTP 1.1</h3><p>Pros:</p>\n<ul>\n<li>Most tutorials, examples and implementations are in HTTP, so it is easier to pick it up and get started</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>For applications that need to do long running work and/or react to certain events, this type of design can quickly become a bottleneck</li>\n</ul>\n<h3 id=\"Async-gRPC-websockets-events\"><a href=\"#Async-gRPC-websockets-events\" class=\"headerlink\" title=\"Async - gRPC, websockets, events\"></a>Async - gRPC, websockets, events</h3><p>Pros:</p>\n<ul>\n<li>Makes more sense when the application does a lot of background work and with the use of gRPC/websockets notifies the user when it is done.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Tougher to manage, as each event can trigger a lot of reactions which cascade to more events being created.</li>\n</ul>\n<h2 id=\"Approaches-to-building-microservices\"><a href=\"#Approaches-to-building-microservices\" class=\"headerlink\" title=\"Approaches to building microservices\"></a>Approaches to building microservices</h2><h3 id=\"Side-Car\"><a href=\"#Side-Car\" class=\"headerlink\" title=\"Side Car\"></a>Side Car</h3><p>Expose the services directly. Each service will have a <code>side-car</code>, which is a service attached to each of your services, hence side-car, which does all the logging, forwarding, service discovery, ssl termination, authentication and authorization.<br><img src=\"/2019/11/05/what-are-microservices/side-car.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Direct client/server communication, means better performance than dealing with extra layers</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Must conform to client communication mechanism. If the client uses HTTP 1.1 your services must use it too.</li>\n</ul>\n<h3 id=\"API-Gateway\"><a href=\"#API-Gateway\" class=\"headerlink\" title=\"API Gateway\"></a>API Gateway</h3><p>Expose an <code>API Gateway</code>, which will act as another layer between your services and the clients. </p>\n<p><img src=\"/2019/11/05/what-are-microservices/gateway.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Services can be hidden from the public internet, which means better security</li>\n<li>Internal communication can be whatever you like, because you have an extra translation layer</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Another layer to take care of</li>\n<li>Reduced performance because of said layer</li>\n</ul>\n<h3 id=\"API-Composer\"><a href=\"#API-Composer\" class=\"headerlink\" title=\"API Composer\"></a>API Composer</h3><p>This acts as an <code>API Gateway</code>, but it does the requests to the services on behalf of the client and composes their responses as well.</p>\n<p><img src=\"/2019/11/05/what-are-microservices/api-composer.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Removes the burden from the client of making multiple requests to the server, as the composer composes all the responses for the client</li>\n<li>Decouples the services even further as their communication is reduced</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Easy to leak functionality outside of services</li>\n<li>Extra layer to take care of</li>\n</ul>\n<h3 id=\"Backend-For-Frontend\"><a href=\"#Backend-For-Frontend\" class=\"headerlink\" title=\"Backend For Frontend\"></a>Backend For Frontend</h3><p>This acts like an <code>API Composer</code>, but you create a composer per client (mobile vs tv). This allows you to make different data requests to your inner services based on the client. For example you have a mobile client and a tv client, which both request data streams from your services. The data and bandwidth needs of your mobile and tv greatly differ, so instead of dealing with managing compatability with a lot of clients in a single composer, you create a composer per client.</p>\n<p><img src=\"/2019/11/05/what-are-microservices/bff.png\" alt></p>\n<p>Pros:</p>\n<ul>\n<li>Allows each team to focus on their specific client needs without breaking the other composers. All the composers rely on the services layer.</li>\n<li>Allows the team that writes the front end to use the composer to their needs as long as the services layer can support their needs, hence the backend for frontend pattern.</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Easy to leak functionality outside of services</li>\n<li>Duplication of code between multiple composers</li>\n</ul>\n<h2 id=\"Wrapping-Up\"><a href=\"#Wrapping-Up\" class=\"headerlink\" title=\"Wrapping Up\"></a>Wrapping Up</h2><p>Before rushing to build microservices, remember that there is a lot more to them.</p>\n<p>People say monolith like it is a bad word, when in reality, they talk about the code and that it is coupled, undocumented and not modular.</p>\n<p>It is perfectly fine and desired to run your code on a single server with a single database on a single platform, as long as you keep your code modular.</p>\n<p>Microservices are an <strong>evolutionary step</strong> you need to take as your business needs progress and become more demanding/complex  to the point microservices are helpful and not a burden.</p>\n"},{"title":"User Space Scheduling","date":"2020-03-07T14:26:21.000Z","thumbnail":"images/multi.jpg","_content":"\n\nA scheduler is a complex piece of software that is responsible for making sure cores are not idle if there are Threads that need work to be done.\nThe fast switching of Threads, also called a context switch, is done by the scheduler and it gives us the illusion that all of our processes run in parallel.\nWe have schedulers both in the Kernel of our favorite OS and in the user space, where our programs live and run.\nSome types of programming languages leverage one type of scheduling, while others leverage another.\nIn this blog post, I will explain what a scheduler is and compare how scheduling affects different programming languages.\n\nBefore we jump to the scheduling section, let's refresh our memory with what Threads are.\n\n## Threads\nA Thread is a set of instructions that waits to be called and there are two types of Threads:\n  1. Kernel Threads (OS Threads)\n  2. Green Threads (lightweight Threads)\n\n### Kernel Threads\nEvery application you run creates a process and each process is given an initial Kernel Thread, which in turn can create more Kernel Threads.\nKernel Threads can run concurrently by taking a turn on a single core, or in parallel each running at the same time on different cores.\nWhen a Thread receives running time on a core it executes its instructions until it is pulled of the core.\n\n### Kernel Thread States\nA Kernel Thread can have three states\n\n  - `Waiting` - the Thread is stopped because it is waiting for a sync call (mutex), a system call or a disk.\n  - `Runnable` - the Thread is ready to be run on a core so it can execute its instructions\n  - `Executing` - the Thread is executing instructions on the core.\n\n\n### Green Threads\nThese Threads only exist in our programs in the user space and are invisible to the Kernel. \nThe handling and scheduling of these Threads occurs in user space as well, depending on the `Threading model`.\nThe states of user space threads depend on how the scheduler that administers them is implemented.\n\n## Scheduler\nThe scheduler is a component that selects which Thread to run next and there are two types of schedulers:\n\n### Preemptive\nThe scheduler decides when a Thread is to cease running and a new Thread is to resume running (context switching).\nPreemptive scheduling has to solve getting all kinds of software from all kinds of places to efficiently share a CPU.\n#### Benefits\nThere is a degree of fairness to all Threads.\n#### Drawbacks\nBecause Threads get interrupted and switched, there is an overhead to store/restore the Thread's state each context switch, which is very expensive computation wise.\n\n### Cooperative\nA process does not stop running until it voluntarily decides to do so. \n\n#### Benefits\nWorks well for processes designed to work together.\nThe scheduler is much simpler to implement.\nThere is no context switching so we get better performance.\n#### Drawbacks\nIf a program forgot to yield control back to the scheduler, other programs will not get a chance to run on that core.\n\nAll major OS's today use a preemptive type of scheduler.\nWindows 3.1 and MacOS 9 had a cooperative scheduler.\n\n## Threading Models\nThere are different Threading models that explain how our Green Threads are linked to Kernel threads.\n\n### 1-1\nWhen we call to create a Green Thread in our program, it invokes a system call to spawn an Kernel Thread.\nThis type of Threading model does not need its own scheduler in user space.\nExamples would be: `Java (JVM)`, `C`, `Rust`\n\n#### Benefits\nNo need for a user space scheduler as we reuse the preemptive OS scheduler.\n\n#### Drawbacks\nCreating a large number of threads consumes a lot of system resources.\nThe same drawbacks to context switching apply here to due using the same OS scheduler.\n\n### N-1\nWe have multiple Green Threads and only one Kernel Thread.\nThis type of Threading model does need its own scheduler in user space.\nThe prime example would be `Node.js`.\n\n#### Benefits\nDue to running on a single Kernel Thread, there is no overhead thinking about race conditions and mutexes.\n\n#### Drawbacks\nCannot leverage multi core processors\n\n### M-N\nWith this Threading model we create multiple Green Threads that run on multiple Kernel Threads.\nThis type of Threading model does need its own scheduler in user space.\nExamples would be: `RxJava`, `Akka`, `Go`\n\n#### Benefits\nLeveraging the best of both worlds\n\n#### Drawbacks\nYou need a really good implementation of a user space scheduler to make this threading model utilize the most out of your system\nData races and sync issues can occur, so it is up to the developers to handle them.\n\n## Kernel and User Space Scheduling\nWe said earlier that all major OS's today use a preemptive type of scheduler, but it does not mean that all user space schedulers are preemptive as well.\n\n### Preemptive Kernel and Cooperative User Space\nTake, for example `Node.js`, its event loop is actually a cooperative scheduler. \nAll phases in the event loop are run only after the previous phase finished running, meaning it gave control back to the event loop.\nAnother example for cooperative scheduling is `Go`, however we dont have to explicitly yield control back to its scheduler, as it does that by itself on each function invocation.\n\nBecause we have the OS preemptive scheduler, we can leverage the cooperative scheduling in user space, thus achieving both performance and concurrency.\n\n### Preemptive Kernel and Preemptive User Space\nPreemptive scheduling is hard because we need to take into account context switches and synchronization primitives, however, there are a few languages like `Erlang`, `Elixir` and `Haskell` that use a preemptive scheduler in user space as well.\nDue to their functional nature, the languages above do not share memory between processes, so they dont need synchronization.\nThe `Erlang` vm, for example, creates a preemptive scheduler per CPU core, allowing for maximum concurrency.\nEven if you block a Thread in your application with synchronous code, the vm will still give other Green Threads time to run.\n\n## Conclusion\nWe saw what Threads are and how the scheduler uses them to not let the system idle if there is work to be done. Last, we saw how each of the Threading models affects how programming languages / runtimes work and how they are used.","source":"_posts/User-Space-Scheduling.md","raw":"---\ntitle: User Space Scheduling\ntags:\n  - Concurrency\n  - Parallelism\n  - Threads\n  - Scheduler\n  - Green Threads\n  - Kernel Threads\n  - Threading Models\ncategory: Programming\ndate: 2020-03-07 16:26:21\nthumbnail: images/multi.jpg\n---\n\n\nA scheduler is a complex piece of software that is responsible for making sure cores are not idle if there are Threads that need work to be done.\nThe fast switching of Threads, also called a context switch, is done by the scheduler and it gives us the illusion that all of our processes run in parallel.\nWe have schedulers both in the Kernel of our favorite OS and in the user space, where our programs live and run.\nSome types of programming languages leverage one type of scheduling, while others leverage another.\nIn this blog post, I will explain what a scheduler is and compare how scheduling affects different programming languages.\n\nBefore we jump to the scheduling section, let's refresh our memory with what Threads are.\n\n## Threads\nA Thread is a set of instructions that waits to be called and there are two types of Threads:\n  1. Kernel Threads (OS Threads)\n  2. Green Threads (lightweight Threads)\n\n### Kernel Threads\nEvery application you run creates a process and each process is given an initial Kernel Thread, which in turn can create more Kernel Threads.\nKernel Threads can run concurrently by taking a turn on a single core, or in parallel each running at the same time on different cores.\nWhen a Thread receives running time on a core it executes its instructions until it is pulled of the core.\n\n### Kernel Thread States\nA Kernel Thread can have three states\n\n  - `Waiting` - the Thread is stopped because it is waiting for a sync call (mutex), a system call or a disk.\n  - `Runnable` - the Thread is ready to be run on a core so it can execute its instructions\n  - `Executing` - the Thread is executing instructions on the core.\n\n\n### Green Threads\nThese Threads only exist in our programs in the user space and are invisible to the Kernel. \nThe handling and scheduling of these Threads occurs in user space as well, depending on the `Threading model`.\nThe states of user space threads depend on how the scheduler that administers them is implemented.\n\n## Scheduler\nThe scheduler is a component that selects which Thread to run next and there are two types of schedulers:\n\n### Preemptive\nThe scheduler decides when a Thread is to cease running and a new Thread is to resume running (context switching).\nPreemptive scheduling has to solve getting all kinds of software from all kinds of places to efficiently share a CPU.\n#### Benefits\nThere is a degree of fairness to all Threads.\n#### Drawbacks\nBecause Threads get interrupted and switched, there is an overhead to store/restore the Thread's state each context switch, which is very expensive computation wise.\n\n### Cooperative\nA process does not stop running until it voluntarily decides to do so. \n\n#### Benefits\nWorks well for processes designed to work together.\nThe scheduler is much simpler to implement.\nThere is no context switching so we get better performance.\n#### Drawbacks\nIf a program forgot to yield control back to the scheduler, other programs will not get a chance to run on that core.\n\nAll major OS's today use a preemptive type of scheduler.\nWindows 3.1 and MacOS 9 had a cooperative scheduler.\n\n## Threading Models\nThere are different Threading models that explain how our Green Threads are linked to Kernel threads.\n\n### 1-1\nWhen we call to create a Green Thread in our program, it invokes a system call to spawn an Kernel Thread.\nThis type of Threading model does not need its own scheduler in user space.\nExamples would be: `Java (JVM)`, `C`, `Rust`\n\n#### Benefits\nNo need for a user space scheduler as we reuse the preemptive OS scheduler.\n\n#### Drawbacks\nCreating a large number of threads consumes a lot of system resources.\nThe same drawbacks to context switching apply here to due using the same OS scheduler.\n\n### N-1\nWe have multiple Green Threads and only one Kernel Thread.\nThis type of Threading model does need its own scheduler in user space.\nThe prime example would be `Node.js`.\n\n#### Benefits\nDue to running on a single Kernel Thread, there is no overhead thinking about race conditions and mutexes.\n\n#### Drawbacks\nCannot leverage multi core processors\n\n### M-N\nWith this Threading model we create multiple Green Threads that run on multiple Kernel Threads.\nThis type of Threading model does need its own scheduler in user space.\nExamples would be: `RxJava`, `Akka`, `Go`\n\n#### Benefits\nLeveraging the best of both worlds\n\n#### Drawbacks\nYou need a really good implementation of a user space scheduler to make this threading model utilize the most out of your system\nData races and sync issues can occur, so it is up to the developers to handle them.\n\n## Kernel and User Space Scheduling\nWe said earlier that all major OS's today use a preemptive type of scheduler, but it does not mean that all user space schedulers are preemptive as well.\n\n### Preemptive Kernel and Cooperative User Space\nTake, for example `Node.js`, its event loop is actually a cooperative scheduler. \nAll phases in the event loop are run only after the previous phase finished running, meaning it gave control back to the event loop.\nAnother example for cooperative scheduling is `Go`, however we dont have to explicitly yield control back to its scheduler, as it does that by itself on each function invocation.\n\nBecause we have the OS preemptive scheduler, we can leverage the cooperative scheduling in user space, thus achieving both performance and concurrency.\n\n### Preemptive Kernel and Preemptive User Space\nPreemptive scheduling is hard because we need to take into account context switches and synchronization primitives, however, there are a few languages like `Erlang`, `Elixir` and `Haskell` that use a preemptive scheduler in user space as well.\nDue to their functional nature, the languages above do not share memory between processes, so they dont need synchronization.\nThe `Erlang` vm, for example, creates a preemptive scheduler per CPU core, allowing for maximum concurrency.\nEven if you block a Thread in your application with synchronous code, the vm will still give other Green Threads time to run.\n\n## Conclusion\nWe saw what Threads are and how the scheduler uses them to not let the system idle if there is work to be done. Last, we saw how each of the Threading models affects how programming languages / runtimes work and how they are used.","slug":"User-Space-Scheduling","published":1,"updated":"2021-01-22T11:07:55.953Z","_id":"ckravj1n4001278taflnuhkrg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>A scheduler is a complex piece of software that is responsible for making sure cores are not idle if there are Threads that need work to be done.<br>The fast switching of Threads, also called a context switch, is done by the scheduler and it gives us the illusion that all of our processes run in parallel.<br>We have schedulers both in the Kernel of our favorite OS and in the user space, where our programs live and run.<br>Some types of programming languages leverage one type of scheduling, while others leverage another.<br>In this blog post, I will explain what a scheduler is and compare how scheduling affects different programming languages.</p>\n<p>Before we jump to the scheduling section, let’s refresh our memory with what Threads are.</p>\n<h2 id=\"Threads\"><a href=\"#Threads\" class=\"headerlink\" title=\"Threads\"></a>Threads</h2><p>A Thread is a set of instructions that waits to be called and there are two types of Threads:</p>\n<ol>\n<li>Kernel Threads (OS Threads)</li>\n<li>Green Threads (lightweight Threads)</li>\n</ol>\n<h3 id=\"Kernel-Threads\"><a href=\"#Kernel-Threads\" class=\"headerlink\" title=\"Kernel Threads\"></a>Kernel Threads</h3><p>Every application you run creates a process and each process is given an initial Kernel Thread, which in turn can create more Kernel Threads.<br>Kernel Threads can run concurrently by taking a turn on a single core, or in parallel each running at the same time on different cores.<br>When a Thread receives running time on a core it executes its instructions until it is pulled of the core.</p>\n<h3 id=\"Kernel-Thread-States\"><a href=\"#Kernel-Thread-States\" class=\"headerlink\" title=\"Kernel Thread States\"></a>Kernel Thread States</h3><p>A Kernel Thread can have three states</p>\n<ul>\n<li><code>Waiting</code> - the Thread is stopped because it is waiting for a sync call (mutex), a system call or a disk.</li>\n<li><code>Runnable</code> - the Thread is ready to be run on a core so it can execute its instructions</li>\n<li><code>Executing</code> - the Thread is executing instructions on the core.</li>\n</ul>\n<h3 id=\"Green-Threads\"><a href=\"#Green-Threads\" class=\"headerlink\" title=\"Green Threads\"></a>Green Threads</h3><p>These Threads only exist in our programs in the user space and are invisible to the Kernel.<br>The handling and scheduling of these Threads occurs in user space as well, depending on the <code>Threading model</code>.\nThe states of user space threads depend on how the scheduler that administers them is implemented.</p>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>The scheduler is a component that selects which Thread to run next and there are two types of schedulers:</p>\n<h3 id=\"Preemptive\"><a href=\"#Preemptive\" class=\"headerlink\" title=\"Preemptive\"></a>Preemptive</h3><p>The scheduler decides when a Thread is to cease running and a new Thread is to resume running (context switching).<br>Preemptive scheduling has to solve getting all kinds of software from all kinds of places to efficiently share a CPU.</p>\n<h4 id=\"Benefits\"><a href=\"#Benefits\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>There is a degree of fairness to all Threads.</p>\n<h4 id=\"Drawbacks\"><a href=\"#Drawbacks\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Because Threads get interrupted and switched, there is an overhead to store/restore the Thread’s state each context switch, which is very expensive computation wise.</p>\n<h3 id=\"Cooperative\"><a href=\"#Cooperative\" class=\"headerlink\" title=\"Cooperative\"></a>Cooperative</h3><p>A process does not stop running until it voluntarily decides to do so. </p>\n<h4 id=\"Benefits-1\"><a href=\"#Benefits-1\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Works well for processes designed to work together.<br>The scheduler is much simpler to implement.<br>There is no context switching so we get better performance.</p>\n<h4 id=\"Drawbacks-1\"><a href=\"#Drawbacks-1\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>If a program forgot to yield control back to the scheduler, other programs will not get a chance to run on that core.</p>\n<p>All major OS’s today use a preemptive type of scheduler.<br>Windows 3.1 and MacOS 9 had a cooperative scheduler.</p>\n<h2 id=\"Threading-Models\"><a href=\"#Threading-Models\" class=\"headerlink\" title=\"Threading Models\"></a>Threading Models</h2><p>There are different Threading models that explain how our Green Threads are linked to Kernel threads.</p>\n<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1-1\"></a>1-1</h3><p>When we call to create a Green Thread in our program, it invokes a system call to spawn an Kernel Thread.<br>This type of Threading model does not need its own scheduler in user space.<br>Examples would be: <code>Java (JVM)</code>, <code>C</code>, <code>Rust</code></p>\n<h4 id=\"Benefits-2\"><a href=\"#Benefits-2\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>No need for a user space scheduler as we reuse the preemptive OS scheduler.</p>\n<h4 id=\"Drawbacks-2\"><a href=\"#Drawbacks-2\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Creating a large number of threads consumes a lot of system resources.<br>The same drawbacks to context switching apply here to due using the same OS scheduler.</p>\n<h3 id=\"N-1\"><a href=\"#N-1\" class=\"headerlink\" title=\"N-1\"></a>N-1</h3><p>We have multiple Green Threads and only one Kernel Thread.<br>This type of Threading model does need its own scheduler in user space.<br>The prime example would be <code>Node.js</code>.</p>\n<h4 id=\"Benefits-3\"><a href=\"#Benefits-3\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Due to running on a single Kernel Thread, there is no overhead thinking about race conditions and mutexes.</p>\n<h4 id=\"Drawbacks-3\"><a href=\"#Drawbacks-3\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Cannot leverage multi core processors</p>\n<h3 id=\"M-N\"><a href=\"#M-N\" class=\"headerlink\" title=\"M-N\"></a>M-N</h3><p>With this Threading model we create multiple Green Threads that run on multiple Kernel Threads.<br>This type of Threading model does need its own scheduler in user space.<br>Examples would be: <code>RxJava</code>, <code>Akka</code>, <code>Go</code></p>\n<h4 id=\"Benefits-4\"><a href=\"#Benefits-4\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Leveraging the best of both worlds</p>\n<h4 id=\"Drawbacks-4\"><a href=\"#Drawbacks-4\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>You need a really good implementation of a user space scheduler to make this threading model utilize the most out of your system<br>Data races and sync issues can occur, so it is up to the developers to handle them.</p>\n<h2 id=\"Kernel-and-User-Space-Scheduling\"><a href=\"#Kernel-and-User-Space-Scheduling\" class=\"headerlink\" title=\"Kernel and User Space Scheduling\"></a>Kernel and User Space Scheduling</h2><p>We said earlier that all major OS’s today use a preemptive type of scheduler, but it does not mean that all user space schedulers are preemptive as well.</p>\n<h3 id=\"Preemptive-Kernel-and-Cooperative-User-Space\"><a href=\"#Preemptive-Kernel-and-Cooperative-User-Space\" class=\"headerlink\" title=\"Preemptive Kernel and Cooperative User Space\"></a>Preemptive Kernel and Cooperative User Space</h3><p>Take, for example <code>Node.js</code>, its event loop is actually a cooperative scheduler.<br>All phases in the event loop are run only after the previous phase finished running, meaning it gave control back to the event loop.<br>Another example for cooperative scheduling is <code>Go</code>, however we dont have to explicitly yield control back to its scheduler, as it does that by itself on each function invocation.</p>\n<p>Because we have the OS preemptive scheduler, we can leverage the cooperative scheduling in user space, thus achieving both performance and concurrency.</p>\n<h3 id=\"Preemptive-Kernel-and-Preemptive-User-Space\"><a href=\"#Preemptive-Kernel-and-Preemptive-User-Space\" class=\"headerlink\" title=\"Preemptive Kernel and Preemptive User Space\"></a>Preemptive Kernel and Preemptive User Space</h3><p>Preemptive scheduling is hard because we need to take into account context switches and synchronization primitives, however, there are a few languages like <code>Erlang</code>, <code>Elixir</code> and <code>Haskell</code> that use a preemptive scheduler in user space as well.<br>Due to their functional nature, the languages above do not share memory between processes, so they dont need synchronization.<br>The <code>Erlang</code> vm, for example, creates a preemptive scheduler per CPU core, allowing for maximum concurrency.<br>Even if you block a Thread in your application with synchronous code, the vm will still give other Green Threads time to run.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We saw what Threads are and how the scheduler uses them to not let the system idle if there is work to be done. Last, we saw how each of the Threading models affects how programming languages / runtimes work and how they are used.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>A scheduler is a complex piece of software that is responsible for making sure cores are not idle if there are Threads that need work to be done.<br>The fast switching of Threads, also called a context switch, is done by the scheduler and it gives us the illusion that all of our processes run in parallel.<br>We have schedulers both in the Kernel of our favorite OS and in the user space, where our programs live and run.<br>Some types of programming languages leverage one type of scheduling, while others leverage another.<br>In this blog post, I will explain what a scheduler is and compare how scheduling affects different programming languages.</p>\n<p>Before we jump to the scheduling section, let’s refresh our memory with what Threads are.</p>\n<h2 id=\"Threads\"><a href=\"#Threads\" class=\"headerlink\" title=\"Threads\"></a>Threads</h2><p>A Thread is a set of instructions that waits to be called and there are two types of Threads:</p>\n<ol>\n<li>Kernel Threads (OS Threads)</li>\n<li>Green Threads (lightweight Threads)</li>\n</ol>\n<h3 id=\"Kernel-Threads\"><a href=\"#Kernel-Threads\" class=\"headerlink\" title=\"Kernel Threads\"></a>Kernel Threads</h3><p>Every application you run creates a process and each process is given an initial Kernel Thread, which in turn can create more Kernel Threads.<br>Kernel Threads can run concurrently by taking a turn on a single core, or in parallel each running at the same time on different cores.<br>When a Thread receives running time on a core it executes its instructions until it is pulled of the core.</p>\n<h3 id=\"Kernel-Thread-States\"><a href=\"#Kernel-Thread-States\" class=\"headerlink\" title=\"Kernel Thread States\"></a>Kernel Thread States</h3><p>A Kernel Thread can have three states</p>\n<ul>\n<li><code>Waiting</code> - the Thread is stopped because it is waiting for a sync call (mutex), a system call or a disk.</li>\n<li><code>Runnable</code> - the Thread is ready to be run on a core so it can execute its instructions</li>\n<li><code>Executing</code> - the Thread is executing instructions on the core.</li>\n</ul>\n<h3 id=\"Green-Threads\"><a href=\"#Green-Threads\" class=\"headerlink\" title=\"Green Threads\"></a>Green Threads</h3><p>These Threads only exist in our programs in the user space and are invisible to the Kernel.<br>The handling and scheduling of these Threads occurs in user space as well, depending on the <code>Threading model</code>.\nThe states of user space threads depend on how the scheduler that administers them is implemented.</p>\n<h2 id=\"Scheduler\"><a href=\"#Scheduler\" class=\"headerlink\" title=\"Scheduler\"></a>Scheduler</h2><p>The scheduler is a component that selects which Thread to run next and there are two types of schedulers:</p>\n<h3 id=\"Preemptive\"><a href=\"#Preemptive\" class=\"headerlink\" title=\"Preemptive\"></a>Preemptive</h3><p>The scheduler decides when a Thread is to cease running and a new Thread is to resume running (context switching).<br>Preemptive scheduling has to solve getting all kinds of software from all kinds of places to efficiently share a CPU.</p>\n<h4 id=\"Benefits\"><a href=\"#Benefits\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>There is a degree of fairness to all Threads.</p>\n<h4 id=\"Drawbacks\"><a href=\"#Drawbacks\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Because Threads get interrupted and switched, there is an overhead to store/restore the Thread’s state each context switch, which is very expensive computation wise.</p>\n<h3 id=\"Cooperative\"><a href=\"#Cooperative\" class=\"headerlink\" title=\"Cooperative\"></a>Cooperative</h3><p>A process does not stop running until it voluntarily decides to do so. </p>\n<h4 id=\"Benefits-1\"><a href=\"#Benefits-1\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Works well for processes designed to work together.<br>The scheduler is much simpler to implement.<br>There is no context switching so we get better performance.</p>\n<h4 id=\"Drawbacks-1\"><a href=\"#Drawbacks-1\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>If a program forgot to yield control back to the scheduler, other programs will not get a chance to run on that core.</p>\n<p>All major OS’s today use a preemptive type of scheduler.<br>Windows 3.1 and MacOS 9 had a cooperative scheduler.</p>\n<h2 id=\"Threading-Models\"><a href=\"#Threading-Models\" class=\"headerlink\" title=\"Threading Models\"></a>Threading Models</h2><p>There are different Threading models that explain how our Green Threads are linked to Kernel threads.</p>\n<h3 id=\"1-1\"><a href=\"#1-1\" class=\"headerlink\" title=\"1-1\"></a>1-1</h3><p>When we call to create a Green Thread in our program, it invokes a system call to spawn an Kernel Thread.<br>This type of Threading model does not need its own scheduler in user space.<br>Examples would be: <code>Java (JVM)</code>, <code>C</code>, <code>Rust</code></p>\n<h4 id=\"Benefits-2\"><a href=\"#Benefits-2\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>No need for a user space scheduler as we reuse the preemptive OS scheduler.</p>\n<h4 id=\"Drawbacks-2\"><a href=\"#Drawbacks-2\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Creating a large number of threads consumes a lot of system resources.<br>The same drawbacks to context switching apply here to due using the same OS scheduler.</p>\n<h3 id=\"N-1\"><a href=\"#N-1\" class=\"headerlink\" title=\"N-1\"></a>N-1</h3><p>We have multiple Green Threads and only one Kernel Thread.<br>This type of Threading model does need its own scheduler in user space.<br>The prime example would be <code>Node.js</code>.</p>\n<h4 id=\"Benefits-3\"><a href=\"#Benefits-3\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Due to running on a single Kernel Thread, there is no overhead thinking about race conditions and mutexes.</p>\n<h4 id=\"Drawbacks-3\"><a href=\"#Drawbacks-3\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>Cannot leverage multi core processors</p>\n<h3 id=\"M-N\"><a href=\"#M-N\" class=\"headerlink\" title=\"M-N\"></a>M-N</h3><p>With this Threading model we create multiple Green Threads that run on multiple Kernel Threads.<br>This type of Threading model does need its own scheduler in user space.<br>Examples would be: <code>RxJava</code>, <code>Akka</code>, <code>Go</code></p>\n<h4 id=\"Benefits-4\"><a href=\"#Benefits-4\" class=\"headerlink\" title=\"Benefits\"></a>Benefits</h4><p>Leveraging the best of both worlds</p>\n<h4 id=\"Drawbacks-4\"><a href=\"#Drawbacks-4\" class=\"headerlink\" title=\"Drawbacks\"></a>Drawbacks</h4><p>You need a really good implementation of a user space scheduler to make this threading model utilize the most out of your system<br>Data races and sync issues can occur, so it is up to the developers to handle them.</p>\n<h2 id=\"Kernel-and-User-Space-Scheduling\"><a href=\"#Kernel-and-User-Space-Scheduling\" class=\"headerlink\" title=\"Kernel and User Space Scheduling\"></a>Kernel and User Space Scheduling</h2><p>We said earlier that all major OS’s today use a preemptive type of scheduler, but it does not mean that all user space schedulers are preemptive as well.</p>\n<h3 id=\"Preemptive-Kernel-and-Cooperative-User-Space\"><a href=\"#Preemptive-Kernel-and-Cooperative-User-Space\" class=\"headerlink\" title=\"Preemptive Kernel and Cooperative User Space\"></a>Preemptive Kernel and Cooperative User Space</h3><p>Take, for example <code>Node.js</code>, its event loop is actually a cooperative scheduler.<br>All phases in the event loop are run only after the previous phase finished running, meaning it gave control back to the event loop.<br>Another example for cooperative scheduling is <code>Go</code>, however we dont have to explicitly yield control back to its scheduler, as it does that by itself on each function invocation.</p>\n<p>Because we have the OS preemptive scheduler, we can leverage the cooperative scheduling in user space, thus achieving both performance and concurrency.</p>\n<h3 id=\"Preemptive-Kernel-and-Preemptive-User-Space\"><a href=\"#Preemptive-Kernel-and-Preemptive-User-Space\" class=\"headerlink\" title=\"Preemptive Kernel and Preemptive User Space\"></a>Preemptive Kernel and Preemptive User Space</h3><p>Preemptive scheduling is hard because we need to take into account context switches and synchronization primitives, however, there are a few languages like <code>Erlang</code>, <code>Elixir</code> and <code>Haskell</code> that use a preemptive scheduler in user space as well.<br>Due to their functional nature, the languages above do not share memory between processes, so they dont need synchronization.<br>The <code>Erlang</code> vm, for example, creates a preemptive scheduler per CPU core, allowing for maximum concurrency.<br>Even if you block a Thread in your application with synchronous code, the vm will still give other Green Threads time to run.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>We saw what Threads are and how the scheduler uses them to not let the system idle if there is work to be done. Last, we saw how each of the Threading models affects how programming languages / runtimes work and how they are used.</p>\n"},{"title":"Implementing Ports and Adapters","date":"2020-02-01T16:15:21.000Z","thumbnail":"images/golang-ports-and-adapters.png","_content":"\nThere are different architectures that allow you to keep focus on your business domain and allow for fast paced development and changes. Examples would be: Clean Architecture, Onion Architecture and Ports and Adapters (also called hexagonal).\n[In my previous post](/2019/06/11/Implementing-Clean-Architecture/), I talked about Clean Architecture and how it helps get your code more modular and developer friendly after a somewhat short learning curve. After joining a new team, I noticed Clean Architecture did not really settle and the team found it to be somewhat over abstracted, so I decided to play around with a variation of Ports and Adapters.\nIn this post I will show what is Ports and Adapters and how I implemented it in Golang. Github repo is available [here](https://github.com/yuraxdrumz/ports-and-adapters-golang).\n\n### Disclaimer\nSome of the things that I am going to write and show are my personal experiences and opinions.\n\n### Core Idea\nPorts and Adapters architecture divides a system into several loosely-coupled interchangeable components. The components communicate with each other through abstracted API's with the use of interfaces and their implementations.\nThis approach is an alternative to the traditional layered architecture, where components are divided into layers. There are no layers in Ports and Adapters, only ports <- adapters, meaning there are no restrictions on how to structure the applications, only that an adapter relies on a port and the business logic port relies on other ports\n\n### Business Logic\nAll of your business specific use cases.\nExample: upon adding a user to a board, send an email, save the user in the database and grant the user permissions to view the board from an auth service.\n\n\n### Ports\nThe interfaces to all of the components in your system. There are two kinds of ports: driven and driver.\n\n#### Driven Ports\nInterfaces that your application business logic uses for its needs. \n\n#### Driver Ports\nInterfaces for the outside world, a.k.a API\n\n### Adapters\nImplementations of our ports. They can be either driven or driver, depending on the port we use\n\n#### Driven Adapter\nExample: Service-To-Service adapter, for when we need to request some data from another service in our business logic use case\n\n#### Driver Adapter\nExample: GUI adapter, for when we need to convert events triggered by a GUI app to events defined by other ports\n\n### Prerequisites\nBecause Ports and Adapters does not define a specific folder structure, I will not focus on it, but you can take a reference from the structure in the github repository.\nOne thing to note is I replaced the `driven` ports with the name `out` and the driver ports with the name `in`, as it confused developers that are new to Ports and Adapters\nI like to name my packages as `package/ports`, and the adapters, like `package/console.go`, `package/web.go`, meaning there are two adapters, one is console and one is web for a specific port, that way it is easier to know what is implemented where.\nRegarding the structs, I prefer putting them in each package as a sub package, in order to avoid cyclic import dependencies. `package/ports/...`\n\n### Ports and Adapters In Practice\nlets build a shopping cart. Our cart will have two use cases, `addToCart` and `removeFromCart`. Let's say that we need a warehouse service and a database to save the changes.\n\nWe can create one port for all the use cases regarding the cart, or we can do a port per use case in the cart. It is up to you and the level of abstraction you seek.\nI chose to put all the cart use cases under one port.\n\n#### Ports In Practice\n\n##### Driven ports\n\nOur warehouse package ports will look like this:\n`warehouse/ports.go`\n\n```go\npackage warehouse\n\ntype Port interface {\n\tCheckIfAvailable(itemID string) (bool, error)\n\tRemoveItemFromWarehouse(itemID string) (bool, error)\n}\n\n```\n\nOur cart repository package ports will look like this:\n`cartRepository/ports.go`\n\n```go\npackage cartrepository\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n)\n\ntype Port interface {\n\tAddItemToDB(item *structs.Item) (string, error)\n\tRemoveItemFromDB(itemID string) (bool, error)\n}\n```\n\nI like to use the repository design pattern to abstract database interaction. \nI already wrote about it [here](/2019/06/11/Implementing-Clean-Architecture/#Repository-Pattern).\n\n\nLet's see an example of the port for the cart.\n`cart/ports.go`\n```go\npackage cart\n\nimport \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\ntype Port interface {\n\tAdd(item structs.Item) error\n\tRemove(itemID string) error\n}\n\n\n```\n\n##### Driver Ports\n`driver/ports.go`\n```go\npackage driver\n\n// Port - how an adapter can use the app\ntype Port interface {\n\tRun()\n}\n\n```\n\nNow that we finished the ports part, lets look at the adapters.\nWe will first create simple adapters, like in memory repository adapter and a console warehouse adapter so that we can start using the app.\nAfterwards, we will create an sql adapter to show how Ports and Adapters come to our advantage.\n\n#### Adapters In Practice\n##### Driven Adapters\n\n`warehouse/console.go`\n```go\npackage warehouse\n\nimport (\n\t\"errors\"\n)\n\n// our console warehouse struct with all the adapters it uses, in this case with the console adapter we dont need any dependencies\ntype ConsoleWarehouse struct {}\n\n// a new console warehouse factory\nfunc NewConsoleWarehouse() *ConsoleWarehouse {\n\treturn &ConsoleWarehouse{}\n}\n\n// our implementation of the port for console warehouse\nfunc (w *ConsoleWarehouse) CheckIfAvailable(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item is not available\")\n\t}\n\treturn true, nil\n}\n\n// our implementation of the port for console warehouse\nfunc (w *ConsoleWarehouse) RemoveItemFromWarehouse(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed from warehouse, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\n`cartRepository/inMemory.go`\n```go\npackage cartrepository\n\nimport (\n\t\"errors\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n)\n\n// in memory repository adapter, we dont have any dependencies on other adapters so its empty\ntype InMemoryRepository struct {}\n\n// new in memory repository factory\nfunc NewInMemoryRepository() *InMemoryRepository {\n\treturn &InMemoryRepository{}\n}\n\n// our implementation of the port\nfunc (r *InMemoryRepository) AddItemToDB(item *structs.Item) (bool, error) {\n\tif item.Id == \"0\" {\n\t\treturn false, errors.New(\"cannot add item to db\")\n\t}\n\treturn true, nil\n}\n\n// our implementation of the port\nfunc (r *InMemoryRepository) RemoveItemFromDB(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\nLets see the cart adapter with Add implemented\n\n`cart/cart.go`\n\n```go\n\npackage cart\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"sync\"\n)\n\ntype Cart struct {\n\twh   warehouse.Port\n\trepo cartrepository.Port\n\tmutex sync.Mutex\n}\n\nfunc NewCart(wh warehouse.Port, repo cartrepository.Port) *Cart {\n\treturn &Cart{\n\t\twh:   wh,\n\t\trepo: repo,\n\t}\n}\n\nfunc (c *Cart) Add(item *structs.Item) error {\n\tc.mutex.Lock()\n\tdefer c.mutex.Unlock()\n\t\n\tisAvailable, err := c.wh.CheckIfAvailable(item.Id)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif isAvailable {\n\t\t_, err = c.repo.AddItemToDB(item)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *Cart) Remove(itemID string) error {\n\treturn nil\n}\n```\n\nAt this point we have our cart, warehouse and repository ports and adapters implemented, all these ports are driven, because our app uses them internally.\nNow, we need a driver adapter.\n\nLet's create a cli adapter which receives the item, id and description from the cli.\n\n##### Driver Adapter\n`driver/cli.go`\n\n```go\npackage driver\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\t\"github.com/urfave/cli/v2\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t\"os\"\n)\n\n// CliAdapter - struct with necessary ports to run\ntype CliAdapter struct {\n\tca cart.Port\n}\n\n// NewCliAdapter - create a new instance of NewCliAdapter with passed implementations\nfunc NewCliAdapter(ca cart.Port) *CliAdapter {\n\treturn &CliAdapter{ca: ca}\n}\n\n// Run - initializes cli adapter run\nfunc (in *CliAdapter) Run() {\n\tapp := &cli.App{\n\t\tName: \"cart\",\n\t\tUsage: \"handle cart from cli\",\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"item\",\n\t\t\t\tUsage: \"item to add\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"description\",\n\t\t\t\tUsage: \"description for the item\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"id\",\n\t\t\t\tUsage: \"item id\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t},\n\t\tAction: func(c *cli.Context) error {\n\n\t\t\titem := &structs.Item{\n\t\t\t\tName:        c.String(\"item\"),\n\t\t\t\tId:          c.String(\"id\"),\n\t\t\t\tDescription: c.String(\"description\"),\n\t\t\t}\n\t\t\terr := in.ca.Add(item)\n\t\t\tif err != nil {\n\t\t\t\tlogrus.WithField(\"error\", err.Error()).Error(\"couldn't add item\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\t\"name\": item.Name,\n\t\t\t\t\"description\": item.Description,\n\t\t\t\t\"id\": item.Id,\n\t\t\t}).Info(\"Added new item\")\n\t\t\treturn nil\n\t\t},\n\t}\n\terr := app.Run(os.Args)\n\n\tif err != nil {\n\t\tlogrus.Fatal(err)\n\t}\n}\n\n```\n\nNow lets glue everything together in `main.go`\n\n`main.go`\n\n```go\npackage main\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\tdriver \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n)\n\nfunc main() {\n\t// declare all ports\n\tvar ca cart.Port\n\tvar wh warehouse.Port\n\tvar re cartrepository.Port\n\tvar in driver.Port\n\n\twh = warehouse.NewConsoleWarehouse()\n\tre = cartrepository.NewInMemoryRepository()\n\tca = cart.NewCart(wh, re)\n\tin = driver.NewCliAdapter(ca)\n\n\tin.Run()\n}\n\n```\n\nNow, if we run `go run main.go`, we will get\n\n```\n❯ go run main.go\nNAME:\n   cart - handle cart from cli\n\nUSAGE:\n   main [global options] command [command options] [arguments...]\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --item value         item to add\n   --description value  description for the item\n   --id value           item id\n   --help, -h           show help (default: false)\nFATA[0000] Required flags \"item, description, id\" not set \nexit status 1\n\n\n```\n\nLets add an item with id 0 that is supposed to fail and with an id of 1 that is supposed to succeed\n\n```\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 1\nINFO[0000] Added new item                                description=\"used as trasnport\" id=1 name=bicycle\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 0\nERRO[0000] couldn't add item                             error=\"item is not available\"\n\n```\n\nIt worked!\n\nNow, let's create a new sql adapter for the repository\n\n`cartRepository/sqlite.go`\n```go\npackage cartrepository\n\nimport (\n\t\"database/sql\"\n\t\"errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\n// in memory repository adapter, we dont have any dependencies on other adapters so its empty\ntype SQLiteRepository struct {\n\tdb *sql.DB\n}\n\n// new in memory repository factory\nfunc NewSQLiteRepository() *SQLiteRepository {\n\tdb, err := sql.Open(\"sqlite3\", \"database/items.db\")\n\tif err != nil {\n\t\tlogrus.Fatal(\"Couldn't initialize sqlite db\")\n\t}\n\t_, err = db.Exec(\"create table if not exists items (id string, name text, description text)\")\n\tif err != nil {\n\t\tlogrus.WithField(\"error\", err.Error()).Fatal(\"Couldn't create initial items table\")\n\t}\n\treturn &SQLiteRepository{\n\t\tdb: db,\n\t}\n}\n\n// our implementation of the port\nfunc (r *SQLiteRepository) AddItemToDB(item *structs.Item) (string, error) {\n\tif item.Id == \"0\" {\n\t\treturn \"\", errors.New(\"cannot add item to db\")\n\t}\n\ttx, _ := r.db.Begin()\n\tstmt, _ := tx.Prepare(\"insert into items (id, name, description) values (?,?,?)\")\n\t_, err := stmt.Exec(item.Id, item.Name, item.Description)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn \"random id\", nil\n}\n\n// our implementation of the port\nfunc (r *SQLiteRepository) RemoveItemFromDB(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\nLets change our main.go\n\n```go\npackage main\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\tdriver \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n)\n\nfunc main() {\n\t// declare all ports\n\tvar ca cart.Port\n\tvar wh warehouse.Port\n\tvar re cartrepository.Port\n\tvar in driver.Port\n\n\twh = warehouse.NewConsoleWarehouse()\n\t//re = cartrepository.NewInMemoryRepository()\n\tre = cartrepository.NewSQLiteRepository()\n\tca = cart.NewCart(wh, re)\n\tin = driver.NewCliAdapter(ca)\n\n\tin.Run()\n}\n\n```\n\nLets run our main again\n\n```\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 1\nINFO[0000] Added new item                                description=\"used as trasnport\" id=1 name=bicycle\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 0\nERRO[0000] couldn't add item                             error=\"item is not available\"\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 11\nINFO[0000] Added new item                                description=\"used as trasnport\" id=11 name=bicycle\n\n```\n\nIt worked and all the data was saved.\nBy now you should be able to add a new adapter to any port, either driver or driven and interchange them without touching other parts of the system.\n\nA cool thing in Goland is we can easily see who implements our ports and reuse them by calling the adapter we want in `main.go`\n\n![](./goland.png)\n\n### Summary\nWe saw what is the Ports and Adapters pattern and how it is implemented in Golang.\nWe created an initial warehouse, cart, cartRepository and driver(in) ports.\nLater on, we added each port's adapter(implementation).\nAfterwards, we glued everything in main.go.\nBy Using this architectural pattern we saw how components can interchange on any functionality.\n\n\n","source":"_posts/Implementing-Ports-and-Adapters.md","raw":"---\ntitle: Implementing Ports and Adapters\ntags:\n  - Ports and Adapters\n  - Golang\n  - Hexagonal\n  - Software Architecture\ncategory: Architecture\ndate: 2020-02-01 18:15:21\nthumbnail: images/golang-ports-and-adapters.png\n---\n\nThere are different architectures that allow you to keep focus on your business domain and allow for fast paced development and changes. Examples would be: Clean Architecture, Onion Architecture and Ports and Adapters (also called hexagonal).\n[In my previous post](/2019/06/11/Implementing-Clean-Architecture/), I talked about Clean Architecture and how it helps get your code more modular and developer friendly after a somewhat short learning curve. After joining a new team, I noticed Clean Architecture did not really settle and the team found it to be somewhat over abstracted, so I decided to play around with a variation of Ports and Adapters.\nIn this post I will show what is Ports and Adapters and how I implemented it in Golang. Github repo is available [here](https://github.com/yuraxdrumz/ports-and-adapters-golang).\n\n### Disclaimer\nSome of the things that I am going to write and show are my personal experiences and opinions.\n\n### Core Idea\nPorts and Adapters architecture divides a system into several loosely-coupled interchangeable components. The components communicate with each other through abstracted API's with the use of interfaces and their implementations.\nThis approach is an alternative to the traditional layered architecture, where components are divided into layers. There are no layers in Ports and Adapters, only ports <- adapters, meaning there are no restrictions on how to structure the applications, only that an adapter relies on a port and the business logic port relies on other ports\n\n### Business Logic\nAll of your business specific use cases.\nExample: upon adding a user to a board, send an email, save the user in the database and grant the user permissions to view the board from an auth service.\n\n\n### Ports\nThe interfaces to all of the components in your system. There are two kinds of ports: driven and driver.\n\n#### Driven Ports\nInterfaces that your application business logic uses for its needs. \n\n#### Driver Ports\nInterfaces for the outside world, a.k.a API\n\n### Adapters\nImplementations of our ports. They can be either driven or driver, depending on the port we use\n\n#### Driven Adapter\nExample: Service-To-Service adapter, for when we need to request some data from another service in our business logic use case\n\n#### Driver Adapter\nExample: GUI adapter, for when we need to convert events triggered by a GUI app to events defined by other ports\n\n### Prerequisites\nBecause Ports and Adapters does not define a specific folder structure, I will not focus on it, but you can take a reference from the structure in the github repository.\nOne thing to note is I replaced the `driven` ports with the name `out` and the driver ports with the name `in`, as it confused developers that are new to Ports and Adapters\nI like to name my packages as `package/ports`, and the adapters, like `package/console.go`, `package/web.go`, meaning there are two adapters, one is console and one is web for a specific port, that way it is easier to know what is implemented where.\nRegarding the structs, I prefer putting them in each package as a sub package, in order to avoid cyclic import dependencies. `package/ports/...`\n\n### Ports and Adapters In Practice\nlets build a shopping cart. Our cart will have two use cases, `addToCart` and `removeFromCart`. Let's say that we need a warehouse service and a database to save the changes.\n\nWe can create one port for all the use cases regarding the cart, or we can do a port per use case in the cart. It is up to you and the level of abstraction you seek.\nI chose to put all the cart use cases under one port.\n\n#### Ports In Practice\n\n##### Driven ports\n\nOur warehouse package ports will look like this:\n`warehouse/ports.go`\n\n```go\npackage warehouse\n\ntype Port interface {\n\tCheckIfAvailable(itemID string) (bool, error)\n\tRemoveItemFromWarehouse(itemID string) (bool, error)\n}\n\n```\n\nOur cart repository package ports will look like this:\n`cartRepository/ports.go`\n\n```go\npackage cartrepository\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n)\n\ntype Port interface {\n\tAddItemToDB(item *structs.Item) (string, error)\n\tRemoveItemFromDB(itemID string) (bool, error)\n}\n```\n\nI like to use the repository design pattern to abstract database interaction. \nI already wrote about it [here](/2019/06/11/Implementing-Clean-Architecture/#Repository-Pattern).\n\n\nLet's see an example of the port for the cart.\n`cart/ports.go`\n```go\npackage cart\n\nimport \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\ntype Port interface {\n\tAdd(item structs.Item) error\n\tRemove(itemID string) error\n}\n\n\n```\n\n##### Driver Ports\n`driver/ports.go`\n```go\npackage driver\n\n// Port - how an adapter can use the app\ntype Port interface {\n\tRun()\n}\n\n```\n\nNow that we finished the ports part, lets look at the adapters.\nWe will first create simple adapters, like in memory repository adapter and a console warehouse adapter so that we can start using the app.\nAfterwards, we will create an sql adapter to show how Ports and Adapters come to our advantage.\n\n#### Adapters In Practice\n##### Driven Adapters\n\n`warehouse/console.go`\n```go\npackage warehouse\n\nimport (\n\t\"errors\"\n)\n\n// our console warehouse struct with all the adapters it uses, in this case with the console adapter we dont need any dependencies\ntype ConsoleWarehouse struct {}\n\n// a new console warehouse factory\nfunc NewConsoleWarehouse() *ConsoleWarehouse {\n\treturn &ConsoleWarehouse{}\n}\n\n// our implementation of the port for console warehouse\nfunc (w *ConsoleWarehouse) CheckIfAvailable(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item is not available\")\n\t}\n\treturn true, nil\n}\n\n// our implementation of the port for console warehouse\nfunc (w *ConsoleWarehouse) RemoveItemFromWarehouse(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed from warehouse, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\n`cartRepository/inMemory.go`\n```go\npackage cartrepository\n\nimport (\n\t\"errors\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n)\n\n// in memory repository adapter, we dont have any dependencies on other adapters so its empty\ntype InMemoryRepository struct {}\n\n// new in memory repository factory\nfunc NewInMemoryRepository() *InMemoryRepository {\n\treturn &InMemoryRepository{}\n}\n\n// our implementation of the port\nfunc (r *InMemoryRepository) AddItemToDB(item *structs.Item) (bool, error) {\n\tif item.Id == \"0\" {\n\t\treturn false, errors.New(\"cannot add item to db\")\n\t}\n\treturn true, nil\n}\n\n// our implementation of the port\nfunc (r *InMemoryRepository) RemoveItemFromDB(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\nLets see the cart adapter with Add implemented\n\n`cart/cart.go`\n\n```go\n\npackage cart\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"sync\"\n)\n\ntype Cart struct {\n\twh   warehouse.Port\n\trepo cartrepository.Port\n\tmutex sync.Mutex\n}\n\nfunc NewCart(wh warehouse.Port, repo cartrepository.Port) *Cart {\n\treturn &Cart{\n\t\twh:   wh,\n\t\trepo: repo,\n\t}\n}\n\nfunc (c *Cart) Add(item *structs.Item) error {\n\tc.mutex.Lock()\n\tdefer c.mutex.Unlock()\n\t\n\tisAvailable, err := c.wh.CheckIfAvailable(item.Id)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif isAvailable {\n\t\t_, err = c.repo.AddItemToDB(item)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (c *Cart) Remove(itemID string) error {\n\treturn nil\n}\n```\n\nAt this point we have our cart, warehouse and repository ports and adapters implemented, all these ports are driven, because our app uses them internally.\nNow, we need a driver adapter.\n\nLet's create a cli adapter which receives the item, id and description from the cli.\n\n##### Driver Adapter\n`driver/cli.go`\n\n```go\npackage driver\n\nimport (\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\t\"github.com/urfave/cli/v2\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t\"os\"\n)\n\n// CliAdapter - struct with necessary ports to run\ntype CliAdapter struct {\n\tca cart.Port\n}\n\n// NewCliAdapter - create a new instance of NewCliAdapter with passed implementations\nfunc NewCliAdapter(ca cart.Port) *CliAdapter {\n\treturn &CliAdapter{ca: ca}\n}\n\n// Run - initializes cli adapter run\nfunc (in *CliAdapter) Run() {\n\tapp := &cli.App{\n\t\tName: \"cart\",\n\t\tUsage: \"handle cart from cli\",\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"item\",\n\t\t\t\tUsage: \"item to add\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"description\",\n\t\t\t\tUsage: \"description for the item\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName: \"id\",\n\t\t\t\tUsage: \"item id\",\n\t\t\t\tRequired: true,\n\t\t\t},\n\t\t},\n\t\tAction: func(c *cli.Context) error {\n\n\t\t\titem := &structs.Item{\n\t\t\t\tName:        c.String(\"item\"),\n\t\t\t\tId:          c.String(\"id\"),\n\t\t\t\tDescription: c.String(\"description\"),\n\t\t\t}\n\t\t\terr := in.ca.Add(item)\n\t\t\tif err != nil {\n\t\t\t\tlogrus.WithField(\"error\", err.Error()).Error(\"couldn't add item\")\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tlogrus.WithFields(logrus.Fields{\n\t\t\t\t\"name\": item.Name,\n\t\t\t\t\"description\": item.Description,\n\t\t\t\t\"id\": item.Id,\n\t\t\t}).Info(\"Added new item\")\n\t\t\treturn nil\n\t\t},\n\t}\n\terr := app.Run(os.Args)\n\n\tif err != nil {\n\t\tlogrus.Fatal(err)\n\t}\n}\n\n```\n\nNow lets glue everything together in `main.go`\n\n`main.go`\n\n```go\npackage main\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\tdriver \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n)\n\nfunc main() {\n\t// declare all ports\n\tvar ca cart.Port\n\tvar wh warehouse.Port\n\tvar re cartrepository.Port\n\tvar in driver.Port\n\n\twh = warehouse.NewConsoleWarehouse()\n\tre = cartrepository.NewInMemoryRepository()\n\tca = cart.NewCart(wh, re)\n\tin = driver.NewCliAdapter(ca)\n\n\tin.Run()\n}\n\n```\n\nNow, if we run `go run main.go`, we will get\n\n```\n❯ go run main.go\nNAME:\n   cart - handle cart from cli\n\nUSAGE:\n   main [global options] command [command options] [arguments...]\n\nCOMMANDS:\n   help, h  Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --item value         item to add\n   --description value  description for the item\n   --id value           item id\n   --help, -h           show help (default: false)\nFATA[0000] Required flags \"item, description, id\" not set \nexit status 1\n\n\n```\n\nLets add an item with id 0 that is supposed to fail and with an id of 1 that is supposed to succeed\n\n```\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 1\nINFO[0000] Added new item                                description=\"used as trasnport\" id=1 name=bicycle\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 0\nERRO[0000] couldn't add item                             error=\"item is not available\"\n\n```\n\nIt worked!\n\nNow, let's create a new sql adapter for the repository\n\n`cartRepository/sqlite.go`\n```go\npackage cartrepository\n\nimport (\n\t\"database/sql\"\n\t\"errors\"\n\t\"github.com/sirupsen/logrus\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\n// in memory repository adapter, we dont have any dependencies on other adapters so its empty\ntype SQLiteRepository struct {\n\tdb *sql.DB\n}\n\n// new in memory repository factory\nfunc NewSQLiteRepository() *SQLiteRepository {\n\tdb, err := sql.Open(\"sqlite3\", \"database/items.db\")\n\tif err != nil {\n\t\tlogrus.Fatal(\"Couldn't initialize sqlite db\")\n\t}\n\t_, err = db.Exec(\"create table if not exists items (id string, name text, description text)\")\n\tif err != nil {\n\t\tlogrus.WithField(\"error\", err.Error()).Fatal(\"Couldn't create initial items table\")\n\t}\n\treturn &SQLiteRepository{\n\t\tdb: db,\n\t}\n}\n\n// our implementation of the port\nfunc (r *SQLiteRepository) AddItemToDB(item *structs.Item) (string, error) {\n\tif item.Id == \"0\" {\n\t\treturn \"\", errors.New(\"cannot add item to db\")\n\t}\n\ttx, _ := r.db.Begin()\n\tstmt, _ := tx.Prepare(\"insert into items (id, name, description) values (?,?,?)\")\n\t_, err := stmt.Exec(item.Id, item.Name, item.Description)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\terr = tx.Commit()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn \"random id\", nil\n}\n\n// our implementation of the port\nfunc (r *SQLiteRepository) RemoveItemFromDB(itemID string) (bool, error) {\n\tif itemID == \"0\" {\n\t\treturn false, errors.New(\"item cannot be removed, please check again later\")\n\t}\n\treturn true, nil\n}\n```\n\nLets change our main.go\n\n```go\npackage main\n\nimport (\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart\"\n\tdriver \"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse\"\n\t\"github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository\"\n)\n\nfunc main() {\n\t// declare all ports\n\tvar ca cart.Port\n\tvar wh warehouse.Port\n\tvar re cartrepository.Port\n\tvar in driver.Port\n\n\twh = warehouse.NewConsoleWarehouse()\n\t//re = cartrepository.NewInMemoryRepository()\n\tre = cartrepository.NewSQLiteRepository()\n\tca = cart.NewCart(wh, re)\n\tin = driver.NewCliAdapter(ca)\n\n\tin.Run()\n}\n\n```\n\nLets run our main again\n\n```\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 1\nINFO[0000] Added new item                                description=\"used as trasnport\" id=1 name=bicycle\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 0\nERRO[0000] couldn't add item                             error=\"item is not available\"\n❯ go run main.go --item bicycle --description \"used as trasnport\" --id 11\nINFO[0000] Added new item                                description=\"used as trasnport\" id=11 name=bicycle\n\n```\n\nIt worked and all the data was saved.\nBy now you should be able to add a new adapter to any port, either driver or driven and interchange them without touching other parts of the system.\n\nA cool thing in Goland is we can easily see who implements our ports and reuse them by calling the adapter we want in `main.go`\n\n![](./goland.png)\n\n### Summary\nWe saw what is the Ports and Adapters pattern and how it is implemented in Golang.\nWe created an initial warehouse, cart, cartRepository and driver(in) ports.\nLater on, we added each port's adapter(implementation).\nAfterwards, we glued everything in main.go.\nBy Using this architectural pattern we saw how components can interchange on any functionality.\n\n\n","slug":"Implementing-Ports-and-Adapters","published":1,"updated":"2021-01-22T11:07:55.950Z","_id":"ckravj1n5001578ta69oihplm","comments":1,"layout":"post","photos":[],"link":"","content":"<p>There are different architectures that allow you to keep focus on your business domain and allow for fast paced development and changes. Examples would be: Clean Architecture, Onion Architecture and Ports and Adapters (also called hexagonal).<br><a href=\"/2019/06/11/Implementing-Clean-Architecture/\">In my previous post</a>, I talked about Clean Architecture and how it helps get your code more modular and developer friendly after a somewhat short learning curve. After joining a new team, I noticed Clean Architecture did not really settle and the team found it to be somewhat over abstracted, so I decided to play around with a variation of Ports and Adapters.<br>In this post I will show what is Ports and Adapters and how I implemented it in Golang. Github repo is available <a href=\"https://github.com/yuraxdrumz/ports-and-adapters-golang\">here</a>.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>Some of the things that I am going to write and show are my personal experiences and opinions.</p>\n<h3 id=\"Core-Idea\"><a href=\"#Core-Idea\" class=\"headerlink\" title=\"Core Idea\"></a>Core Idea</h3><p>Ports and Adapters architecture divides a system into several loosely-coupled interchangeable components. The components communicate with each other through abstracted API’s with the use of interfaces and their implementations.<br>This approach is an alternative to the traditional layered architecture, where components are divided into layers. There are no layers in Ports and Adapters, only ports &lt;- adapters, meaning there are no restrictions on how to structure the applications, only that an adapter relies on a port and the business logic port relies on other ports</p>\n<h3 id=\"Business-Logic\"><a href=\"#Business-Logic\" class=\"headerlink\" title=\"Business Logic\"></a>Business Logic</h3><p>All of your business specific use cases.<br>Example: upon adding a user to a board, send an email, save the user in the database and grant the user permissions to view the board from an auth service.</p>\n<h3 id=\"Ports\"><a href=\"#Ports\" class=\"headerlink\" title=\"Ports\"></a>Ports</h3><p>The interfaces to all of the components in your system. There are two kinds of ports: driven and driver.</p>\n<h4 id=\"Driven-Ports\"><a href=\"#Driven-Ports\" class=\"headerlink\" title=\"Driven Ports\"></a>Driven Ports</h4><p>Interfaces that your application business logic uses for its needs. </p>\n<h4 id=\"Driver-Ports\"><a href=\"#Driver-Ports\" class=\"headerlink\" title=\"Driver Ports\"></a>Driver Ports</h4><p>Interfaces for the outside world, a.k.a API</p>\n<h3 id=\"Adapters\"><a href=\"#Adapters\" class=\"headerlink\" title=\"Adapters\"></a>Adapters</h3><p>Implementations of our ports. They can be either driven or driver, depending on the port we use</p>\n<h4 id=\"Driven-Adapter\"><a href=\"#Driven-Adapter\" class=\"headerlink\" title=\"Driven Adapter\"></a>Driven Adapter</h4><p>Example: Service-To-Service adapter, for when we need to request some data from another service in our business logic use case</p>\n<h4 id=\"Driver-Adapter\"><a href=\"#Driver-Adapter\" class=\"headerlink\" title=\"Driver Adapter\"></a>Driver Adapter</h4><p>Example: GUI adapter, for when we need to convert events triggered by a GUI app to events defined by other ports</p>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3><p>Because Ports and Adapters does not define a specific folder structure, I will not focus on it, but you can take a reference from the structure in the github repository.<br>One thing to note is I replaced the <code>driven</code> ports with the name <code>out</code> and the driver ports with the name <code>in</code>, as it confused developers that are new to Ports and Adapters<br>I like to name my packages as <code>package/ports</code>, and the adapters, like <code>package/console.go</code>, <code>package/web.go</code>, meaning there are two adapters, one is console and one is web for a specific port, that way it is easier to know what is implemented where.<br>Regarding the structs, I prefer putting them in each package as a sub package, in order to avoid cyclic import dependencies. <code>package/ports/...</code></p>\n<h3 id=\"Ports-and-Adapters-In-Practice\"><a href=\"#Ports-and-Adapters-In-Practice\" class=\"headerlink\" title=\"Ports and Adapters In Practice\"></a>Ports and Adapters In Practice</h3><p>lets build a shopping cart. Our cart will have two use cases, <code>addToCart</code> and <code>removeFromCart</code>. Let’s say that we need a warehouse service and a database to save the changes.</p>\n<p>We can create one port for all the use cases regarding the cart, or we can do a port per use case in the cart. It is up to you and the level of abstraction you seek.<br>I chose to put all the cart use cases under one port.</p>\n<h4 id=\"Ports-In-Practice\"><a href=\"#Ports-In-Practice\" class=\"headerlink\" title=\"Ports In Practice\"></a>Ports In Practice</h4><h5 id=\"Driven-ports\"><a href=\"#Driven-ports\" class=\"headerlink\" title=\"Driven ports\"></a>Driven ports</h5><p>Our warehouse package ports will look like this:<br><code>warehouse/ports.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> warehouse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Port <span class=\"hljs-keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCheckIfAvailable(itemID <span class=\"hljs-keyword\">string</span>) (<span class=\"hljs-keyword\">bool</span>, error)</span><br><span class=\"line\">\tRemoveItemFromWarehouse(itemID <span class=\"hljs-keyword\">string</span>) (<span class=\"hljs-keyword\">bool</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Our cart repository package ports will look like this:<br><code>cartRepository/ports.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Port <span class=\"hljs-keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddItemToDB(item *structs.Item) (<span class=\"hljs-keyword\">string</span>, error)</span><br><span class=\"line\">\tRemoveItemFromDB(itemID <span class=\"hljs-keyword\">string</span>) (<span class=\"hljs-keyword\">bool</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I like to use the repository design pattern to abstract database interaction.<br>I already wrote about it <a href=\"/2019/06/11/Implementing-Clean-Architecture/#Repository-Pattern\">here</a>.</p>\n<p>Let’s see an example of the port for the cart.<br><code>cart/ports.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> cart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Port <span class=\"hljs-keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAdd(item structs.Item) error</span><br><span class=\"line\">\tRemove(itemID <span class=\"hljs-keyword\">string</span>) error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Driver-Ports-1\"><a href=\"#Driver-Ports-1\" class=\"headerlink\" title=\"Driver Ports\"></a>Driver Ports</h5><p><code>driver/ports.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// Port - how an adapter can use the app</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Port <span class=\"hljs-keyword\">interface</span> &#123;</span><br><span class=\"line\">\tRun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now that we finished the ports part, lets look at the adapters.<br>We will first create simple adapters, like in memory repository adapter and a console warehouse adapter so that we can start using the app.<br>Afterwards, we will create an sql adapter to show how Ports and Adapters come to our advantage.</p>\n<h4 id=\"Adapters-In-Practice\"><a href=\"#Adapters-In-Practice\" class=\"headerlink\" title=\"Adapters In Practice\"></a>Adapters In Practice</h4><h5 id=\"Driven-Adapters\"><a href=\"#Driven-Adapters\" class=\"headerlink\" title=\"Driven Adapters\"></a>Driven Adapters</h5><p><code>warehouse/console.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> warehouse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;errors&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our console warehouse struct with all the adapters it uses, in this case with the console adapter we dont need any dependencies</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> ConsoleWarehouse <span class=\"hljs-keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// a new console warehouse factory</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewConsoleWarehouse</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">ConsoleWarehouse</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> &amp;ConsoleWarehouse&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port for console warehouse</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(w *ConsoleWarehouse)</span> <span class=\"hljs-title\">CheckIfAvailable</span><span class=\"hljs-params\">(itemID <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> itemID == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, errors.New(<span class=\"hljs-string\">&quot;item is not available&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port for console warehouse</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(w *ConsoleWarehouse)</span> <span class=\"hljs-title\">RemoveItemFromWarehouse</span><span class=\"hljs-params\">(itemID <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> itemID == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, errors.New(<span class=\"hljs-string\">&quot;item cannot be removed from warehouse, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>cartRepository/inMemory.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;errors&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// in memory repository adapter, we dont have any dependencies on other adapters so its empty</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> InMemoryRepository <span class=\"hljs-keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// new in memory repository factory</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewInMemoryRepository</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">InMemoryRepository</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> &amp;InMemoryRepository&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *InMemoryRepository)</span> <span class=\"hljs-title\">AddItemToDB</span><span class=\"hljs-params\">(item *structs.Item)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> item.Id == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, errors.New(<span class=\"hljs-string\">&quot;cannot add item to db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *InMemoryRepository)</span> <span class=\"hljs-title\">RemoveItemFromDB</span><span class=\"hljs-params\">(itemID <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> itemID == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, errors.New(<span class=\"hljs-string\">&quot;item cannot be removed, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets see the cart adapter with Add implemented</p>\n<p><code>cart/cart.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">package</span> cart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> Cart <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">\twh   warehouse.Port</span><br><span class=\"line\">\trepo cartrepository.Port</span><br><span class=\"line\">\tmutex sync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewCart</span><span class=\"hljs-params\">(wh warehouse.Port, repo cartrepository.Port)</span> *<span class=\"hljs-title\">Cart</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> &amp;Cart&#123;</span><br><span class=\"line\">\t\twh:   wh,</span><br><span class=\"line\">\t\trepo: repo,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Cart)</span> <span class=\"hljs-title\">Add</span><span class=\"hljs-params\">(item *structs.Item)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">\tc.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">defer</span> c.mutex.Unlock()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tisAvailable, err := c.wh.CheckIfAvailable(item.Id)</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> isAvailable &#123;</span><br><span class=\"line\">\t\t_, err = c.repo.AddItemToDB(item)</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"hljs-keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Cart)</span> <span class=\"hljs-title\">Remove</span><span class=\"hljs-params\">(itemID <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>At this point we have our cart, warehouse and repository ports and adapters implemented, all these ports are driven, because our app uses them internally.<br>Now, we need a driver adapter.</p>\n<p>Let’s create a cli adapter which receives the item, id and description from the cli.</p>\n<h5 id=\"Driver-Adapter-1\"><a href=\"#Driver-Adapter-1\" class=\"headerlink\" title=\"Driver Adapter\"></a>Driver Adapter</h5><p><code>driver/cli.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/urfave/cli/v2&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// CliAdapter - struct with necessary ports to run</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> CliAdapter <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">\tca cart.Port</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// NewCliAdapter - create a new instance of NewCliAdapter with passed implementations</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewCliAdapter</span><span class=\"hljs-params\">(ca cart.Port)</span> *<span class=\"hljs-title\">CliAdapter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> &amp;CliAdapter&#123;ca: ca&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// Run - initializes cli adapter run</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(in *CliAdapter)</span> <span class=\"hljs-title\">Run</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">\tapp := &amp;cli.App&#123;</span><br><span class=\"line\">\t\tName: <span class=\"hljs-string\">&quot;cart&quot;</span>,</span><br><span class=\"line\">\t\tUsage: <span class=\"hljs-string\">&quot;handle cart from cli&quot;</span>,</span><br><span class=\"line\">\t\tFlags: []cli.Flag&#123;</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"hljs-string\">&quot;item&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"hljs-string\">&quot;item to add&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"hljs-string\">&quot;description&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"hljs-string\">&quot;description for the item&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"hljs-string\">&quot;id&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"hljs-string\">&quot;item id&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"hljs-literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tAction: <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *cli.Context)</span> <span class=\"hljs-title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\titem := &amp;structs.Item&#123;</span><br><span class=\"line\">\t\t\t\tName:        c.String(<span class=\"hljs-string\">&quot;item&quot;</span>),</span><br><span class=\"line\">\t\t\t\tId:          c.String(<span class=\"hljs-string\">&quot;id&quot;</span>),</span><br><span class=\"line\">\t\t\t\tDescription: c.String(<span class=\"hljs-string\">&quot;description&quot;</span>),</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr := in.ca.Add(item)</span><br><span class=\"line\">\t\t\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlogrus.WithField(<span class=\"hljs-string\">&quot;error&quot;</span>, err.Error()).Error(<span class=\"hljs-string\">&quot;couldn&#x27;t add item&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlogrus.WithFields(logrus.Fields&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"hljs-string\">&quot;name&quot;</span>: item.Name,</span><br><span class=\"line\">\t\t\t\t<span class=\"hljs-string\">&quot;description&quot;</span>: item.Description,</span><br><span class=\"line\">\t\t\t\t<span class=\"hljs-string\">&quot;id&quot;</span>: item.Id,</span><br><span class=\"line\">\t\t\t&#125;).Info(<span class=\"hljs-string\">&quot;Added new item&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := app.Run(os.Args)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now lets glue everything together in <code>main.go</code></p>\n<p><code>main.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\tdriver <span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-comment\">// declare all ports</span></span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> ca cart.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> wh warehouse.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> re cartrepository.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> in driver.Port</span><br><span class=\"line\"></span><br><span class=\"line\">\twh = warehouse.NewConsoleWarehouse()</span><br><span class=\"line\">\tre = cartrepository.NewInMemoryRepository()</span><br><span class=\"line\">\tca = cart.NewCart(wh, re)</span><br><span class=\"line\">\tin = driver.NewCliAdapter(ca)</span><br><span class=\"line\"></span><br><span class=\"line\">\tin.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now, if we run <code>go run main.go</code>, we will get</p>\n<figure class=\"highlight plaintext hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go</span><br><span class=\"line\">NAME:</span><br><span class=\"line\">   cart - handle cart from cli</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE:</span><br><span class=\"line\">   main [global options] command [command options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   help, h  Shows a list of commands or help for one command</span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --item value         item to add</span><br><span class=\"line\">   --description value  description for the item</span><br><span class=\"line\">   --id value           item id</span><br><span class=\"line\">   --help, -h           show help (default: false)</span><br><span class=\"line\">FATA[0000] Required flags &quot;item, description, id&quot; not set </span><br><span class=\"line\">exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Lets add an item with id 0 that is supposed to fail and with an id of 1 that is supposed to succeed</p>\n<figure class=\"highlight plaintext hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 1</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=1 name=bicycle</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 0</span><br><span class=\"line\">ERRO[0000] couldn&#x27;t add item                             error=&quot;item is not available&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>It worked!</p>\n<p>Now, let’s create a new sql adapter for the repository</p>\n<p><code>cartRepository/sqlite.go</code></p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;errors&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t_ <span class=\"hljs-string\">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// in memory repository adapter, we dont have any dependencies on other adapters so its empty</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">type</span> SQLiteRepository <span class=\"hljs-keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdb *sql.DB</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// new in memory repository factory</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">NewSQLiteRepository</span><span class=\"hljs-params\">()</span> *<span class=\"hljs-title\">SQLiteRepository</span></span> &#123;</span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"hljs-string\">&quot;sqlite3&quot;</span>, <span class=\"hljs-string\">&quot;database/items.db&quot;</span>)</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.Fatal(<span class=\"hljs-string\">&quot;Couldn&#x27;t initialize sqlite db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_, err = db.Exec(<span class=\"hljs-string\">&quot;create table if not exists items (id string, name text, description text)&quot;</span>)</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.WithField(<span class=\"hljs-string\">&quot;error&quot;</span>, err.Error()).Fatal(<span class=\"hljs-string\">&quot;Couldn&#x27;t create initial items table&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> &amp;SQLiteRepository&#123;</span><br><span class=\"line\">\t\tdb: db,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *SQLiteRepository)</span> <span class=\"hljs-title\">AddItemToDB</span><span class=\"hljs-params\">(item *structs.Item)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> item.Id == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, errors.New(<span class=\"hljs-string\">&quot;cannot add item to db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttx, _ := r.db.Begin()</span><br><span class=\"line\">\tstmt, _ := tx.Prepare(<span class=\"hljs-string\">&quot;insert into items (id, name, description) values (?,?,?)&quot;</span>)</span><br><span class=\"line\">\t_, err := stmt.Exec(item.Id, item.Name, item.Description)</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = tx.Commit()</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;random id&quot;</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(r *SQLiteRepository)</span> <span class=\"hljs-title\">RemoveItemFromDB</span><span class=\"hljs-params\">(itemID <span class=\"hljs-keyword\">string</span>)</span> <span class=\"hljs-params\">(<span class=\"hljs-keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">if</span> itemID == <span class=\"hljs-string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>, errors.New(<span class=\"hljs-string\">&quot;item cannot be removed, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>, <span class=\"hljs-literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets change our main.go</p>\n<figure class=\"highlight go hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\tdriver <span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"hljs-string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"hljs-comment\">// declare all ports</span></span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> ca cart.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> wh warehouse.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> re cartrepository.Port</span><br><span class=\"line\">\t<span class=\"hljs-keyword\">var</span> in driver.Port</span><br><span class=\"line\"></span><br><span class=\"line\">\twh = warehouse.NewConsoleWarehouse()</span><br><span class=\"line\">\t<span class=\"hljs-comment\">//re = cartrepository.NewInMemoryRepository()</span></span><br><span class=\"line\">\tre = cartrepository.NewSQLiteRepository()</span><br><span class=\"line\">\tca = cart.NewCart(wh, re)</span><br><span class=\"line\">\tin = driver.NewCliAdapter(ca)</span><br><span class=\"line\"></span><br><span class=\"line\">\tin.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Lets run our main again</p>\n<figure class=\"highlight plaintext hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 1</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=1 name=bicycle</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 0</span><br><span class=\"line\">ERRO[0000] couldn&#x27;t add item                             error=&quot;item is not available&quot;</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 11</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=11 name=bicycle</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>It worked and all the data was saved.<br>By now you should be able to add a new adapter to any port, either driver or driven and interchange them without touching other parts of the system.</p>\n<p>A cool thing in Goland is we can easily see who implements our ports and reuse them by calling the adapter we want in <code>main.go</code></p>\n<p><img src=\"/2020/02/01/Implementing-Ports-and-Adapters/goland.png\" alt></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>We saw what is the Ports and Adapters pattern and how it is implemented in Golang.<br>We created an initial warehouse, cart, cartRepository and driver(in) ports.<br>Later on, we added each port’s adapter(implementation).<br>Afterwards, we glued everything in main.go.<br>By Using this architectural pattern we saw how components can interchange on any functionality.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>There are different architectures that allow you to keep focus on your business domain and allow for fast paced development and changes. Examples would be: Clean Architecture, Onion Architecture and Ports and Adapters (also called hexagonal).<br><a href=\"/2019/06/11/Implementing-Clean-Architecture/\">In my previous post</a>, I talked about Clean Architecture and how it helps get your code more modular and developer friendly after a somewhat short learning curve. After joining a new team, I noticed Clean Architecture did not really settle and the team found it to be somewhat over abstracted, so I decided to play around with a variation of Ports and Adapters.<br>In this post I will show what is Ports and Adapters and how I implemented it in Golang. Github repo is available <a href=\"https://github.com/yuraxdrumz/ports-and-adapters-golang\">here</a>.</p>\n<h3 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h3><p>Some of the things that I am going to write and show are my personal experiences and opinions.</p>\n<h3 id=\"Core-Idea\"><a href=\"#Core-Idea\" class=\"headerlink\" title=\"Core Idea\"></a>Core Idea</h3><p>Ports and Adapters architecture divides a system into several loosely-coupled interchangeable components. The components communicate with each other through abstracted API’s with the use of interfaces and their implementations.<br>This approach is an alternative to the traditional layered architecture, where components are divided into layers. There are no layers in Ports and Adapters, only ports &lt;- adapters, meaning there are no restrictions on how to structure the applications, only that an adapter relies on a port and the business logic port relies on other ports</p>\n<h3 id=\"Business-Logic\"><a href=\"#Business-Logic\" class=\"headerlink\" title=\"Business Logic\"></a>Business Logic</h3><p>All of your business specific use cases.<br>Example: upon adding a user to a board, send an email, save the user in the database and grant the user permissions to view the board from an auth service.</p>\n<h3 id=\"Ports\"><a href=\"#Ports\" class=\"headerlink\" title=\"Ports\"></a>Ports</h3><p>The interfaces to all of the components in your system. There are two kinds of ports: driven and driver.</p>\n<h4 id=\"Driven-Ports\"><a href=\"#Driven-Ports\" class=\"headerlink\" title=\"Driven Ports\"></a>Driven Ports</h4><p>Interfaces that your application business logic uses for its needs. </p>\n<h4 id=\"Driver-Ports\"><a href=\"#Driver-Ports\" class=\"headerlink\" title=\"Driver Ports\"></a>Driver Ports</h4><p>Interfaces for the outside world, a.k.a API</p>\n<h3 id=\"Adapters\"><a href=\"#Adapters\" class=\"headerlink\" title=\"Adapters\"></a>Adapters</h3><p>Implementations of our ports. They can be either driven or driver, depending on the port we use</p>\n<h4 id=\"Driven-Adapter\"><a href=\"#Driven-Adapter\" class=\"headerlink\" title=\"Driven Adapter\"></a>Driven Adapter</h4><p>Example: Service-To-Service adapter, for when we need to request some data from another service in our business logic use case</p>\n<h4 id=\"Driver-Adapter\"><a href=\"#Driver-Adapter\" class=\"headerlink\" title=\"Driver Adapter\"></a>Driver Adapter</h4><p>Example: GUI adapter, for when we need to convert events triggered by a GUI app to events defined by other ports</p>\n<h3 id=\"Prerequisites\"><a href=\"#Prerequisites\" class=\"headerlink\" title=\"Prerequisites\"></a>Prerequisites</h3><p>Because Ports and Adapters does not define a specific folder structure, I will not focus on it, but you can take a reference from the structure in the github repository.<br>One thing to note is I replaced the <code>driven</code> ports with the name <code>out</code> and the driver ports with the name <code>in</code>, as it confused developers that are new to Ports and Adapters<br>I like to name my packages as <code>package/ports</code>, and the adapters, like <code>package/console.go</code>, <code>package/web.go</code>, meaning there are two adapters, one is console and one is web for a specific port, that way it is easier to know what is implemented where.<br>Regarding the structs, I prefer putting them in each package as a sub package, in order to avoid cyclic import dependencies. <code>package/ports/...</code></p>\n<h3 id=\"Ports-and-Adapters-In-Practice\"><a href=\"#Ports-and-Adapters-In-Practice\" class=\"headerlink\" title=\"Ports and Adapters In Practice\"></a>Ports and Adapters In Practice</h3><p>lets build a shopping cart. Our cart will have two use cases, <code>addToCart</code> and <code>removeFromCart</code>. Let’s say that we need a warehouse service and a database to save the changes.</p>\n<p>We can create one port for all the use cases regarding the cart, or we can do a port per use case in the cart. It is up to you and the level of abstraction you seek.<br>I chose to put all the cart use cases under one port.</p>\n<h4 id=\"Ports-In-Practice\"><a href=\"#Ports-In-Practice\" class=\"headerlink\" title=\"Ports In Practice\"></a>Ports In Practice</h4><h5 id=\"Driven-ports\"><a href=\"#Driven-ports\" class=\"headerlink\" title=\"Driven ports\"></a>Driven ports</h5><p>Our warehouse package ports will look like this:<br><code>warehouse/ports.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> warehouse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Port <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tCheckIfAvailable(itemID <span class=\"keyword\">string</span>) (<span class=\"keyword\">bool</span>, error)</span><br><span class=\"line\">\tRemoveItemFromWarehouse(itemID <span class=\"keyword\">string</span>) (<span class=\"keyword\">bool</span>, error)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Our cart repository package ports will look like this:<br><code>cartRepository/ports.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Port <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAddItemToDB(item *structs.Item) (<span class=\"keyword\">string</span>, error)</span><br><span class=\"line\">\tRemoveItemFromDB(itemID <span class=\"keyword\">string</span>) (<span class=\"keyword\">bool</span>, error)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>I like to use the repository design pattern to abstract database interaction.<br>I already wrote about it <a href=\"/2019/06/11/Implementing-Clean-Architecture/#Repository-Pattern\">here</a>.</p>\n<p>Let’s see an example of the port for the cart.<br><code>cart/ports.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Port <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAdd(item structs.Item) error</span><br><span class=\"line\">\tRemove(itemID <span class=\"keyword\">string</span>) error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Driver-Ports-1\"><a href=\"#Driver-Ports-1\" class=\"headerlink\" title=\"Driver Ports\"></a>Driver Ports</h5><p><code>driver/ports.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Port - how an adapter can use the app</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Port <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tRun()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now that we finished the ports part, lets look at the adapters.<br>We will first create simple adapters, like in memory repository adapter and a console warehouse adapter so that we can start using the app.<br>Afterwards, we will create an sql adapter to show how Ports and Adapters come to our advantage.</p>\n<h4 id=\"Adapters-In-Practice\"><a href=\"#Adapters-In-Practice\" class=\"headerlink\" title=\"Adapters In Practice\"></a>Adapters In Practice</h4><h5 id=\"Driven-Adapters\"><a href=\"#Driven-Adapters\" class=\"headerlink\" title=\"Driven Adapters\"></a>Driven Adapters</h5><p><code>warehouse/console.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> warehouse</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our console warehouse struct with all the adapters it uses, in this case with the console adapter we dont need any dependencies</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> ConsoleWarehouse <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// a new console warehouse factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewConsoleWarehouse</span><span class=\"params\">()</span> *<span class=\"title\">ConsoleWarehouse</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;ConsoleWarehouse&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port for console warehouse</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *ConsoleWarehouse)</span> <span class=\"title\">CheckIfAvailable</span><span class=\"params\">(itemID <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> itemID == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.New(<span class=\"string\">&quot;item is not available&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port for console warehouse</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(w *ConsoleWarehouse)</span> <span class=\"title\">RemoveItemFromWarehouse</span><span class=\"params\">(itemID <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> itemID == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.New(<span class=\"string\">&quot;item cannot be removed from warehouse, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>cartRepository/inMemory.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in memory repository adapter, we dont have any dependencies on other adapters so its empty</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> InMemoryRepository <span class=\"keyword\">struct</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new in memory repository factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewInMemoryRepository</span><span class=\"params\">()</span> *<span class=\"title\">InMemoryRepository</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;InMemoryRepository&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *InMemoryRepository)</span> <span class=\"title\">AddItemToDB</span><span class=\"params\">(item *structs.Item)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> item.Id == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.New(<span class=\"string\">&quot;cannot add item to db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *InMemoryRepository)</span> <span class=\"title\">RemoveItemFromDB</span><span class=\"params\">(itemID <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> itemID == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.New(<span class=\"string\">&quot;item cannot be removed, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets see the cart adapter with Add implemented</p>\n<p><code>cart/cart.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> cart</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Cart <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twh   warehouse.Port</span><br><span class=\"line\">\trepo cartrepository.Port</span><br><span class=\"line\">\tmutex sync.Mutex</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewCart</span><span class=\"params\">(wh warehouse.Port, repo cartrepository.Port)</span> *<span class=\"title\">Cart</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Cart&#123;</span><br><span class=\"line\">\t\twh:   wh,</span><br><span class=\"line\">\t\trepo: repo,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cart)</span> <span class=\"title\">Add</span><span class=\"params\">(item *structs.Item)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\tc.mutex.Lock()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.mutex.Unlock()</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tisAvailable, err := c.wh.CheckIfAvailable(item.Id)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> isAvailable &#123;</span><br><span class=\"line\">\t\t_, err = c.repo.AddItemToDB(item)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Cart)</span> <span class=\"title\">Remove</span><span class=\"params\">(itemID <span class=\"keyword\">string</span>)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>At this point we have our cart, warehouse and repository ports and adapters implemented, all these ports are driven, because our app uses them internally.<br>Now, we need a driver adapter.</p>\n<p>Let’s create a cli adapter which receives the item, id and description from the cli.</p>\n<h5 id=\"Driver-Adapter-1\"><a href=\"#Driver-Adapter-1\" class=\"headerlink\" title=\"Driver Adapter\"></a>Driver Adapter</h5><p><code>driver/cli.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/urfave/cli/v2&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CliAdapter - struct with necessary ports to run</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> CliAdapter <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tca cart.Port</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewCliAdapter - create a new instance of NewCliAdapter with passed implementations</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewCliAdapter</span><span class=\"params\">(ca cart.Port)</span> *<span class=\"title\">CliAdapter</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;CliAdapter&#123;ca: ca&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Run - initializes cli adapter run</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(in *CliAdapter)</span> <span class=\"title\">Run</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tapp := &amp;cli.App&#123;</span><br><span class=\"line\">\t\tName: <span class=\"string\">&quot;cart&quot;</span>,</span><br><span class=\"line\">\t\tUsage: <span class=\"string\">&quot;handle cart from cli&quot;</span>,</span><br><span class=\"line\">\t\tFlags: []cli.Flag&#123;</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"string\">&quot;item&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"string\">&quot;item to add&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"string\">&quot;description&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"string\">&quot;description for the item&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t&amp;cli.StringFlag&#123;</span><br><span class=\"line\">\t\t\t\tName: <span class=\"string\">&quot;id&quot;</span>,</span><br><span class=\"line\">\t\t\t\tUsage: <span class=\"string\">&quot;item id&quot;</span>,</span><br><span class=\"line\">\t\t\t\tRequired: <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tAction: <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *cli.Context)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\titem := &amp;structs.Item&#123;</span><br><span class=\"line\">\t\t\t\tName:        c.String(<span class=\"string\">&quot;item&quot;</span>),</span><br><span class=\"line\">\t\t\t\tId:          c.String(<span class=\"string\">&quot;id&quot;</span>),</span><br><span class=\"line\">\t\t\t\tDescription: c.String(<span class=\"string\">&quot;description&quot;</span>),</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\terr := in.ca.Add(item)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\t\tlogrus.WithField(<span class=\"string\">&quot;error&quot;</span>, err.Error()).Error(<span class=\"string\">&quot;couldn&#x27;t add item&quot;</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tlogrus.WithFields(logrus.Fields&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;name&quot;</span>: item.Name,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;description&quot;</span>: item.Description,</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">&quot;id&quot;</span>: item.Id,</span><br><span class=\"line\">\t\t\t&#125;).Info(<span class=\"string\">&quot;Added new item&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr := app.Run(os.Args)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.Fatal(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now lets glue everything together in <code>main.go</code></p>\n<p><code>main.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\tdriver <span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// declare all ports</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ca cart.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wh warehouse.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> re cartrepository.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> in driver.Port</span><br><span class=\"line\"></span><br><span class=\"line\">\twh = warehouse.NewConsoleWarehouse()</span><br><span class=\"line\">\tre = cartrepository.NewInMemoryRepository()</span><br><span class=\"line\">\tca = cart.NewCart(wh, re)</span><br><span class=\"line\">\tin = driver.NewCliAdapter(ca)</span><br><span class=\"line\"></span><br><span class=\"line\">\tin.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Now, if we run <code>go run main.go</code>, we will get</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go</span><br><span class=\"line\">NAME:</span><br><span class=\"line\">   cart - handle cart from cli</span><br><span class=\"line\"></span><br><span class=\"line\">USAGE:</span><br><span class=\"line\">   main [global options] command [command options] [arguments...]</span><br><span class=\"line\"></span><br><span class=\"line\">COMMANDS:</span><br><span class=\"line\">   help, h  Shows a list of commands or help for one command</span><br><span class=\"line\"></span><br><span class=\"line\">GLOBAL OPTIONS:</span><br><span class=\"line\">   --item value         item to add</span><br><span class=\"line\">   --description value  description for the item</span><br><span class=\"line\">   --id value           item id</span><br><span class=\"line\">   --help, -h           show help (default: false)</span><br><span class=\"line\">FATA[0000] Required flags &quot;item, description, id&quot; not set </span><br><span class=\"line\">exit status 1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Lets add an item with id 0 that is supposed to fail and with an id of 1 that is supposed to succeed</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 1</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=1 name=bicycle</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 0</span><br><span class=\"line\">ERRO[0000] couldn&#x27;t add item                             error=&quot;item is not available&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>It worked!</p>\n<p>Now, let’s create a new sql adapter for the repository</p>\n<p><code>cartRepository/sqlite.go</code></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> cartrepository</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;database/sql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/sirupsen/logrus&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart/structs&quot;</span></span><br><span class=\"line\">\t_ <span class=\"string\">&quot;github.com/mattn/go-sqlite3&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// in memory repository adapter, we dont have any dependencies on other adapters so its empty</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SQLiteRepository <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tdb *sql.DB</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// new in memory repository factory</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewSQLiteRepository</span><span class=\"params\">()</span> *<span class=\"title\">SQLiteRepository</span></span> &#123;</span><br><span class=\"line\">\tdb, err := sql.Open(<span class=\"string\">&quot;sqlite3&quot;</span>, <span class=\"string\">&quot;database/items.db&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.Fatal(<span class=\"string\">&quot;Couldn&#x27;t initialize sqlite db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t_, err = db.Exec(<span class=\"string\">&quot;create table if not exists items (id string, name text, description text)&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlogrus.WithField(<span class=\"string\">&quot;error&quot;</span>, err.Error()).Fatal(<span class=\"string\">&quot;Couldn&#x27;t create initial items table&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;SQLiteRepository&#123;</span><br><span class=\"line\">\t\tdb: db,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *SQLiteRepository)</span> <span class=\"title\">AddItemToDB</span><span class=\"params\">(item *structs.Item)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> item.Id == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, errors.New(<span class=\"string\">&quot;cannot add item to db&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttx, _ := r.db.Begin()</span><br><span class=\"line\">\tstmt, _ := tx.Prepare(<span class=\"string\">&quot;insert into items (id, name, description) values (?,?,?)&quot;</span>)</span><br><span class=\"line\">\t_, err := stmt.Exec(item.Id, item.Name, item.Description)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\terr = tx.Commit()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;random id&quot;</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// our implementation of the port</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *SQLiteRepository)</span> <span class=\"title\">RemoveItemFromDB</span><span class=\"params\">(itemID <span class=\"keyword\">string</span>)</span> <span class=\"params\">(<span class=\"keyword\">bool</span>, error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> itemID == <span class=\"string\">&quot;0&quot;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>, errors.New(<span class=\"string\">&quot;item cannot be removed, please check again later&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Lets change our main.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/app/cart&quot;</span></span><br><span class=\"line\">\tdriver <span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/in&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/warehouse&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/yuraxdrumz/ports-and-adapters-golang/internal/pkg/adapters/out/cartRepository&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// declare all ports</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ca cart.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> wh warehouse.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> re cartrepository.Port</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> in driver.Port</span><br><span class=\"line\"></span><br><span class=\"line\">\twh = warehouse.NewConsoleWarehouse()</span><br><span class=\"line\">\t<span class=\"comment\">//re = cartrepository.NewInMemoryRepository()</span></span><br><span class=\"line\">\tre = cartrepository.NewSQLiteRepository()</span><br><span class=\"line\">\tca = cart.NewCart(wh, re)</span><br><span class=\"line\">\tin = driver.NewCliAdapter(ca)</span><br><span class=\"line\"></span><br><span class=\"line\">\tin.Run()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>Lets run our main again</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 1</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=1 name=bicycle</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 0</span><br><span class=\"line\">ERRO[0000] couldn&#x27;t add item                             error=&quot;item is not available&quot;</span><br><span class=\"line\">❯ go run main.go --item bicycle --description &quot;used as trasnport&quot; --id 11</span><br><span class=\"line\">INFO[0000] Added new item                                description=&quot;used as trasnport&quot; id=11 name=bicycle</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>It worked and all the data was saved.<br>By now you should be able to add a new adapter to any port, either driver or driven and interchange them without touching other parts of the system.</p>\n<p>A cool thing in Goland is we can easily see who implements our ports and reuse them by calling the adapter we want in <code>main.go</code></p>\n<p><img src=\"/2020/02/01/Implementing-Ports-and-Adapters/goland.png\" alt></p>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>We saw what is the Ports and Adapters pattern and how it is implemented in Golang.<br>We created an initial warehouse, cart, cartRepository and driver(in) ports.<br>Later on, we added each port’s adapter(implementation).<br>Afterwards, we glued everything in main.go.<br>By Using this architectural pattern we saw how components can interchange on any functionality.</p>\n"},{"title":"Implementing Clean Architecture","date":"2019-06-11T18:31:56.000Z","thumbnail":"images/clean.jpg","_content":"Last year, I had the opportunity to design a new project at work and since I had just finished reading Robert Martin's *Clean Architecture* I thought to myself, why not implement it on that project ? One of the reasons, except my usual *I have to implement this cool thing right away!* was that working on legacy systems in the company was accompanied with the good ol' *big ball of mud* code. The purpose of this post is to show you how can one implement *Clean Architecture* in practice and still understand it years from now, whether you work alone or in a team. Everything shown will be written in *Typescript* on *Node.js* using *Object Oriented* programming paradigm. All of the code will be available [here](https://github.com/yuraxdrumz/clean-architecture-example)\n\n## Disclaimer\nSome of the things that I am going to write and show are my personal experiences and opinions, you may have read Robert Martin's *Clean Architecture* and thought, interpreted or implemented otherwise. All the architectures have the same goals in the end. Implementing this in production has taught me a lot about how to build better software and expanded my toolbox as I hope it expands yours.\n\n## Clean Architecture\nThe idea behind *Clean Architecture* is that we have layers. Each layer is encapsulated by a higher level layer and the only way to communicate between the layers is with *The Dependency Rule*. \n\n\n## The Dependency Rule\n states that source code dependencies can only point inwards, meaning each layer can be dependant on the layer beneath it, but never the other way around. \n## Entities\nThe core of this architecture are your entities, which represent your classes/types/interfaces/basic methods.\n## Use-Cases\nA layer above the entities layer is your use-cases. Use-cases are your application specific business rules, for example, if we are talking about a shopping cart, then `addToCart` will be a use case, because it needs to recieve a type `product` and, for examples sake, check warehouse for availability and then insert new data to a DB and return response. Do not couple your use-cases to some input or output, instead pass a contract (interface) of some type in the constructor and pass the implementation itself at higher layers.\n## Repository Pattern\nFor database interactions it is recommended to use the *Repository Pattern* which encapsulates all your database interactions through an abstraction layer. The repository pattern does give you a bit freedom to replace databases with ease, but this rule only applies when your interactions are basic CRUD operations! If you have many to many relationships which require a graph database, switching to mongodb at the repository layer will not help you much as it is not built for that purpose, so take interactions into consideration at design level! \n## Interface Adapters\nAfter the use-cases layer we have the Interface Adapters layer. Here, you convert your data from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used, like the database, web or whatever you like. I like to call it, the implementations layer.\n\n## Frameworks and Drivers\nThe last layer is the Frameworks and Drivers. Here you call all of your dependencies that abide the contracts you defined in your use-cases. That way you can replace dependencies without the use-cases knowing anything about it, according to the L in S.O.L.I.D, which is called the Liskov substitution principle.\n\n## Liskov Substitution Principle\nLiskov's substitution principle states that if a system is using a type **T** which is an implementation of type **S** and we switch the implementation to type **Z** which is also of type **S** , the behaviour of the program should not change.\n\nA small diagram to illustrate our layers, notice the arrows only pointing inward!\nTaken from:\n[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)\n\n![](./Implementing-Clean-Architecture/CleanArchitecture.jpg)\n \n\n## Clean Architecture In Practice\nlets build something overused, like a shopping cart. We will first decide what are our use cases and from that we would be able to conclude an initial data model - our entities. Later on, we will create Interface Adapters(implementations) and at the final layer we will simply glue all of our dependencies and implementations and see how clean architecture could benefit us in future projects. Last but not least, we will show how easy it is to switch implementations from a web server to a command line interface.\n\n## What are our use-Cases\nBecause we chose a shopping cart, our use-cases will be pretty straight forward - `addToCart` and `removeFromCart`. Lets say `addToCart` needs to check our warehouse which is an external service, afterwards it will need to insert to our DB. `removeFromCart` will update warehouse and afterwards delete from our DB. After deciding on our business rules (use-cases), we can create an inital data model.\n\n### Defining the types\n\n`src\\entities\\types\\AddedToCart.ts`\n```typescript\ntype AddedToCart = boolean\nexport default AddedToCart\n```\n\n`src\\entities\\types\\RemovedFromCart.ts`\n```typescript\ntype RemovedFromCart = boolean\nexport default RemovedFromCart\n```\n`src\\entities\\types\\Product.ts`\n```typescript\ntype Product = {}\nexport default Product\n```\n`src\\entities\\types\\ItemInWareHouse.ts`\n```typescript\ntype ItemInWareHouse = boolean\nexport default ItemInWareHouse\n```\n\n### Defining the contracts (interfaces)\n\n\n`src\\entities\\interfaces\\addToCart.ts`\n```typescript\nimport AddedToCart from '../types/AddedToCart'\nimport Product from '../types/Product'\nexport default interface IAddToCart {\n  add(item: Product): Promise<AddedToCart>\n}\n```\n`src\\entities\\interfaces\\removeFromCart.ts`\n```typescript\nimport RemovedFromCart from '../types/RemovedFromCart'\nimport Product from '../types/Product'\nexport default interface IRemoveFromCart {\n  remove(item: Product): Promise<RemovedFromCart>\n}\n```\n`src\\entities\\interfaces\\cartRepository.ts`\n```typescript\nimport AddedToCart from '../types/AddedToCart'\nimport RemovedFromCart from '../types/RemovedFromCart'\nimport Product from '../types/Product'\n\nexport default interface ICartRepository {\n  add(item: Product): Promise<AddedToCart>\n  remove(item: Product): Promise<RemovedFromCart>\n}\n```\n`src\\entities\\interfaces\\warehouse.ts`\n```typescript\nimport Product from '../types/Product'\nimport ItemInWareHouse from '../types/ItemInWareHouse'\n\nexport default interface IWarehouse {\n  checkItemInWarehouse(item: Product): Promise<ItemInWareHouse>\n  returnItemToWarehouse(item: Product): Promise<ItemInWareHouse>\n}\n```\n\n### Defining the use-cases\n\nNote how we expect to receive implementations of the warehouse and cartRepository interfaces in the code snippet below. The implementations themselves can be anything as long as they implement our interfaces.\nThe implementations will be passed in the constructor as well as other 3rd party dependencies/modules. If we used/imported the dependencies/implementations directly, we would not adhere to the `Clean Architecture's` inwards dependency (arrows we saw in the diagram above) as we would create a dependency of a higher level module to a lower level detail, also called `dependency inversion`. \n\n`src\\use-cases\\addToCart.ts`\n```typescript\nimport AddedToCart from '../entities/types/AddedToCart'\nimport Product from '../entities/types/Product'\n\nimport IWarehouse from '../entities/interfaces/warehouse'\nimport ICartRepository from '../entities/interfaces/cartRepository'\nimport IAddToCart from '../entities/interfaces/addToCart'\n\nabstract class AddToCart implements IAddToCart {\n  protected cartRepository: ICartRepository\n  protected warehouseService: IWarehouse\n  constructor(cartRepository: ICartRepository, warehouseService: IWarehouse){\n    this.cartRepository = cartRepository\n    this.warehouseService = warehouseService\n  }\n\n  async add(item: Product): Promise<AddedToCart> {\n    const isItemInWarehouse = await this.warehouseService.checkItemInWarehouse(item)\n    if(!isItemInWarehouse) return false\n    const isSaved = await this.cartRepository.add(item)\n    if(!isSaved) return false\n    return true\n  }\n\n}\n\nexport default AddToCart\n```\n\n`src\\use-cases\\removeFromCart.ts`\n```typescript\nimport RemovedFromCart from '../entities/types/RemovedFromCart'\nimport Product from '../entities/types/Product'\n\n\nimport IRemoveFromCart from '../entities/interfaces/removeFromCart'\nimport IWarehouse from '../entities/interfaces/warehouse'\nimport ICartRepository from '../entities/interfaces/cartRepository'\n\nabstract class RemoveFromCart implements IRemoveFromCart {\n  protected cartRepository: ICartRepository\n  protected warehouseService: IWarehouse\n  constructor(cartRepository, warehouseService){\n    this.cartRepository = cartRepository\n    this.warehouseService = warehouseService\n  }\n\n  async remove(item: Product): Promise<RemovedFromCart> {\n    const isItemReturned = await this.warehouseService.returnItemToWarehouse(item)\n    if(!isItemReturned) return false\n    const isItemDeleted = await this.cartRepository.remove(item)\n    if(!isItemDeleted) return false\n    return true\n  }\n\n}\n\nexport default RemoveFromCart\n```\n\n### Defining the implementations\nNow lets first create implementations of add / remove / cartRepository and warehouse for a web server.\n\n`src\\implementations\\addToCart\\web.ts`\n\n```typescript\nimport AddToCart from '../../use-cases/addToCart'\n\nclass ConcreteAddToCart extends AddToCart {\n  async receiveProductFromWeb(request, response){\n    if(request && request.body && request.body[\"item\"]){\n      const isAdded = await this.add(request.body[\"item\"])\n      response.json(isAdded)\n    } else {\n      throw new Error(\"body is missing required field item\")\n    }\n  }\n}\nexport default ConcreteAddToCart\n```\n\n`src\\implementations\\addToCart\\web.ts`\n```typescript\nimport RemoveFromCart from '../../use-cases/removeFromCart'\n\nclass ConcreteRemoveFromCart extends RemoveFromCart {\n  async removeProductFromWeb(request, response){\n    if(request && request.body && request.body[\"item\"]){\n      const isRemoved = await this.remove(request.body[\"item\"])\n      response.json(isRemoved)\n    } else {\n      throw new Error(\"body is missing required field item\")\n    }\n  }\n}\n\nexport default ConcreteRemoveFromCart\n```\n\nI added a console implementation of cartRepository, which simply logs to stdout.\n\n`src\\implementations\\cartRepository\\console.ts`\n```typescript\nimport ICartRepository from '../../entities/interfaces/cartRepository'\nimport Product from '../../entities/types/Product'\nimport AddedToCart from '../../entities/types/AddedToCart'\nimport RemovedFromCart from '../../entities/types/RemovedFromCart'\n\nclass ConcreteCartRepository implements ICartRepository {\n  async add(item: Product): Promise<AddedToCart> {\n    console.log('adding item to database')\n    return true\n  }\n  async remove(item: Product): Promise<RemovedFromCart> {\n    console.log('removing item from database')\n    return true\n  }\n}\n\nexport default ConcreteCartRepository\n```\nI added a console implementation of warehouse, which simply logs to stdout.\n\n`src\\implementations\\warehouse\\console.ts`\n```typescript\nimport IWarehouse from '../../entities/interfaces/warehouse'\nimport Product from '../../entities/types/Product'\nimport AddedToCart from '../../entities/types/AddedToCart'\nimport RemovedFromCart from '../../entities/types/RemovedFromCart'\n\nclass ConcreteWarehouse implements IWarehouse {\n  async checkItemInWarehouse(item: Product): Promise<AddedToCart> {\n    console.log('adding item to warehouse')\n    return true\n  }\n  async returnItemToWarehouse(item: Product): Promise<RemovedFromCart> {\n    console.log('returning item to warehouse')\n    return true\n  }\n}\n\nexport default ConcreteWarehouse\n```\nWe chose a web implementation for `addToCart` and `removeFromCart` and a console implementation for `warehouse` and `cartRepository`.\nWe wrapped each use-case with a handler which will be part of a web server, in other words, we prepared the data in this layer for the next layer to use, which is the `frameworks and drivers` layer.\n\n### Defining the frameworks and drivers\n\n\nNow, the last glue layer looks like this:\nWe could make it prettier, but I will leave that to you, after we learn this cool new architecture!\n\n`src\\frameworks-drivers\\web.ts`\n```typescript\nimport express from 'express'\nimport bodyParser from 'body-parser'\n\nimport CartRepositoryImpl from '../implementations/cartRepository/console'\nimport WarehouseImpl from '../implementations/warehouse/console'\nimport AddToCartWebImpl from '../implementations/addToCart/web'\nimport RemoveFromCartWebImpl from '../implementations/removeFromCart/web'\n\nconst app = express()\nconst cartRepo = new CartRepositoryImpl()\nconst warehouse = new WarehouseImpl()\nconst addToCartInstance = new AddToCartWebImpl(cartRepo, warehouse)\nconst removeFromCartInstance = new RemoveFromCartWebImpl(cartRepo, warehouse)\n\napp.use(bodyParser.json())\n\napp.post('/item', async (req,res,next)=>{\n  try{\n    await addToCartInstance.receiveProductFromWeb(req, res)\n  }catch(e){\n    next(e)\n  }\n})\n\napp.delete('/item', async (req,res,next)=>{\n  try{\n    await removeFromCartInstance.removeProductFromWeb(req, res)\n  }catch(e){\n    next(e)\n  }\n})\n\napp.listen(process.env.PORT, ()=>{\n  console.log(`listening on port ${process.env.PORT}`)\n})\n```\n\nWe initiated all dependencies, created all instances and passed everything along, if all interfaces are adhered, the code will compile and we can run `web.ts`. Try and run this example and send a POST to `/item` and a DELETE to `/item`, you will see our warehouse and database console implementations writing to stdout like we planned to.\n\n## Creating another implementation\nNow, lets create a command line interface implementation for `addToCart` and `removeFromCart`. We will leave the `warehouse` and `cartRepository` as is but you can play with them as you wish.\n\nlets create a new `cli.ts` under `implementations\\addToCart`\n`src\\implementations\\addToCart\\cli.ts`\n```typescript\nimport AddToCart from '../../use-cases/addToCart'\n\nclass ConcreteAddToCart extends AddToCart {\n  async receiveProductFromCli(product){\n    if(product){\n      const isAdded = await this.add(product)\n      console.log(`isAdded: ${isAdded}`)\n    } else {\n      console.error(\"commandLineOptions require product to be passed\")\n    }\n  }\n}\nexport default ConcreteAddToCart\n```\n\n`src\\implementations\\removeFromCart\\cli.ts`\n```typescript\nimport RemoveFromCart from '../../use-cases/removeFromCart'\n\nclass ConcreteRemoveFromCart extends RemoveFromCart {\n  async removeProductFromCli(product){\n    if(product){\n      const isRemoved = await this.remove(product)\n      console.log(`isRemoved: ${isRemoved}`)\n    } else {\n      console.error(\"commandLineOptions require product to be passed\")\n    }\n  }\n}\nexport default ConcreteRemoveFromCart\n```\n\nNow, all we have left to do is create a new `cli.ts` under `frameworks-drivers` and call the corresponding cli implementations.\n\n`src\\frameworks-drivers\\cli.ts`\n```typescript\nimport program from 'commander'\n\nimport CartRepositoryImpl from '../implementations/cartRepository/console'\nimport WarehouseImpl from '../implementations/warehouse/console'\nimport AddToCartCliImpl from '../implementations/addToCart/cli'\nimport RemoveFromCartCliImpl from '../implementations/removeFromCart/cli'\n\nprogram\n  .option('-p, --product <name>', 'product name')\n  .option('-a, --add', 'action')\n  .option('-r, --remove', 'action')\n\nprogram.parse(process.argv);\n\n/**\n * to run this from typescript first run npm run dist and then node dist\\index.js -p \"test product name\" -a or node dist\\index.js -p \"test product name\" -r\n */\n\n(async ()=>{\n  const cartRepo = new CartRepositoryImpl()\n  const warehouse = new WarehouseImpl()\n  const addToCartInstance = new AddToCartCliImpl(cartRepo, warehouse)\n  const removeFromCartInstance = new RemoveFromCartCliImpl(cartRepo, warehouse)\n\n  if(!program.product){\n    throw new Error(\"-p is required\")\n  }\n  if(program.add){\n    await addToCartInstance.receiveProductFromCli(program.product)\n  } else if (program.remove){\n    await removeFromCartInstance.removeProductFromCli(program.product)\n  } else {\n    throw new Error(\"-a or -r are required\")\n  }\n\n})()\n```\n\n## Summary\nWe first looked at what *Clean Architecture* is, as defined by Robert Martin, later, we saw what each layer does and provided detailed examples. In the end, we created a new implementation without touching the core business rules (addToCart, removeFromCart).\nWe saw how this architecture encourages seperation of concerns out of the box, gives a guideline on how to structure your code, defines interactions between layers and allows rapid changes regardless of the size of your codebase.","source":"_posts/Implementing-Clean-Architecture.md","raw":"---\ntitle: Implementing Clean Architecture\ncategory: Architecture\ndate: 2019-06-11 21:31:56\ntags: \n  - Node.js\n  - Typescript \n  - Software Architecture\n  - Clean Architecture\n  - Uncle Bob\nthumbnail: images/clean.jpg\n---\nLast year, I had the opportunity to design a new project at work and since I had just finished reading Robert Martin's *Clean Architecture* I thought to myself, why not implement it on that project ? One of the reasons, except my usual *I have to implement this cool thing right away!* was that working on legacy systems in the company was accompanied with the good ol' *big ball of mud* code. The purpose of this post is to show you how can one implement *Clean Architecture* in practice and still understand it years from now, whether you work alone or in a team. Everything shown will be written in *Typescript* on *Node.js* using *Object Oriented* programming paradigm. All of the code will be available [here](https://github.com/yuraxdrumz/clean-architecture-example)\n\n## Disclaimer\nSome of the things that I am going to write and show are my personal experiences and opinions, you may have read Robert Martin's *Clean Architecture* and thought, interpreted or implemented otherwise. All the architectures have the same goals in the end. Implementing this in production has taught me a lot about how to build better software and expanded my toolbox as I hope it expands yours.\n\n## Clean Architecture\nThe idea behind *Clean Architecture* is that we have layers. Each layer is encapsulated by a higher level layer and the only way to communicate between the layers is with *The Dependency Rule*. \n\n\n## The Dependency Rule\n states that source code dependencies can only point inwards, meaning each layer can be dependant on the layer beneath it, but never the other way around. \n## Entities\nThe core of this architecture are your entities, which represent your classes/types/interfaces/basic methods.\n## Use-Cases\nA layer above the entities layer is your use-cases. Use-cases are your application specific business rules, for example, if we are talking about a shopping cart, then `addToCart` will be a use case, because it needs to recieve a type `product` and, for examples sake, check warehouse for availability and then insert new data to a DB and return response. Do not couple your use-cases to some input or output, instead pass a contract (interface) of some type in the constructor and pass the implementation itself at higher layers.\n## Repository Pattern\nFor database interactions it is recommended to use the *Repository Pattern* which encapsulates all your database interactions through an abstraction layer. The repository pattern does give you a bit freedom to replace databases with ease, but this rule only applies when your interactions are basic CRUD operations! If you have many to many relationships which require a graph database, switching to mongodb at the repository layer will not help you much as it is not built for that purpose, so take interactions into consideration at design level! \n## Interface Adapters\nAfter the use-cases layer we have the Interface Adapters layer. Here, you convert your data from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used, like the database, web or whatever you like. I like to call it, the implementations layer.\n\n## Frameworks and Drivers\nThe last layer is the Frameworks and Drivers. Here you call all of your dependencies that abide the contracts you defined in your use-cases. That way you can replace dependencies without the use-cases knowing anything about it, according to the L in S.O.L.I.D, which is called the Liskov substitution principle.\n\n## Liskov Substitution Principle\nLiskov's substitution principle states that if a system is using a type **T** which is an implementation of type **S** and we switch the implementation to type **Z** which is also of type **S** , the behaviour of the program should not change.\n\nA small diagram to illustrate our layers, notice the arrows only pointing inward!\nTaken from:\n[https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)\n\n![](./Implementing-Clean-Architecture/CleanArchitecture.jpg)\n \n\n## Clean Architecture In Practice\nlets build something overused, like a shopping cart. We will first decide what are our use cases and from that we would be able to conclude an initial data model - our entities. Later on, we will create Interface Adapters(implementations) and at the final layer we will simply glue all of our dependencies and implementations and see how clean architecture could benefit us in future projects. Last but not least, we will show how easy it is to switch implementations from a web server to a command line interface.\n\n## What are our use-Cases\nBecause we chose a shopping cart, our use-cases will be pretty straight forward - `addToCart` and `removeFromCart`. Lets say `addToCart` needs to check our warehouse which is an external service, afterwards it will need to insert to our DB. `removeFromCart` will update warehouse and afterwards delete from our DB. After deciding on our business rules (use-cases), we can create an inital data model.\n\n### Defining the types\n\n`src\\entities\\types\\AddedToCart.ts`\n```typescript\ntype AddedToCart = boolean\nexport default AddedToCart\n```\n\n`src\\entities\\types\\RemovedFromCart.ts`\n```typescript\ntype RemovedFromCart = boolean\nexport default RemovedFromCart\n```\n`src\\entities\\types\\Product.ts`\n```typescript\ntype Product = {}\nexport default Product\n```\n`src\\entities\\types\\ItemInWareHouse.ts`\n```typescript\ntype ItemInWareHouse = boolean\nexport default ItemInWareHouse\n```\n\n### Defining the contracts (interfaces)\n\n\n`src\\entities\\interfaces\\addToCart.ts`\n```typescript\nimport AddedToCart from '../types/AddedToCart'\nimport Product from '../types/Product'\nexport default interface IAddToCart {\n  add(item: Product): Promise<AddedToCart>\n}\n```\n`src\\entities\\interfaces\\removeFromCart.ts`\n```typescript\nimport RemovedFromCart from '../types/RemovedFromCart'\nimport Product from '../types/Product'\nexport default interface IRemoveFromCart {\n  remove(item: Product): Promise<RemovedFromCart>\n}\n```\n`src\\entities\\interfaces\\cartRepository.ts`\n```typescript\nimport AddedToCart from '../types/AddedToCart'\nimport RemovedFromCart from '../types/RemovedFromCart'\nimport Product from '../types/Product'\n\nexport default interface ICartRepository {\n  add(item: Product): Promise<AddedToCart>\n  remove(item: Product): Promise<RemovedFromCart>\n}\n```\n`src\\entities\\interfaces\\warehouse.ts`\n```typescript\nimport Product from '../types/Product'\nimport ItemInWareHouse from '../types/ItemInWareHouse'\n\nexport default interface IWarehouse {\n  checkItemInWarehouse(item: Product): Promise<ItemInWareHouse>\n  returnItemToWarehouse(item: Product): Promise<ItemInWareHouse>\n}\n```\n\n### Defining the use-cases\n\nNote how we expect to receive implementations of the warehouse and cartRepository interfaces in the code snippet below. The implementations themselves can be anything as long as they implement our interfaces.\nThe implementations will be passed in the constructor as well as other 3rd party dependencies/modules. If we used/imported the dependencies/implementations directly, we would not adhere to the `Clean Architecture's` inwards dependency (arrows we saw in the diagram above) as we would create a dependency of a higher level module to a lower level detail, also called `dependency inversion`. \n\n`src\\use-cases\\addToCart.ts`\n```typescript\nimport AddedToCart from '../entities/types/AddedToCart'\nimport Product from '../entities/types/Product'\n\nimport IWarehouse from '../entities/interfaces/warehouse'\nimport ICartRepository from '../entities/interfaces/cartRepository'\nimport IAddToCart from '../entities/interfaces/addToCart'\n\nabstract class AddToCart implements IAddToCart {\n  protected cartRepository: ICartRepository\n  protected warehouseService: IWarehouse\n  constructor(cartRepository: ICartRepository, warehouseService: IWarehouse){\n    this.cartRepository = cartRepository\n    this.warehouseService = warehouseService\n  }\n\n  async add(item: Product): Promise<AddedToCart> {\n    const isItemInWarehouse = await this.warehouseService.checkItemInWarehouse(item)\n    if(!isItemInWarehouse) return false\n    const isSaved = await this.cartRepository.add(item)\n    if(!isSaved) return false\n    return true\n  }\n\n}\n\nexport default AddToCart\n```\n\n`src\\use-cases\\removeFromCart.ts`\n```typescript\nimport RemovedFromCart from '../entities/types/RemovedFromCart'\nimport Product from '../entities/types/Product'\n\n\nimport IRemoveFromCart from '../entities/interfaces/removeFromCart'\nimport IWarehouse from '../entities/interfaces/warehouse'\nimport ICartRepository from '../entities/interfaces/cartRepository'\n\nabstract class RemoveFromCart implements IRemoveFromCart {\n  protected cartRepository: ICartRepository\n  protected warehouseService: IWarehouse\n  constructor(cartRepository, warehouseService){\n    this.cartRepository = cartRepository\n    this.warehouseService = warehouseService\n  }\n\n  async remove(item: Product): Promise<RemovedFromCart> {\n    const isItemReturned = await this.warehouseService.returnItemToWarehouse(item)\n    if(!isItemReturned) return false\n    const isItemDeleted = await this.cartRepository.remove(item)\n    if(!isItemDeleted) return false\n    return true\n  }\n\n}\n\nexport default RemoveFromCart\n```\n\n### Defining the implementations\nNow lets first create implementations of add / remove / cartRepository and warehouse for a web server.\n\n`src\\implementations\\addToCart\\web.ts`\n\n```typescript\nimport AddToCart from '../../use-cases/addToCart'\n\nclass ConcreteAddToCart extends AddToCart {\n  async receiveProductFromWeb(request, response){\n    if(request && request.body && request.body[\"item\"]){\n      const isAdded = await this.add(request.body[\"item\"])\n      response.json(isAdded)\n    } else {\n      throw new Error(\"body is missing required field item\")\n    }\n  }\n}\nexport default ConcreteAddToCart\n```\n\n`src\\implementations\\addToCart\\web.ts`\n```typescript\nimport RemoveFromCart from '../../use-cases/removeFromCart'\n\nclass ConcreteRemoveFromCart extends RemoveFromCart {\n  async removeProductFromWeb(request, response){\n    if(request && request.body && request.body[\"item\"]){\n      const isRemoved = await this.remove(request.body[\"item\"])\n      response.json(isRemoved)\n    } else {\n      throw new Error(\"body is missing required field item\")\n    }\n  }\n}\n\nexport default ConcreteRemoveFromCart\n```\n\nI added a console implementation of cartRepository, which simply logs to stdout.\n\n`src\\implementations\\cartRepository\\console.ts`\n```typescript\nimport ICartRepository from '../../entities/interfaces/cartRepository'\nimport Product from '../../entities/types/Product'\nimport AddedToCart from '../../entities/types/AddedToCart'\nimport RemovedFromCart from '../../entities/types/RemovedFromCart'\n\nclass ConcreteCartRepository implements ICartRepository {\n  async add(item: Product): Promise<AddedToCart> {\n    console.log('adding item to database')\n    return true\n  }\n  async remove(item: Product): Promise<RemovedFromCart> {\n    console.log('removing item from database')\n    return true\n  }\n}\n\nexport default ConcreteCartRepository\n```\nI added a console implementation of warehouse, which simply logs to stdout.\n\n`src\\implementations\\warehouse\\console.ts`\n```typescript\nimport IWarehouse from '../../entities/interfaces/warehouse'\nimport Product from '../../entities/types/Product'\nimport AddedToCart from '../../entities/types/AddedToCart'\nimport RemovedFromCart from '../../entities/types/RemovedFromCart'\n\nclass ConcreteWarehouse implements IWarehouse {\n  async checkItemInWarehouse(item: Product): Promise<AddedToCart> {\n    console.log('adding item to warehouse')\n    return true\n  }\n  async returnItemToWarehouse(item: Product): Promise<RemovedFromCart> {\n    console.log('returning item to warehouse')\n    return true\n  }\n}\n\nexport default ConcreteWarehouse\n```\nWe chose a web implementation for `addToCart` and `removeFromCart` and a console implementation for `warehouse` and `cartRepository`.\nWe wrapped each use-case with a handler which will be part of a web server, in other words, we prepared the data in this layer for the next layer to use, which is the `frameworks and drivers` layer.\n\n### Defining the frameworks and drivers\n\n\nNow, the last glue layer looks like this:\nWe could make it prettier, but I will leave that to you, after we learn this cool new architecture!\n\n`src\\frameworks-drivers\\web.ts`\n```typescript\nimport express from 'express'\nimport bodyParser from 'body-parser'\n\nimport CartRepositoryImpl from '../implementations/cartRepository/console'\nimport WarehouseImpl from '../implementations/warehouse/console'\nimport AddToCartWebImpl from '../implementations/addToCart/web'\nimport RemoveFromCartWebImpl from '../implementations/removeFromCart/web'\n\nconst app = express()\nconst cartRepo = new CartRepositoryImpl()\nconst warehouse = new WarehouseImpl()\nconst addToCartInstance = new AddToCartWebImpl(cartRepo, warehouse)\nconst removeFromCartInstance = new RemoveFromCartWebImpl(cartRepo, warehouse)\n\napp.use(bodyParser.json())\n\napp.post('/item', async (req,res,next)=>{\n  try{\n    await addToCartInstance.receiveProductFromWeb(req, res)\n  }catch(e){\n    next(e)\n  }\n})\n\napp.delete('/item', async (req,res,next)=>{\n  try{\n    await removeFromCartInstance.removeProductFromWeb(req, res)\n  }catch(e){\n    next(e)\n  }\n})\n\napp.listen(process.env.PORT, ()=>{\n  console.log(`listening on port ${process.env.PORT}`)\n})\n```\n\nWe initiated all dependencies, created all instances and passed everything along, if all interfaces are adhered, the code will compile and we can run `web.ts`. Try and run this example and send a POST to `/item` and a DELETE to `/item`, you will see our warehouse and database console implementations writing to stdout like we planned to.\n\n## Creating another implementation\nNow, lets create a command line interface implementation for `addToCart` and `removeFromCart`. We will leave the `warehouse` and `cartRepository` as is but you can play with them as you wish.\n\nlets create a new `cli.ts` under `implementations\\addToCart`\n`src\\implementations\\addToCart\\cli.ts`\n```typescript\nimport AddToCart from '../../use-cases/addToCart'\n\nclass ConcreteAddToCart extends AddToCart {\n  async receiveProductFromCli(product){\n    if(product){\n      const isAdded = await this.add(product)\n      console.log(`isAdded: ${isAdded}`)\n    } else {\n      console.error(\"commandLineOptions require product to be passed\")\n    }\n  }\n}\nexport default ConcreteAddToCart\n```\n\n`src\\implementations\\removeFromCart\\cli.ts`\n```typescript\nimport RemoveFromCart from '../../use-cases/removeFromCart'\n\nclass ConcreteRemoveFromCart extends RemoveFromCart {\n  async removeProductFromCli(product){\n    if(product){\n      const isRemoved = await this.remove(product)\n      console.log(`isRemoved: ${isRemoved}`)\n    } else {\n      console.error(\"commandLineOptions require product to be passed\")\n    }\n  }\n}\nexport default ConcreteRemoveFromCart\n```\n\nNow, all we have left to do is create a new `cli.ts` under `frameworks-drivers` and call the corresponding cli implementations.\n\n`src\\frameworks-drivers\\cli.ts`\n```typescript\nimport program from 'commander'\n\nimport CartRepositoryImpl from '../implementations/cartRepository/console'\nimport WarehouseImpl from '../implementations/warehouse/console'\nimport AddToCartCliImpl from '../implementations/addToCart/cli'\nimport RemoveFromCartCliImpl from '../implementations/removeFromCart/cli'\n\nprogram\n  .option('-p, --product <name>', 'product name')\n  .option('-a, --add', 'action')\n  .option('-r, --remove', 'action')\n\nprogram.parse(process.argv);\n\n/**\n * to run this from typescript first run npm run dist and then node dist\\index.js -p \"test product name\" -a or node dist\\index.js -p \"test product name\" -r\n */\n\n(async ()=>{\n  const cartRepo = new CartRepositoryImpl()\n  const warehouse = new WarehouseImpl()\n  const addToCartInstance = new AddToCartCliImpl(cartRepo, warehouse)\n  const removeFromCartInstance = new RemoveFromCartCliImpl(cartRepo, warehouse)\n\n  if(!program.product){\n    throw new Error(\"-p is required\")\n  }\n  if(program.add){\n    await addToCartInstance.receiveProductFromCli(program.product)\n  } else if (program.remove){\n    await removeFromCartInstance.removeProductFromCli(program.product)\n  } else {\n    throw new Error(\"-a or -r are required\")\n  }\n\n})()\n```\n\n## Summary\nWe first looked at what *Clean Architecture* is, as defined by Robert Martin, later, we saw what each layer does and provided detailed examples. In the end, we created a new implementation without touching the core business rules (addToCart, removeFromCart).\nWe saw how this architecture encourages seperation of concerns out of the box, gives a guideline on how to structure your code, defines interactions between layers and allows rapid changes regardless of the size of your codebase.","slug":"Implementing-Clean-Architecture","published":1,"updated":"2021-01-22T11:07:55.949Z","_id":"ckravj1o1003j78ta8v5c1944","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Last year, I had the opportunity to design a new project at work and since I had just finished reading Robert Martin’s <em>Clean Architecture</em> I thought to myself, why not implement it on that project ? One of the reasons, except my usual <em>I have to implement this cool thing right away!</em> was that working on legacy systems in the company was accompanied with the good ol’ <em>big ball of mud</em> code. The purpose of this post is to show you how can one implement <em>Clean Architecture</em> in practice and still understand it years from now, whether you work alone or in a team. Everything shown will be written in <em>Typescript</em> on <em>Node.js</em> using <em>Object Oriented</em> programming paradigm. All of the code will be available <a href=\"https://github.com/yuraxdrumz/clean-architecture-example\">here</a></p>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>Some of the things that I am going to write and show are my personal experiences and opinions, you may have read Robert Martin’s <em>Clean Architecture</em> and thought, interpreted or implemented otherwise. All the architectures have the same goals in the end. Implementing this in production has taught me a lot about how to build better software and expanded my toolbox as I hope it expands yours.</p>\n<h2 id=\"Clean-Architecture\"><a href=\"#Clean-Architecture\" class=\"headerlink\" title=\"Clean Architecture\"></a>Clean Architecture</h2><p>The idea behind <em>Clean Architecture</em> is that we have layers. Each layer is encapsulated by a higher level layer and the only way to communicate between the layers is with <em>The Dependency Rule</em>. </p>\n<h2 id=\"The-Dependency-Rule\"><a href=\"#The-Dependency-Rule\" class=\"headerlink\" title=\"The Dependency Rule\"></a>The Dependency Rule</h2><p> states that source code dependencies can only point inwards, meaning each layer can be dependant on the layer beneath it, but never the other way around. </p>\n<h2 id=\"Entities\"><a href=\"#Entities\" class=\"headerlink\" title=\"Entities\"></a>Entities</h2><p>The core of this architecture are your entities, which represent your classes/types/interfaces/basic methods.</p>\n<h2 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use-Cases\"></a>Use-Cases</h2><p>A layer above the entities layer is your use-cases. Use-cases are your application specific business rules, for example, if we are talking about a shopping cart, then <code>addToCart</code> will be a use case, because it needs to recieve a type <code>product</code> and, for examples sake, check warehouse for availability and then insert new data to a DB and return response. Do not couple your use-cases to some input or output, instead pass a contract (interface) of some type in the constructor and pass the implementation itself at higher layers.</p>\n<h2 id=\"Repository-Pattern\"><a href=\"#Repository-Pattern\" class=\"headerlink\" title=\"Repository Pattern\"></a>Repository Pattern</h2><p>For database interactions it is recommended to use the <em>Repository Pattern</em> which encapsulates all your database interactions through an abstraction layer. The repository pattern does give you a bit freedom to replace databases with ease, but this rule only applies when your interactions are basic CRUD operations! If you have many to many relationships which require a graph database, switching to mongodb at the repository layer will not help you much as it is not built for that purpose, so take interactions into consideration at design level! </p>\n<h2 id=\"Interface-Adapters\"><a href=\"#Interface-Adapters\" class=\"headerlink\" title=\"Interface Adapters\"></a>Interface Adapters</h2><p>After the use-cases layer we have the Interface Adapters layer. Here, you convert your data from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used, like the database, web or whatever you like. I like to call it, the implementations layer.</p>\n<h2 id=\"Frameworks-and-Drivers\"><a href=\"#Frameworks-and-Drivers\" class=\"headerlink\" title=\"Frameworks and Drivers\"></a>Frameworks and Drivers</h2><p>The last layer is the Frameworks and Drivers. Here you call all of your dependencies that abide the contracts you defined in your use-cases. That way you can replace dependencies without the use-cases knowing anything about it, according to the L in S.O.L.I.D, which is called the Liskov substitution principle.</p>\n<h2 id=\"Liskov-Substitution-Principle\"><a href=\"#Liskov-Substitution-Principle\" class=\"headerlink\" title=\"Liskov Substitution Principle\"></a>Liskov Substitution Principle</h2><p>Liskov’s substitution principle states that if a system is using a type <strong>T</strong> which is an implementation of type <strong>S</strong> and we switch the implementation to type <strong>Z</strong> which is also of type <strong>S</strong> , the behaviour of the program should not change.</p>\n<p>A small diagram to illustrate our layers, notice the arrows only pointing inward!\nTaken from:<br><a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></p>\n<p><img src=\"/2019/06/11/Implementing-Clean-Architecture/CleanArchitecture.jpg\" alt></p>\n<h2 id=\"Clean-Architecture-In-Practice\"><a href=\"#Clean-Architecture-In-Practice\" class=\"headerlink\" title=\"Clean Architecture In Practice\"></a>Clean Architecture In Practice</h2><p>lets build something overused, like a shopping cart. We will first decide what are our use cases and from that we would be able to conclude an initial data model - our entities. Later on, we will create Interface Adapters(implementations) and at the final layer we will simply glue all of our dependencies and implementations and see how clean architecture could benefit us in future projects. Last but not least, we will show how easy it is to switch implementations from a web server to a command line interface.</p>\n<h2 id=\"What-are-our-use-Cases\"><a href=\"#What-are-our-use-Cases\" class=\"headerlink\" title=\"What are our use-Cases\"></a>What are our use-Cases</h2><p>Because we chose a shopping cart, our use-cases will be pretty straight forward - <code>addToCart</code> and <code>removeFromCart</code>. Lets say <code>addToCart</code> needs to check our warehouse which is an external service, afterwards it will need to insert to our DB. <code>removeFromCart</code> will update warehouse and afterwards delete from our DB. After deciding on our business rules (use-cases), we can create an inital data model.</p>\n<h3 id=\"Defining-the-types\"><a href=\"#Defining-the-types\" class=\"headerlink\" title=\"Defining the types\"></a>Defining the types</h3><p><code>src\\entities\\types\\AddedToCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> AddedToCart = <span class=\"hljs-built_in\">boolean</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> AddedToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\entities\\types\\RemovedFromCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> RemovedFromCart = <span class=\"hljs-built_in\">boolean</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> RemovedFromCart</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\types\\Product.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> Product = &#123;&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Product</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\types\\ItemInWareHouse.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">type</span> ItemInWareHouse = <span class=\"hljs-built_in\">boolean</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ItemInWareHouse</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-contracts-interfaces\"><a href=\"#Defining-the-contracts-interfaces\" class=\"headerlink\" title=\"Defining the contracts (interfaces)\"></a>Defining the contracts (interfaces)</h3><p><code>src\\entities\\interfaces\\addToCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddedToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">interface</span> IAddToCart &#123;</span><br><span class=\"line\">  add(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;AddedToCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\removeFromCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemovedFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">interface</span> IRemoveFromCart &#123;</span><br><span class=\"line\">  remove(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;RemovedFromCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\cartRepository.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddedToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemovedFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">interface</span> ICartRepository &#123;</span><br><span class=\"line\">  add(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;AddedToCart&gt;</span><br><span class=\"line\">  remove(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;RemovedFromCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\warehouse.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> ItemInWareHouse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../types/ItemInWareHouse&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">interface</span> IWarehouse &#123;</span><br><span class=\"line\">  checkItemInWarehouse(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;ItemInWareHouse&gt;</span><br><span class=\"line\">  returnItemToWarehouse(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;ItemInWareHouse&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-use-cases\"><a href=\"#Defining-the-use-cases\" class=\"headerlink\" title=\"Defining the use-cases\"></a>Defining the use-cases</h3><p>Note how we expect to receive implementations of the warehouse and cartRepository interfaces in the code snippet below. The implementations themselves can be anything as long as they implement our interfaces.<br>The implementations will be passed in the constructor as well as other 3rd party dependencies/modules. If we used/imported the dependencies/implementations directly, we would not adhere to the <code>Clean Architecture&#39;s</code> inwards dependency (arrows we saw in the diagram above) as we would create a dependency of a higher level module to a lower level detail, also called <code>dependency inversion</code>. </p>\n<p><code>src\\use-cases\\addToCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddedToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> IWarehouse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> ICartRepository <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> IAddToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">AddToCart</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">IAddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">protected</span> cartRepository: ICartRepository</span><br><span class=\"line\">  <span class=\"hljs-keyword\">protected</span> warehouseService: IWarehouse</span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">cartRepository: ICartRepository, warehouseService: IWarehouse</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.cartRepository = cartRepository</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.warehouseService = warehouseService</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> add(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> isItemInWarehouse = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.warehouseService.checkItemInWarehouse(item)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(!isItemInWarehouse) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> isSaved = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.cartRepository.add(item)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(!isSaved) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> AddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\use-cases\\removeFromCart.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemovedFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> IRemoveFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/removeFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> IWarehouse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> ICartRepository <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">RemoveFromCart</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">IRemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">protected</span> cartRepository: ICartRepository</span><br><span class=\"line\">  <span class=\"hljs-keyword\">protected</span> warehouseService: IWarehouse</span><br><span class=\"line\">  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">cartRepository, warehouseService</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.cartRepository = cartRepository</span><br><span class=\"line\">    <span class=\"hljs-built_in\">this</span>.warehouseService = warehouseService</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> remove(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> isItemReturned = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.warehouseService.returnItemToWarehouse(item)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(!isItemReturned) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">const</span> isItemDeleted = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.cartRepository.remove(item)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(!isItemDeleted) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span></span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> RemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-implementations\"><a href=\"#Defining-the-implementations\" class=\"headerlink\" title=\"Defining the implementations\"></a>Defining the implementations</h3><p>Now lets first create implementations of add / remove / cartRepository and warehouse for a web server.</p>\n<p><code>src\\implementations\\addToCart\\web.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../use-cases/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteAddToCart</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">receiveProductFromWeb</span>(<span class=\"hljs-params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(request &amp;&amp; request.body &amp;&amp; request.body[<span class=\"hljs-string\">&quot;item&quot;</span>])&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> isAdded = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.add(request.body[<span class=\"hljs-string\">&quot;item&quot;</span>])</span><br><span class=\"line\">      response.json(isAdded)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;body is missing required field item&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteAddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\implementations\\addToCart\\web.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemoveFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../use-cases/removeFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteRemoveFromCart</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">removeProductFromWeb</span>(<span class=\"hljs-params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(request &amp;&amp; request.body &amp;&amp; request.body[<span class=\"hljs-string\">&quot;item&quot;</span>])&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> isRemoved = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.remove(request.body[<span class=\"hljs-string\">&quot;item&quot;</span>])</span><br><span class=\"line\">      response.json(isRemoved)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;body is missing required field item&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteRemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<p>I added a console implementation of cartRepository, which simply logs to stdout.</p>\n<p><code>src\\implementations\\cartRepository\\console.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> ICartRepository <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddedToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemovedFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteCartRepository</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">ICartRepository</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> add(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;adding item to database&#x27;</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> remove(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;removing item from database&#x27;</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteCartRepository</span><br></pre></td></tr></table></figure>\n<p>I added a console implementation of warehouse, which simply logs to stdout.</p>\n<p><code>src\\implementations\\warehouse\\console.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> IWarehouse <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> Product <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddedToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemovedFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteWarehouse</span> <span class=\"hljs-title\">implements</span> <span class=\"hljs-title\">IWarehouse</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> checkItemInWarehouse(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;adding item to warehouse&#x27;</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> returnItemToWarehouse(item: Product): <span class=\"hljs-built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;returning item to warehouse&#x27;</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteWarehouse</span><br></pre></td></tr></table></figure>\n<p>We chose a web implementation for <code>addToCart</code> and <code>removeFromCart</code> and a console implementation for <code>warehouse</code> and <code>cartRepository</code>.\nWe wrapped each use-case with a handler which will be part of a web server, in other words, we prepared the data in this layer for the next layer to use, which is the <code>frameworks and drivers</code> layer.</p>\n<h3 id=\"Defining-the-frameworks-and-drivers\"><a href=\"#Defining-the-frameworks-and-drivers\" class=\"headerlink\" title=\"Defining the frameworks and drivers\"></a>Defining the frameworks and drivers</h3><p>Now, the last glue layer looks like this:<br>We could make it prettier, but I will leave that to you, after we learn this cool new architecture!</p>\n<p><code>src\\frameworks-drivers\\web.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;express&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> bodyParser <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;body-parser&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> CartRepositoryImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/cartRepository/console&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> WarehouseImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/warehouse/console&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddToCartWebImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/addToCart/web&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemoveFromCartWebImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/removeFromCart/web&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> cartRepo = <span class=\"hljs-keyword\">new</span> CartRepositoryImpl()</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> warehouse = <span class=\"hljs-keyword\">new</span> WarehouseImpl()</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> addToCartInstance = <span class=\"hljs-keyword\">new</span> AddToCartWebImpl(cartRepo, warehouse)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> removeFromCartInstance = <span class=\"hljs-keyword\">new</span> RemoveFromCartWebImpl(cartRepo, warehouse)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"hljs-string\">&#x27;/item&#x27;</span>, <span class=\"hljs-keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">await</span> addToCartInstance.receiveProductFromWeb(req, res)</span><br><span class=\"line\">  &#125;<span class=\"hljs-keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">    next(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.delete(<span class=\"hljs-string\">&#x27;/item&#x27;</span>, <span class=\"hljs-keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">await</span> removeFromCartInstance.removeProductFromWeb(req, res)</span><br><span class=\"line\">  &#125;<span class=\"hljs-keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">    next(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(process.env.PORT, <span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`listening on port <span class=\"hljs-subst\">$&#123;process.env.PORT&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>We initiated all dependencies, created all instances and passed everything along, if all interfaces are adhered, the code will compile and we can run <code>web.ts</code>. Try and run this example and send a POST to <code>/item</code> and a DELETE to <code>/item</code>, you will see our warehouse and database console implementations writing to stdout like we planned to.</p>\n<h2 id=\"Creating-another-implementation\"><a href=\"#Creating-another-implementation\" class=\"headerlink\" title=\"Creating another implementation\"></a>Creating another implementation</h2><p>Now, lets create a command line interface implementation for <code>addToCart</code> and <code>removeFromCart</code>. We will leave the <code>warehouse</code> and <code>cartRepository</code> as is but you can play with them as you wish.</p>\n<p>lets create a new <code>cli.ts</code> under <code>implementations\\addToCart</code><br><code>src\\implementations\\addToCart\\cli.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddToCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../use-cases/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteAddToCart</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">AddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">receiveProductFromCli</span>(<span class=\"hljs-params\">product</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(product)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> isAdded = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.add(product)</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`isAdded: <span class=\"hljs-subst\">$&#123;isAdded&#125;</span>`</span>)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&quot;commandLineOptions require product to be passed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteAddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\implementations\\removeFromCart\\cli.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemoveFromCart <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../../use-cases/removeFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">ConcreteRemoveFromCart</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">RemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-title\">removeProductFromCli</span>(<span class=\"hljs-params\">product</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span>(product)&#123;</span><br><span class=\"line\">      <span class=\"hljs-keyword\">const</span> isRemoved = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">this</span>.remove(product)</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`isRemoved: <span class=\"hljs-subst\">$&#123;isRemoved&#125;</span>`</span>)</span><br><span class=\"line\">    &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"hljs-built_in\">console</span>.error(<span class=\"hljs-string\">&quot;commandLineOptions require product to be passed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> ConcreteRemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<p>Now, all we have left to do is create a new <code>cli.ts</code> under <code>frameworks-drivers</code> and call the corresponding cli implementations.</p>\n<p><code>src\\frameworks-drivers\\cli.ts</code></p>\n<figure class=\"highlight typescript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">import</span> program <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;commander&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> CartRepositoryImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/cartRepository/console&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> WarehouseImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/warehouse/console&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> AddToCartCliImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/addToCart/cli&#x27;</span></span><br><span class=\"line\"><span class=\"hljs-keyword\">import</span> RemoveFromCartCliImpl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../implementations/removeFromCart/cli&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(<span class=\"hljs-string\">&#x27;-p, --product &lt;name&gt;&#x27;</span>, <span class=\"hljs-string\">&#x27;product name&#x27;</span>)</span><br><span class=\"line\">  .option(<span class=\"hljs-string\">&#x27;-a, --add&#x27;</span>, <span class=\"hljs-string\">&#x27;action&#x27;</span>)</span><br><span class=\"line\">  .option(<span class=\"hljs-string\">&#x27;-r, --remove&#x27;</span>, <span class=\"hljs-string\">&#x27;action&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-comment\">/**</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> * to run this from typescript first run npm run dist and then node dist\\index.js -p &quot;test product name&quot; -a or node dist\\index.js -p &quot;test product name&quot; -r</span></span><br><span class=\"line\"><span class=\"hljs-comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"hljs-keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> cartRepo = <span class=\"hljs-keyword\">new</span> CartRepositoryImpl()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> warehouse = <span class=\"hljs-keyword\">new</span> WarehouseImpl()</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> addToCartInstance = <span class=\"hljs-keyword\">new</span> AddToCartCliImpl(cartRepo, warehouse)</span><br><span class=\"line\">  <span class=\"hljs-keyword\">const</span> removeFromCartInstance = <span class=\"hljs-keyword\">new</span> RemoveFromCartCliImpl(cartRepo, warehouse)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(!program.product)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;-p is required&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span>(program.add)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">await</span> addToCartInstance.receiveProductFromCli(program.product)</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (program.remove)&#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">await</span> removeFromCartInstance.removeProductFromCli(program.product)</span><br><span class=\"line\">  &#125; <span class=\"hljs-keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">&quot;-a or -r are required&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We first looked at what <em>Clean Architecture</em> is, as defined by Robert Martin, later, we saw what each layer does and provided detailed examples. In the end, we created a new implementation without touching the core business rules (addToCart, removeFromCart).<br>We saw how this architecture encourages seperation of concerns out of the box, gives a guideline on how to structure your code, defines interactions between layers and allows rapid changes regardless of the size of your codebase.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Last year, I had the opportunity to design a new project at work and since I had just finished reading Robert Martin’s <em>Clean Architecture</em> I thought to myself, why not implement it on that project ? One of the reasons, except my usual <em>I have to implement this cool thing right away!</em> was that working on legacy systems in the company was accompanied with the good ol’ <em>big ball of mud</em> code. The purpose of this post is to show you how can one implement <em>Clean Architecture</em> in practice and still understand it years from now, whether you work alone or in a team. Everything shown will be written in <em>Typescript</em> on <em>Node.js</em> using <em>Object Oriented</em> programming paradigm. All of the code will be available <a href=\"https://github.com/yuraxdrumz/clean-architecture-example\">here</a></p>\n<h2 id=\"Disclaimer\"><a href=\"#Disclaimer\" class=\"headerlink\" title=\"Disclaimer\"></a>Disclaimer</h2><p>Some of the things that I am going to write and show are my personal experiences and opinions, you may have read Robert Martin’s <em>Clean Architecture</em> and thought, interpreted or implemented otherwise. All the architectures have the same goals in the end. Implementing this in production has taught me a lot about how to build better software and expanded my toolbox as I hope it expands yours.</p>\n<h2 id=\"Clean-Architecture\"><a href=\"#Clean-Architecture\" class=\"headerlink\" title=\"Clean Architecture\"></a>Clean Architecture</h2><p>The idea behind <em>Clean Architecture</em> is that we have layers. Each layer is encapsulated by a higher level layer and the only way to communicate between the layers is with <em>The Dependency Rule</em>. </p>\n<h2 id=\"The-Dependency-Rule\"><a href=\"#The-Dependency-Rule\" class=\"headerlink\" title=\"The Dependency Rule\"></a>The Dependency Rule</h2><p> states that source code dependencies can only point inwards, meaning each layer can be dependant on the layer beneath it, but never the other way around. </p>\n<h2 id=\"Entities\"><a href=\"#Entities\" class=\"headerlink\" title=\"Entities\"></a>Entities</h2><p>The core of this architecture are your entities, which represent your classes/types/interfaces/basic methods.</p>\n<h2 id=\"Use-Cases\"><a href=\"#Use-Cases\" class=\"headerlink\" title=\"Use-Cases\"></a>Use-Cases</h2><p>A layer above the entities layer is your use-cases. Use-cases are your application specific business rules, for example, if we are talking about a shopping cart, then <code>addToCart</code> will be a use case, because it needs to recieve a type <code>product</code> and, for examples sake, check warehouse for availability and then insert new data to a DB and return response. Do not couple your use-cases to some input or output, instead pass a contract (interface) of some type in the constructor and pass the implementation itself at higher layers.</p>\n<h2 id=\"Repository-Pattern\"><a href=\"#Repository-Pattern\" class=\"headerlink\" title=\"Repository Pattern\"></a>Repository Pattern</h2><p>For database interactions it is recommended to use the <em>Repository Pattern</em> which encapsulates all your database interactions through an abstraction layer. The repository pattern does give you a bit freedom to replace databases with ease, but this rule only applies when your interactions are basic CRUD operations! If you have many to many relationships which require a graph database, switching to mongodb at the repository layer will not help you much as it is not built for that purpose, so take interactions into consideration at design level! </p>\n<h2 id=\"Interface-Adapters\"><a href=\"#Interface-Adapters\" class=\"headerlink\" title=\"Interface Adapters\"></a>Interface Adapters</h2><p>After the use-cases layer we have the Interface Adapters layer. Here, you convert your data from the form most convenient for entities and use cases, into the form most convenient for whatever persistence framework is being used, like the database, web or whatever you like. I like to call it, the implementations layer.</p>\n<h2 id=\"Frameworks-and-Drivers\"><a href=\"#Frameworks-and-Drivers\" class=\"headerlink\" title=\"Frameworks and Drivers\"></a>Frameworks and Drivers</h2><p>The last layer is the Frameworks and Drivers. Here you call all of your dependencies that abide the contracts you defined in your use-cases. That way you can replace dependencies without the use-cases knowing anything about it, according to the L in S.O.L.I.D, which is called the Liskov substitution principle.</p>\n<h2 id=\"Liskov-Substitution-Principle\"><a href=\"#Liskov-Substitution-Principle\" class=\"headerlink\" title=\"Liskov Substitution Principle\"></a>Liskov Substitution Principle</h2><p>Liskov’s substitution principle states that if a system is using a type <strong>T</strong> which is an implementation of type <strong>S</strong> and we switch the implementation to type <strong>Z</strong> which is also of type <strong>S</strong> , the behaviour of the program should not change.</p>\n<p>A small diagram to illustrate our layers, notice the arrows only pointing inward!\nTaken from:<br><a href=\"https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\">https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></p>\n<p><img src=\"/2019/06/11/Implementing-Clean-Architecture/CleanArchitecture.jpg\" alt></p>\n<h2 id=\"Clean-Architecture-In-Practice\"><a href=\"#Clean-Architecture-In-Practice\" class=\"headerlink\" title=\"Clean Architecture In Practice\"></a>Clean Architecture In Practice</h2><p>lets build something overused, like a shopping cart. We will first decide what are our use cases and from that we would be able to conclude an initial data model - our entities. Later on, we will create Interface Adapters(implementations) and at the final layer we will simply glue all of our dependencies and implementations and see how clean architecture could benefit us in future projects. Last but not least, we will show how easy it is to switch implementations from a web server to a command line interface.</p>\n<h2 id=\"What-are-our-use-Cases\"><a href=\"#What-are-our-use-Cases\" class=\"headerlink\" title=\"What are our use-Cases\"></a>What are our use-Cases</h2><p>Because we chose a shopping cart, our use-cases will be pretty straight forward - <code>addToCart</code> and <code>removeFromCart</code>. Lets say <code>addToCart</code> needs to check our warehouse which is an external service, afterwards it will need to insert to our DB. <code>removeFromCart</code> will update warehouse and afterwards delete from our DB. After deciding on our business rules (use-cases), we can create an inital data model.</p>\n<h3 id=\"Defining-the-types\"><a href=\"#Defining-the-types\" class=\"headerlink\" title=\"Defining the types\"></a>Defining the types</h3><p><code>src\\entities\\types\\AddedToCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> AddedToCart = <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AddedToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\entities\\types\\RemovedFromCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> RemovedFromCart = <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> RemovedFromCart</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\types\\Product.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Product = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Product</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\types\\ItemInWareHouse.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ItemInWareHouse = <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemInWareHouse</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-contracts-interfaces\"><a href=\"#Defining-the-contracts-interfaces\" class=\"headerlink\" title=\"Defining the contracts (interfaces)\"></a>Defining the contracts (interfaces)</h3><p><code>src\\entities\\interfaces\\addToCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AddedToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> IAddToCart &#123;</span><br><span class=\"line\">  add(item: Product): <span class=\"built_in\">Promise</span>&lt;AddedToCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\removeFromCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RemovedFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> IRemoveFromCart &#123;</span><br><span class=\"line\">  remove(item: Product): <span class=\"built_in\">Promise</span>&lt;RemovedFromCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\cartRepository.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AddedToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RemovedFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> ICartRepository &#123;</span><br><span class=\"line\">  add(item: Product): <span class=\"built_in\">Promise</span>&lt;AddedToCart&gt;</span><br><span class=\"line\">  remove(item: Product): <span class=\"built_in\">Promise</span>&lt;RemovedFromCart&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>src\\entities\\interfaces\\warehouse.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ItemInWareHouse <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../types/ItemInWareHouse&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> IWarehouse &#123;</span><br><span class=\"line\">  checkItemInWarehouse(item: Product): <span class=\"built_in\">Promise</span>&lt;ItemInWareHouse&gt;</span><br><span class=\"line\">  returnItemToWarehouse(item: Product): <span class=\"built_in\">Promise</span>&lt;ItemInWareHouse&gt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-use-cases\"><a href=\"#Defining-the-use-cases\" class=\"headerlink\" title=\"Defining the use-cases\"></a>Defining the use-cases</h3><p>Note how we expect to receive implementations of the warehouse and cartRepository interfaces in the code snippet below. The implementations themselves can be anything as long as they implement our interfaces.<br>The implementations will be passed in the constructor as well as other 3rd party dependencies/modules. If we used/imported the dependencies/implementations directly, we would not adhere to the <code>Clean Architecture&#39;s</code> inwards dependency (arrows we saw in the diagram above) as we would create a dependency of a higher level module to a lower level detail, also called <code>dependency inversion</code>. </p>\n<p><code>src\\use-cases\\addToCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AddedToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> IWarehouse <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ICartRepository <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> IAddToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AddToCart</span> <span class=\"title\">implements</span> <span class=\"title\">IAddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> cartRepository: ICartRepository</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> warehouseService: IWarehouse</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">cartRepository: ICartRepository, warehouseService: IWarehouse</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cartRepository = cartRepository</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.warehouseService = warehouseService</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> add(item: Product): <span class=\"built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isItemInWarehouse = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.warehouseService.checkItemInWarehouse(item)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isItemInWarehouse) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isSaved = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.cartRepository.add(item)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isSaved) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> AddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\use-cases\\removeFromCart.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RemovedFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/types/Product&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> IRemoveFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/removeFromCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> IWarehouse <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> ICartRepository <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoveFromCart</span> <span class=\"title\">implements</span> <span class=\"title\">IRemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> cartRepository: ICartRepository</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> warehouseService: IWarehouse</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">cartRepository, warehouseService</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.cartRepository = cartRepository</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.warehouseService = warehouseService</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> remove(item: Product): <span class=\"built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> isItemReturned = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.warehouseService.returnItemToWarehouse(item)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isItemReturned) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> isItemDeleted = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.cartRepository.remove(item)</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!isItemDeleted) <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> RemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Defining-the-implementations\"><a href=\"#Defining-the-implementations\" class=\"headerlink\" title=\"Defining the implementations\"></a>Defining the implementations</h3><p>Now lets first create implementations of add / remove / cartRepository and warehouse for a web server.</p>\n<p><code>src\\implementations\\addToCart\\web.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AddToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../use-cases/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAddToCart</span> <span class=\"keyword\">extends</span> <span class=\"title\">AddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">receiveProductFromWeb</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request &amp;&amp; request.body &amp;&amp; request.body[<span class=\"string\">&quot;item&quot;</span>])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isAdded = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.add(request.body[<span class=\"string\">&quot;item&quot;</span>])</span><br><span class=\"line\">      response.json(isAdded)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;body is missing required field item&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteAddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\implementations\\addToCart\\web.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RemoveFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../use-cases/removeFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteRemoveFromCart</span> <span class=\"keyword\">extends</span> <span class=\"title\">RemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">removeProductFromWeb</span>(<span class=\"params\">request, response</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(request &amp;&amp; request.body &amp;&amp; request.body[<span class=\"string\">&quot;item&quot;</span>])&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isRemoved = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.remove(request.body[<span class=\"string\">&quot;item&quot;</span>])</span><br><span class=\"line\">      response.json(isRemoved)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;body is missing required field item&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteRemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<p>I added a console implementation of cartRepository, which simply logs to stdout.</p>\n<p><code>src\\implementations\\cartRepository\\console.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ICartRepository <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/interfaces/cartRepository&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> AddedToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RemovedFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteCartRepository</span> <span class=\"title\">implements</span> <span class=\"title\">ICartRepository</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> add(item: Product): <span class=\"built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;adding item to database&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> remove(item: Product): <span class=\"built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;removing item from database&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteCartRepository</span><br></pre></td></tr></table></figure>\n<p>I added a console implementation of warehouse, which simply logs to stdout.</p>\n<p><code>src\\implementations\\warehouse\\console.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> IWarehouse <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/interfaces/warehouse&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Product <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/Product&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> AddedToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/AddedToCart&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RemovedFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../entities/types/RemovedFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteWarehouse</span> <span class=\"title\">implements</span> <span class=\"title\">IWarehouse</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> checkItemInWarehouse(item: Product): <span class=\"built_in\">Promise</span>&lt;AddedToCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;adding item to warehouse&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> returnItemToWarehouse(item: Product): <span class=\"built_in\">Promise</span>&lt;RemovedFromCart&gt; &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;returning item to warehouse&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteWarehouse</span><br></pre></td></tr></table></figure>\n<p>We chose a web implementation for <code>addToCart</code> and <code>removeFromCart</code> and a console implementation for <code>warehouse</code> and <code>cartRepository</code>.\nWe wrapped each use-case with a handler which will be part of a web server, in other words, we prepared the data in this layer for the next layer to use, which is the <code>frameworks and drivers</code> layer.</p>\n<h3 id=\"Defining-the-frameworks-and-drivers\"><a href=\"#Defining-the-frameworks-and-drivers\" class=\"headerlink\" title=\"Defining the frameworks and drivers\"></a>Defining the frameworks and drivers</h3><p>Now, the last glue layer looks like this:<br>We could make it prettier, but I will leave that to you, after we learn this cool new architecture!</p>\n<p><code>src\\frameworks-drivers\\web.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> express <span class=\"keyword\">from</span> <span class=\"string\">&#x27;express&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> bodyParser <span class=\"keyword\">from</span> <span class=\"string\">&#x27;body-parser&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> CartRepositoryImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/cartRepository/console&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> WarehouseImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/warehouse/console&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> AddToCartWebImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/addToCart/web&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RemoveFromCartWebImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/removeFromCart/web&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"><span class=\"keyword\">const</span> cartRepo = <span class=\"keyword\">new</span> CartRepositoryImpl()</span><br><span class=\"line\"><span class=\"keyword\">const</span> warehouse = <span class=\"keyword\">new</span> WarehouseImpl()</span><br><span class=\"line\"><span class=\"keyword\">const</span> addToCartInstance = <span class=\"keyword\">new</span> AddToCartWebImpl(cartRepo, warehouse)</span><br><span class=\"line\"><span class=\"keyword\">const</span> removeFromCartInstance = <span class=\"keyword\">new</span> RemoveFromCartWebImpl(cartRepo, warehouse)</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(bodyParser.json())</span><br><span class=\"line\"></span><br><span class=\"line\">app.post(<span class=\"string\">&#x27;/item&#x27;</span>, <span class=\"keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> addToCartInstance.receiveProductFromWeb(req, res)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">    next(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.delete(<span class=\"string\">&#x27;/item&#x27;</span>, <span class=\"keyword\">async</span> (req,res,next)=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> removeFromCartInstance.removeProductFromWeb(req, res)</span><br><span class=\"line\">  &#125;<span class=\"keyword\">catch</span>(e)&#123;</span><br><span class=\"line\">    next(e)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(process.env.PORT, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`listening on port <span class=\"subst\">$&#123;process.env.PORT&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>We initiated all dependencies, created all instances and passed everything along, if all interfaces are adhered, the code will compile and we can run <code>web.ts</code>. Try and run this example and send a POST to <code>/item</code> and a DELETE to <code>/item</code>, you will see our warehouse and database console implementations writing to stdout like we planned to.</p>\n<h2 id=\"Creating-another-implementation\"><a href=\"#Creating-another-implementation\" class=\"headerlink\" title=\"Creating another implementation\"></a>Creating another implementation</h2><p>Now, lets create a command line interface implementation for <code>addToCart</code> and <code>removeFromCart</code>. We will leave the <code>warehouse</code> and <code>cartRepository</code> as is but you can play with them as you wish.</p>\n<p>lets create a new <code>cli.ts</code> under <code>implementations\\addToCart</code><br><code>src\\implementations\\addToCart\\cli.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> AddToCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../use-cases/addToCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteAddToCart</span> <span class=\"keyword\">extends</span> <span class=\"title\">AddToCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">receiveProductFromCli</span>(<span class=\"params\">product</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(product)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isAdded = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.add(product)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`isAdded: <span class=\"subst\">$&#123;isAdded&#125;</span>`</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">&quot;commandLineOptions require product to be passed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteAddToCart</span><br></pre></td></tr></table></figure>\n\n<p><code>src\\implementations\\removeFromCart\\cli.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> RemoveFromCart <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../../use-cases/removeFromCart&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ConcreteRemoveFromCart</span> <span class=\"keyword\">extends</span> <span class=\"title\">RemoveFromCart</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"title\">removeProductFromCli</span>(<span class=\"params\">product</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(product)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> isRemoved = <span class=\"keyword\">await</span> <span class=\"built_in\">this</span>.remove(product)</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">`isRemoved: <span class=\"subst\">$&#123;isRemoved&#125;</span>`</span>)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">&quot;commandLineOptions require product to be passed&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ConcreteRemoveFromCart</span><br></pre></td></tr></table></figure>\n\n<p>Now, all we have left to do is create a new <code>cli.ts</code> under <code>frameworks-drivers</code> and call the corresponding cli implementations.</p>\n<p><code>src\\frameworks-drivers\\cli.ts</code></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> program <span class=\"keyword\">from</span> <span class=\"string\">&#x27;commander&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> CartRepositoryImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/cartRepository/console&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> WarehouseImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/warehouse/console&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> AddToCartCliImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/addToCart/cli&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> RemoveFromCartCliImpl <span class=\"keyword\">from</span> <span class=\"string\">&#x27;../implementations/removeFromCart/cli&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">program</span><br><span class=\"line\">  .option(<span class=\"string\">&#x27;-p, --product &lt;name&gt;&#x27;</span>, <span class=\"string\">&#x27;product name&#x27;</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">&#x27;-a, --add&#x27;</span>, <span class=\"string\">&#x27;action&#x27;</span>)</span><br><span class=\"line\">  .option(<span class=\"string\">&#x27;-r, --remove&#x27;</span>, <span class=\"string\">&#x27;action&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">program.parse(process.argv);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * to run this from typescript first run npm run dist and then node dist\\index.js -p &quot;test product name&quot; -a or node dist\\index.js -p &quot;test product name&quot; -r</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> ()=&gt;&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> cartRepo = <span class=\"keyword\">new</span> CartRepositoryImpl()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> warehouse = <span class=\"keyword\">new</span> WarehouseImpl()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> addToCartInstance = <span class=\"keyword\">new</span> AddToCartCliImpl(cartRepo, warehouse)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> removeFromCartInstance = <span class=\"keyword\">new</span> RemoveFromCartCliImpl(cartRepo, warehouse)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(!program.product)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;-p is required&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(program.add)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> addToCartInstance.receiveProductFromCli(program.product)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (program.remove)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> removeFromCartInstance.removeProductFromCli(program.product)</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">&quot;-a or -r are required&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We first looked at what <em>Clean Architecture</em> is, as defined by Robert Martin, later, we saw what each layer does and provided detailed examples. In the end, we created a new implementation without touching the core business rules (addToCart, removeFromCart).<br>We saw how this architecture encourages seperation of concerns out of the box, gives a guideline on how to structure your code, defines interactions between layers and allows rapid changes regardless of the size of your codebase.</p>\n"},{"title":"The Javascript Event Loop","date":"2019-06-09T12:50:22.000Z","thumbnail":"images/nodejs.png","_content":"\nAfter writing in Node.js for 3 years, I felt that the majority of the posts about it were lacking deeper knowledge, especially about the event loops internals, so, I decided to dig deep and give you my insights. Node.js seems like a simple beast to handle but in reality, there are a lot of layers of abstraction behind it. From one perspective, this abstraction is great, but, like everything else in software, abstraction comes at a cost.\nThe purpose of this post is to show you a broader picture of how the Node core handles the event loop, what it really is and how it coexists with the JS runtime.\n\n Lets start with asking a few simple questions and then answer them with detailed examples.\n  1. What is the event loop?\n  2. What are the phases of the event loop?\n  3. What are the differences between the phases of the event loop and Node.js?\n  4. How is it implemented in practice?\n  5. Is Node.js really single threaded?\n  6. Why do we have a thread pool if we already have the event loop that does all the async operations?\n\n## What is the event loop?\n\nFrom the Node.js website, summarized:\n>Node.js is an event-based platform. This means that everything that happens in Node is the reaction to an event. Abstracted away from the developer, the reactions to events are all handled by a library called **libuv**.\n\n\n> **libuv** is cross-platform support library which was originally written for Node.js. It is designed around the event-driven asynchronous I/O model.\n\n> **libuv** provides 2 mechanisms. One is a called an **event loop**, which runs on one thread and the other mechanism is called a **thread pool**.\n\nIt is important to note that the **event loop** and the JS runtime run on the **same** thread and the **thread pool** is initiated with **4** threads by default. Also, **libuv** can be used not only in Node.js, that is why I will show the differences between the event loop itself and the event loop in Node.js context.\n\n## What are the phases in libuv?\n\nThe phases of **libuv** are:\n  - update loop time - it is the starting point to know time from now on\n  - check loop alive - Loop is considered alive if it has active and ref’d handles, active requests or closing handles.\n  - Run due timers - the timers we pass to **libuv**, that are past the definition of **now**, we defined in the first phase, are getting called. The timers are held in a min heap data structure, for efficiency. If the first timer is not expired than we know that all others below it were created later in time.\n  - Call pending callbacks - There are cases in which the callbacks are deffered to next iteration, this is where they are called.\n  - Run idle handles - internal\n  - Run prepare handles - internal\n  - Poll for IO - this is where the loop handles any incoming TCP connections. The time for how long the loop is waiting in each iteration will be explained later on.\n  - Run check handles - All check handles are run here, for example `setImmediate` if we are in the context of Node.js\n  - Run close callbacks - all `.on('close')` events are called here, if something happened we want that the timers+poll+check callbacks will complete and afterwards the close callbacks are called, for example, the `socket.destroy()` in Node.js.\n  - Repeat\n\nThe visual diagram of the phases looks like this, do not worry if you still do not get the full picture, we still have things to cover!\n\n![](./Node-JS-Event-Loop-0/loop_iteration.png)\n\n\n## What are the differences between the phases of libuv and Node.js\n\nNode.js uses all of the above mentioned phases and adds 2 more: the `process.nextTick` and `microTaskQueue`.\n the differences in Node.js are:\n  - Process.nextTick() is not technically part of the event loop. Instead, the nextTickQueue will be processed after the current operation is completed, regardless of the current phase of the event loop. Here, an operation is defined as a transition from the underlying C/C++ handler, and handling the JavaScript that needs to be executed.\n  Any time you call process.nextTick() in a given phase, all callbacks passed to process.nextTick() will be resolved before the event loop continues. This can create some bad situations because it allows you to \"starve\" your I/O by making recursive process.nextTick() calls, which prevents the event loop from reaching the poll phase.\n  - In the context of native promises, a promise callback is considered as a microtask and queued in a microtask queue which will be processed right after the next tick queue. It is also dangerous as recursive calls to promises in theory will never reach the next tick.\n\n  - When the event loop enters the poll phase and there are no timers scheduled, one of two things will happen:\nIf the poll queue is not empty, the event loop will iterate through its queue of callbacks executing them synchronously until either the queue has been exhausted, or the system-dependent hard limit is reached.\nIf the poll queue is empty, one of two more things will happen:\nIf scripts have been scheduled by setImmediate(), the event loop will end the poll phase and continue to the check phase to execute those scheduled scripts.\nIf scripts have not been scheduled by setImmediate(), the event loop will wait for callbacks to be added to the queue, then execute them immediately.\nOnce the poll queue is empty the event loop will check for timers whose time thresholds have been reached. If one or more timers are ready, the event loop will wrap back to the timers phase to execute those timers' callbacks\n\nBefore we continue, it is important to note that all phases we mentioned(timers, pending, poll, close) always call **1** callback which is a macro operation that is sent to JS land and afterwards the `nextTickQueue` + `microTaskQueue` are run, no matter where we are in the event loop. **Each macro operation combined with the `nextTickQueue` and `microTaskQueue` is called an event loop tick.** \n\n\nHere is the diagram for Node.js event loop, notice there is not much difference except the 2 queues we talked about(nextTickQueue and microTaskQueue).\n\n![](./Node-JS-Event-Loop-0/nodejs-event-loop-workflow.png)\n\nDid you notice something interesting we learned about the callback queue**s**? Every one talks about **a callback queue** but in reality **each phase has its own callback queue**.\n\n\n## How is the event loop implemented in practice?\n\nHere is the c++ code from the libuv github, I am sure you can figure the phases out by yourself and if you look carefully, you will see that the timeout for the poll phase is calculated. Also, we have a special mode of RUN_ONCE which dictates that if no callbacks were called in current poll phase, it means we have no work to do except the timers, so just update time and run timers phase before exiting.\n\n```c++\nint uv_run(uv_loop_t* loop, uv_run_mode mode) {\n  int timeout;\n  int r;\n  int ran_pending;\n\n  r = uv__loop_alive(loop);\n  if (!r)\n    uv__update_time(loop);\n\n  while (r != 0 && loop->stop_flag == 0) {\n    uv__update_time(loop);\n    uv__run_timers(loop);\n    ran_pending = uv__run_pending(loop);\n    uv__run_idle(loop);\n    uv__run_prepare(loop);\n\n    timeout = 0;\n    if ((mode == UV_RUN_ONCE && !ran_pending) || mode == UV_RUN_DEFAULT)\n      timeout = uv_backend_timeout(loop);\n\n    uv__io_poll(loop, timeout);\n    uv__run_check(loop);\n    uv__run_closing_handles(loop);\n\n    if (mode == UV_RUN_ONCE) {\n      /* UV_RUN_ONCE implies forward progress: at least one callback must have\n       * been invoked when it returns. uv__io_poll() can return without doing\n       * I/O (meaning: no callbacks) when its timeout expires - which means we\n       * have pending timers that satisfy the forward progress constraint.\n       *\n       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from\n       * the check.\n       */\n      uv__update_time(loop);\n      uv__run_timers(loop);\n    }\n\n    r = uv__loop_alive(loop);\n    if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)\n      break;\n  }\n\n  /* The if statement lets gcc compile it to a conditional store. Avoids\n   * dirtying a cache line.\n   */\n  if (loop->stop_flag != 0)\n    loop->stop_flag = 0;\n\n  return r;\n}\n```\n\nLet's see how the timeout for the poll phase(waiting on TCP connections) is calculated.\nTo break it down for you it goes like this:\n  - If the stop flag is not 0, return 0\n  - If we dont have active handles or requests, return 0\n  - If the idle and pending queues are not empty return 0\n  - If we have closing handles return 0\n  - Otherwise return the next timeout from the loop\n\nWhat this means is that the loop will not wait in poll phase if not neccessary, but if we have a timer, then it will wait in poll phase for the time of that timer in order to wrap to the timers phase instead of just doing meaningless iterations.\n\n```c++\nint uv_backend_timeout(const uv_loop_t* loop) {\n  if (loop->stop_flag != 0)\n    return 0;\n\n  if (!uv__has_active_handles(loop) && !uv__has_active_reqs(loop))\n    return 0;\n\n  if (!QUEUE_EMPTY(&loop->idle_handles))\n    return 0;\n\n  if (!QUEUE_EMPTY(&loop->pending_queue))\n    return 0;\n\n  if (loop->closing_handles)\n    return 0;\n\n  return uv__next_timeout(loop);\n}\n```\n\n## Is Node.js single threaded?\n\nWell, as we said previously, the event loop runs on the same thread as the JS runtime, which means, that we have one execution thread, so by definition, **Node.js is single threaded**.\n\nEssentially, when the JS stack is empty of user code(all sync code we defined in our scripts), the event loop runs a tick. Important thing to note - slow sync code can halt the system to the ground at scale, due to the shared thread of the JS runtime with the event loop. More concrete, the context switch to c++ land cannot happen until the JS stack is empty.\n\nIf you try to do recursive operations in different queues(different stages of the event loop), even the `setImmediate`, it will always run on later ticks, remember the 1 macro per tick we talked about? This is it. But, `microTaskQueue` and `nextTickQueue` that are defined in JS land, will run recursively on the same tick, because we learned that the event loop will only run when all JS code is executed and the 2 queues above are simply javascript.\n\n\n## Why do we have a thread pool if we already have the event loop that does all the async operations?\n\nThis is an interesting part of Node.js land, because it is single threaded, like we already answered, but its also not! It all depends from what perspective you look at it. We do have one execution thread, but we also have the thread pool that comes along with the event loop.\n\nTaken from the libuv website:\n>Whenever possible, libuv will use asynchronous interfaces provided by the OS, avoiding usage of the thread pool. The same applies to third party subsystems like databases. The event loop follows the rather usual single threaded asynchronous I/O approach: all (network) I/O is performed on non-blocking sockets which are polled using the best mechanism available on the given platform: epoll on Linux, kqueue on OSX and other BSDs, event ports on SunOS and IOCP on Windows.\n\nWhat this basically means is that all operating systems have some sort of non-blocking IO handling we can leverage. We can subscribe to all events regarding new TCP connections, incoming data from TCP connection and etc. But what about crypto stuff, DNS resolving, file system operations? They are supposed to be non blocking as well, right?\n\n>Well, Not all the types of I/O can be performed using async implementations. Even on the same OS platform, there are complexities in supporting different types of I/O. Typically, network I/O can be performed in a non-blocking way using epoll, kqueue, event ports and IOCP, but the file I/O is much more complex. Certain systems, such as Linux does not support complete asynchrony for file system access. And there are limitations in file system event notifications/signaling with kqueue in MacOS.\n\nOk, we figured out that fs operations are problematic and must be done sync, but why DNS resolving must be sync too? To resolve DNS you must **read** the hosts file first on the host machine. We must use the fs for that and you get it by now...\nRegarding the crypto, Cryptography on the most basic level is performing calculations, and there is no way to to calculations asynchronously on the same thread. For all the reasons above, we have a thread pool. When you send an async fs operation or an async crypto/dns resolve callbacks to the event loop, it gets picked up by the thread pool and resolved on a different thread **synchronously**.\n\n## Examples\n\nNow, after we answered all the questions, lets look at some examples:\nWe will call the crypto.pbkdf2 async implementation.\n\nI added a comment of how the results look in the previous example with default 4 threads that took 9xx ms completion time\n\n\n### UV_THREADPOOL_SIZE\n```javascript\nconst { pbkdf2 } = require('crypto');\nconst start = Date.now();\nconst doExpensiveHashing = () => {\n  pbkdf2('pwd', 'salt', 100000, 512, 'sha512', () =>\n    console.log(`Done in ${Date.now() - start}ms`)\n  );\n};\ndoExpensiveHashing(); // Done in 937ms\ndoExpensiveHashing(); // Done in 942ms\ndoExpensiveHashing(); // Done in 943ms\ndoExpensiveHashing(); // Done in 943ms\n```\nnow set the environment variable `UV_THREADPOOL_SIZE=1` and run the code again, \n\n```javascript\nconst { pbkdf2 } = require('crypto');\nconst start = Date.now();\nconst doExpensiveHashing = () => {\n  pbkdf2('pwd', 'salt', 100000, 512, 'sha512', () =>\n    console.log(`Done in ${Date.now() - start}ms`)\n  );\n};\ndoExpensiveHashing(); // Done in 658ms\ndoExpensiveHashing(); // Done in 1321ms\ndoExpensiveHashing(); // Done in 1982ms\ndoExpensiveHashing(); // Done in 2637ms\n```\n\nWe saw that we get sequential execution because we have only 1 thread. If you try the sync implementation we will simply block our thread, but the thread pool allows us to do all the non trivial crypto work on another thread and keep our business rolling! Isn't that cool?\n\n### Timers\nBefore we start, important note, if we set `setTimeout` to 0, it will be 1ms.\n\nWho will execute first? According to what we saw, it will be setImmediate because the timer has not expired yet, but try and run it several times:\n\n\n```javascript\nsetTimeout(()=>console.log('setTimeout'),0)\nsetImmediate(()=>console.log('setImmediate'))\n```\n\nFirst time:\n```javascript\nsetImmediate\nsetTimeout\n```\n\nSecond time:\n```javascript\nsetTimeout\nsetImmediate\n```\n\nThe interesting part here is that we know that when the event loop runs, it checks if the timer expired, which in our case is 1ms, which is a long time for a cpu, and the `setImmediate` will run only on next tick after we defined it and only after poll phase!. If the timer expired on start of next tick it will be called first, if not, the `setImmediate` will be called first and `setTimeout` afterwards.\n\n### Timers + IO\nNow, lets add an IO cycle\n```javascript\nconst fs = require('fs')\n\nfs.readFile('test.txt', ()=>{\n  setTimeout(()=>console.log('setTimeout'),0)\n  setImmediate(()=>console.log('setImmediate'))\n})\n```\nThe fs sends the readFile to our thread pool, when the operation finishes in poll phase, it registers the setTimeout and setImmediate and as we saw, the check phase always comes after the poll phase, so our `setImmediate` is guaranteed to execute first.\n\n### Recursion + Timers\nRecursive operations in the event loop:\n\ntake this example:\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.use((req,res,next)=>{\n  res.json('ok')\n})\n\nfunction compute(){\n  for(i=0;i<1e3;i++){\n    console.log(`computing i=${i}...`)\n  }\n  setImmediate(compute)\n  // Promise.resolve().then(compute)\n  // process.nextTick(compute)\n}\n\napp.listen(3000, ()=>console.log('listening on port 3000'))\ncompute()\n```\n\nWill our web server answer our requests?\nRemember we said that recursive operations are dangerous on `microTaskQueue` and `nextTickQueue` in JS land? Well, thats true, which means, that a recursive call to `setImmediate` will not be immediate(1 macro per tick, remember?), but split to next tick after each invocation and that means that we pass iterations through poll phase which is responsible for our IO. To answer the question - Yes, we will answer the web requests!\n\n### Promise.resolve\nNow, lets see with `Promise.resolve().then(compute)`\n\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.use((req,res,next)=>{\n  res.json('ok')\n})\n\nfunction compute(){\n  for(i=0;i<1e3;i++){\n    console.log(`computing i=${i}...`)\n  }\n  // setImmediate(compute)\n  Promise.resolve().then(compute)\n  // process.nextTick(compute)\n}\n\napp.listen(3000, ()=>console.log('listening on port 3000'))\ncompute()\n```\nThe native implementation of promises work with the `microTaskQueue`, which will run in recursion indefinitely and our web server will never answer!\n\nFun fact - With native promises we could implement long running promises that do recursions, and would never continue to next ticks - so fs operations and other network IO and phases from c++ land will never get execution time! For these reasons, `Bluebird` and other promise libraries implemented the `resolve` and `reject` to be in `setImmediate` which will never starve the IO! \n\nThe `process.nextTick` should be obvious by now.\n\n### Promise.resolve + nextTick + Timers\nLast one before we wrap up:\n```javascript\nPromise.resolve().then(() => console.log('promise1 resolved'));\nPromise.resolve().then(() => console.log('promise2 resolved'));\nPromise.resolve().then(() => {\n    console.log('promise3 resolved');\n    process.nextTick(() => console.log('next tick inside promise resolve handler'));\n});\nPromise.resolve().then(() => console.log('promise4 resolved'));\nPromise.resolve().then(() => console.log('promise5 resolved'));\nsetImmediate(() => console.log('set immediate1'));\nsetImmediate(() => console.log('set immediate2'));\n\nprocess.nextTick(() => console.log('next tick1'));\nprocess.nextTick(() => console.log('next tick2'));\nprocess.nextTick(() => console.log('next tick3'));\n\nsetTimeout(() => console.log('set timeout'), 0);\nsetImmediate(() => console.log('set immediate3'));\nsetImmediate(() => console.log('set immediate4'));\n```\nDo not be startled! Lets do what we always do in software engineering - break it down\n  - Promise.resolve - native implementation and on js land, it will run last after `nextTickQueue`\n  - setImmediate runs after poll phase\n  - setTimeout runs on timers phase\n  - process.nextTick must be exhausted before continuing to next tick\n\nNow, `nextTick` is run on current tick and must be exhausted like we said, so it has to go first, because it runs on JS land regardless of where we are on the event loop!\nAfter the `nextTick` we have the `microTaskQueue` which like we said previously, is run last after `nextTickQueue` so it runs.\nWe have a `process.nextTick` inside the callback of a micro tick. That one we did not cover on purpose! What do you think will happen? Like we said, the `nextTickQueue` must be exhasted on each iteration, and we added a callback to the queue, so it wraps back to `nextTickQueue` and runs the callbacks again.\nAfter all those steps we finally can start a new tick and by this time our timer has elapsed, so our setTimeout gets executed, our setImmediate is last and the result is:\n```javascript\nnext tick1\nnext tick2\nnext tick3\npromise1 resolved\npromise2 resolved\npromise3 resolved\npromise4 resolved\npromise5 resolved\nnext tick inside promise resolve handler\nset timeout\nset immediate1\nset immediate2\nset immediate3\nset immediate4\n``` \n\n## Summary\nWe started by asking a few basic questions in Node.js, like: how does its internals look like and how does it operate? Later on, we tried to answer each of those questions as deep as possible. We learned that after all the abstractions, it is a (not so simple) `while` loop which enables us to build advanced systems and build web servers without worrying about concurrency control or multi threading. Finally, we saw some examples that seem trivial at first, but after our dive to Node core, we were able to answer them.\n","source":"_posts/The-Javascript-Event-Loop.md","raw":"---\ntitle: The Javascript Event Loop\ncategory: Programming\ndate: 2019-06-09 15:50:22\ntags: \n  - Node.js\n  - Node js\n  - Javascript \n  - Event Loop\n  - libuv\nthumbnail: images/nodejs.png\n---\n\nAfter writing in Node.js for 3 years, I felt that the majority of the posts about it were lacking deeper knowledge, especially about the event loops internals, so, I decided to dig deep and give you my insights. Node.js seems like a simple beast to handle but in reality, there are a lot of layers of abstraction behind it. From one perspective, this abstraction is great, but, like everything else in software, abstraction comes at a cost.\nThe purpose of this post is to show you a broader picture of how the Node core handles the event loop, what it really is and how it coexists with the JS runtime.\n\n Lets start with asking a few simple questions and then answer them with detailed examples.\n  1. What is the event loop?\n  2. What are the phases of the event loop?\n  3. What are the differences between the phases of the event loop and Node.js?\n  4. How is it implemented in practice?\n  5. Is Node.js really single threaded?\n  6. Why do we have a thread pool if we already have the event loop that does all the async operations?\n\n## What is the event loop?\n\nFrom the Node.js website, summarized:\n>Node.js is an event-based platform. This means that everything that happens in Node is the reaction to an event. Abstracted away from the developer, the reactions to events are all handled by a library called **libuv**.\n\n\n> **libuv** is cross-platform support library which was originally written for Node.js. It is designed around the event-driven asynchronous I/O model.\n\n> **libuv** provides 2 mechanisms. One is a called an **event loop**, which runs on one thread and the other mechanism is called a **thread pool**.\n\nIt is important to note that the **event loop** and the JS runtime run on the **same** thread and the **thread pool** is initiated with **4** threads by default. Also, **libuv** can be used not only in Node.js, that is why I will show the differences between the event loop itself and the event loop in Node.js context.\n\n## What are the phases in libuv?\n\nThe phases of **libuv** are:\n  - update loop time - it is the starting point to know time from now on\n  - check loop alive - Loop is considered alive if it has active and ref’d handles, active requests or closing handles.\n  - Run due timers - the timers we pass to **libuv**, that are past the definition of **now**, we defined in the first phase, are getting called. The timers are held in a min heap data structure, for efficiency. If the first timer is not expired than we know that all others below it were created later in time.\n  - Call pending callbacks - There are cases in which the callbacks are deffered to next iteration, this is where they are called.\n  - Run idle handles - internal\n  - Run prepare handles - internal\n  - Poll for IO - this is where the loop handles any incoming TCP connections. The time for how long the loop is waiting in each iteration will be explained later on.\n  - Run check handles - All check handles are run here, for example `setImmediate` if we are in the context of Node.js\n  - Run close callbacks - all `.on('close')` events are called here, if something happened we want that the timers+poll+check callbacks will complete and afterwards the close callbacks are called, for example, the `socket.destroy()` in Node.js.\n  - Repeat\n\nThe visual diagram of the phases looks like this, do not worry if you still do not get the full picture, we still have things to cover!\n\n![](./Node-JS-Event-Loop-0/loop_iteration.png)\n\n\n## What are the differences between the phases of libuv and Node.js\n\nNode.js uses all of the above mentioned phases and adds 2 more: the `process.nextTick` and `microTaskQueue`.\n the differences in Node.js are:\n  - Process.nextTick() is not technically part of the event loop. Instead, the nextTickQueue will be processed after the current operation is completed, regardless of the current phase of the event loop. Here, an operation is defined as a transition from the underlying C/C++ handler, and handling the JavaScript that needs to be executed.\n  Any time you call process.nextTick() in a given phase, all callbacks passed to process.nextTick() will be resolved before the event loop continues. This can create some bad situations because it allows you to \"starve\" your I/O by making recursive process.nextTick() calls, which prevents the event loop from reaching the poll phase.\n  - In the context of native promises, a promise callback is considered as a microtask and queued in a microtask queue which will be processed right after the next tick queue. It is also dangerous as recursive calls to promises in theory will never reach the next tick.\n\n  - When the event loop enters the poll phase and there are no timers scheduled, one of two things will happen:\nIf the poll queue is not empty, the event loop will iterate through its queue of callbacks executing them synchronously until either the queue has been exhausted, or the system-dependent hard limit is reached.\nIf the poll queue is empty, one of two more things will happen:\nIf scripts have been scheduled by setImmediate(), the event loop will end the poll phase and continue to the check phase to execute those scheduled scripts.\nIf scripts have not been scheduled by setImmediate(), the event loop will wait for callbacks to be added to the queue, then execute them immediately.\nOnce the poll queue is empty the event loop will check for timers whose time thresholds have been reached. If one or more timers are ready, the event loop will wrap back to the timers phase to execute those timers' callbacks\n\nBefore we continue, it is important to note that all phases we mentioned(timers, pending, poll, close) always call **1** callback which is a macro operation that is sent to JS land and afterwards the `nextTickQueue` + `microTaskQueue` are run, no matter where we are in the event loop. **Each macro operation combined with the `nextTickQueue` and `microTaskQueue` is called an event loop tick.** \n\n\nHere is the diagram for Node.js event loop, notice there is not much difference except the 2 queues we talked about(nextTickQueue and microTaskQueue).\n\n![](./Node-JS-Event-Loop-0/nodejs-event-loop-workflow.png)\n\nDid you notice something interesting we learned about the callback queue**s**? Every one talks about **a callback queue** but in reality **each phase has its own callback queue**.\n\n\n## How is the event loop implemented in practice?\n\nHere is the c++ code from the libuv github, I am sure you can figure the phases out by yourself and if you look carefully, you will see that the timeout for the poll phase is calculated. Also, we have a special mode of RUN_ONCE which dictates that if no callbacks were called in current poll phase, it means we have no work to do except the timers, so just update time and run timers phase before exiting.\n\n```c++\nint uv_run(uv_loop_t* loop, uv_run_mode mode) {\n  int timeout;\n  int r;\n  int ran_pending;\n\n  r = uv__loop_alive(loop);\n  if (!r)\n    uv__update_time(loop);\n\n  while (r != 0 && loop->stop_flag == 0) {\n    uv__update_time(loop);\n    uv__run_timers(loop);\n    ran_pending = uv__run_pending(loop);\n    uv__run_idle(loop);\n    uv__run_prepare(loop);\n\n    timeout = 0;\n    if ((mode == UV_RUN_ONCE && !ran_pending) || mode == UV_RUN_DEFAULT)\n      timeout = uv_backend_timeout(loop);\n\n    uv__io_poll(loop, timeout);\n    uv__run_check(loop);\n    uv__run_closing_handles(loop);\n\n    if (mode == UV_RUN_ONCE) {\n      /* UV_RUN_ONCE implies forward progress: at least one callback must have\n       * been invoked when it returns. uv__io_poll() can return without doing\n       * I/O (meaning: no callbacks) when its timeout expires - which means we\n       * have pending timers that satisfy the forward progress constraint.\n       *\n       * UV_RUN_NOWAIT makes no guarantees about progress so it's omitted from\n       * the check.\n       */\n      uv__update_time(loop);\n      uv__run_timers(loop);\n    }\n\n    r = uv__loop_alive(loop);\n    if (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)\n      break;\n  }\n\n  /* The if statement lets gcc compile it to a conditional store. Avoids\n   * dirtying a cache line.\n   */\n  if (loop->stop_flag != 0)\n    loop->stop_flag = 0;\n\n  return r;\n}\n```\n\nLet's see how the timeout for the poll phase(waiting on TCP connections) is calculated.\nTo break it down for you it goes like this:\n  - If the stop flag is not 0, return 0\n  - If we dont have active handles or requests, return 0\n  - If the idle and pending queues are not empty return 0\n  - If we have closing handles return 0\n  - Otherwise return the next timeout from the loop\n\nWhat this means is that the loop will not wait in poll phase if not neccessary, but if we have a timer, then it will wait in poll phase for the time of that timer in order to wrap to the timers phase instead of just doing meaningless iterations.\n\n```c++\nint uv_backend_timeout(const uv_loop_t* loop) {\n  if (loop->stop_flag != 0)\n    return 0;\n\n  if (!uv__has_active_handles(loop) && !uv__has_active_reqs(loop))\n    return 0;\n\n  if (!QUEUE_EMPTY(&loop->idle_handles))\n    return 0;\n\n  if (!QUEUE_EMPTY(&loop->pending_queue))\n    return 0;\n\n  if (loop->closing_handles)\n    return 0;\n\n  return uv__next_timeout(loop);\n}\n```\n\n## Is Node.js single threaded?\n\nWell, as we said previously, the event loop runs on the same thread as the JS runtime, which means, that we have one execution thread, so by definition, **Node.js is single threaded**.\n\nEssentially, when the JS stack is empty of user code(all sync code we defined in our scripts), the event loop runs a tick. Important thing to note - slow sync code can halt the system to the ground at scale, due to the shared thread of the JS runtime with the event loop. More concrete, the context switch to c++ land cannot happen until the JS stack is empty.\n\nIf you try to do recursive operations in different queues(different stages of the event loop), even the `setImmediate`, it will always run on later ticks, remember the 1 macro per tick we talked about? This is it. But, `microTaskQueue` and `nextTickQueue` that are defined in JS land, will run recursively on the same tick, because we learned that the event loop will only run when all JS code is executed and the 2 queues above are simply javascript.\n\n\n## Why do we have a thread pool if we already have the event loop that does all the async operations?\n\nThis is an interesting part of Node.js land, because it is single threaded, like we already answered, but its also not! It all depends from what perspective you look at it. We do have one execution thread, but we also have the thread pool that comes along with the event loop.\n\nTaken from the libuv website:\n>Whenever possible, libuv will use asynchronous interfaces provided by the OS, avoiding usage of the thread pool. The same applies to third party subsystems like databases. The event loop follows the rather usual single threaded asynchronous I/O approach: all (network) I/O is performed on non-blocking sockets which are polled using the best mechanism available on the given platform: epoll on Linux, kqueue on OSX and other BSDs, event ports on SunOS and IOCP on Windows.\n\nWhat this basically means is that all operating systems have some sort of non-blocking IO handling we can leverage. We can subscribe to all events regarding new TCP connections, incoming data from TCP connection and etc. But what about crypto stuff, DNS resolving, file system operations? They are supposed to be non blocking as well, right?\n\n>Well, Not all the types of I/O can be performed using async implementations. Even on the same OS platform, there are complexities in supporting different types of I/O. Typically, network I/O can be performed in a non-blocking way using epoll, kqueue, event ports and IOCP, but the file I/O is much more complex. Certain systems, such as Linux does not support complete asynchrony for file system access. And there are limitations in file system event notifications/signaling with kqueue in MacOS.\n\nOk, we figured out that fs operations are problematic and must be done sync, but why DNS resolving must be sync too? To resolve DNS you must **read** the hosts file first on the host machine. We must use the fs for that and you get it by now...\nRegarding the crypto, Cryptography on the most basic level is performing calculations, and there is no way to to calculations asynchronously on the same thread. For all the reasons above, we have a thread pool. When you send an async fs operation or an async crypto/dns resolve callbacks to the event loop, it gets picked up by the thread pool and resolved on a different thread **synchronously**.\n\n## Examples\n\nNow, after we answered all the questions, lets look at some examples:\nWe will call the crypto.pbkdf2 async implementation.\n\nI added a comment of how the results look in the previous example with default 4 threads that took 9xx ms completion time\n\n\n### UV_THREADPOOL_SIZE\n```javascript\nconst { pbkdf2 } = require('crypto');\nconst start = Date.now();\nconst doExpensiveHashing = () => {\n  pbkdf2('pwd', 'salt', 100000, 512, 'sha512', () =>\n    console.log(`Done in ${Date.now() - start}ms`)\n  );\n};\ndoExpensiveHashing(); // Done in 937ms\ndoExpensiveHashing(); // Done in 942ms\ndoExpensiveHashing(); // Done in 943ms\ndoExpensiveHashing(); // Done in 943ms\n```\nnow set the environment variable `UV_THREADPOOL_SIZE=1` and run the code again, \n\n```javascript\nconst { pbkdf2 } = require('crypto');\nconst start = Date.now();\nconst doExpensiveHashing = () => {\n  pbkdf2('pwd', 'salt', 100000, 512, 'sha512', () =>\n    console.log(`Done in ${Date.now() - start}ms`)\n  );\n};\ndoExpensiveHashing(); // Done in 658ms\ndoExpensiveHashing(); // Done in 1321ms\ndoExpensiveHashing(); // Done in 1982ms\ndoExpensiveHashing(); // Done in 2637ms\n```\n\nWe saw that we get sequential execution because we have only 1 thread. If you try the sync implementation we will simply block our thread, but the thread pool allows us to do all the non trivial crypto work on another thread and keep our business rolling! Isn't that cool?\n\n### Timers\nBefore we start, important note, if we set `setTimeout` to 0, it will be 1ms.\n\nWho will execute first? According to what we saw, it will be setImmediate because the timer has not expired yet, but try and run it several times:\n\n\n```javascript\nsetTimeout(()=>console.log('setTimeout'),0)\nsetImmediate(()=>console.log('setImmediate'))\n```\n\nFirst time:\n```javascript\nsetImmediate\nsetTimeout\n```\n\nSecond time:\n```javascript\nsetTimeout\nsetImmediate\n```\n\nThe interesting part here is that we know that when the event loop runs, it checks if the timer expired, which in our case is 1ms, which is a long time for a cpu, and the `setImmediate` will run only on next tick after we defined it and only after poll phase!. If the timer expired on start of next tick it will be called first, if not, the `setImmediate` will be called first and `setTimeout` afterwards.\n\n### Timers + IO\nNow, lets add an IO cycle\n```javascript\nconst fs = require('fs')\n\nfs.readFile('test.txt', ()=>{\n  setTimeout(()=>console.log('setTimeout'),0)\n  setImmediate(()=>console.log('setImmediate'))\n})\n```\nThe fs sends the readFile to our thread pool, when the operation finishes in poll phase, it registers the setTimeout and setImmediate and as we saw, the check phase always comes after the poll phase, so our `setImmediate` is guaranteed to execute first.\n\n### Recursion + Timers\nRecursive operations in the event loop:\n\ntake this example:\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.use((req,res,next)=>{\n  res.json('ok')\n})\n\nfunction compute(){\n  for(i=0;i<1e3;i++){\n    console.log(`computing i=${i}...`)\n  }\n  setImmediate(compute)\n  // Promise.resolve().then(compute)\n  // process.nextTick(compute)\n}\n\napp.listen(3000, ()=>console.log('listening on port 3000'))\ncompute()\n```\n\nWill our web server answer our requests?\nRemember we said that recursive operations are dangerous on `microTaskQueue` and `nextTickQueue` in JS land? Well, thats true, which means, that a recursive call to `setImmediate` will not be immediate(1 macro per tick, remember?), but split to next tick after each invocation and that means that we pass iterations through poll phase which is responsible for our IO. To answer the question - Yes, we will answer the web requests!\n\n### Promise.resolve\nNow, lets see with `Promise.resolve().then(compute)`\n\n```javascript\nconst express = require('express')\nconst app = express()\n\napp.use((req,res,next)=>{\n  res.json('ok')\n})\n\nfunction compute(){\n  for(i=0;i<1e3;i++){\n    console.log(`computing i=${i}...`)\n  }\n  // setImmediate(compute)\n  Promise.resolve().then(compute)\n  // process.nextTick(compute)\n}\n\napp.listen(3000, ()=>console.log('listening on port 3000'))\ncompute()\n```\nThe native implementation of promises work with the `microTaskQueue`, which will run in recursion indefinitely and our web server will never answer!\n\nFun fact - With native promises we could implement long running promises that do recursions, and would never continue to next ticks - so fs operations and other network IO and phases from c++ land will never get execution time! For these reasons, `Bluebird` and other promise libraries implemented the `resolve` and `reject` to be in `setImmediate` which will never starve the IO! \n\nThe `process.nextTick` should be obvious by now.\n\n### Promise.resolve + nextTick + Timers\nLast one before we wrap up:\n```javascript\nPromise.resolve().then(() => console.log('promise1 resolved'));\nPromise.resolve().then(() => console.log('promise2 resolved'));\nPromise.resolve().then(() => {\n    console.log('promise3 resolved');\n    process.nextTick(() => console.log('next tick inside promise resolve handler'));\n});\nPromise.resolve().then(() => console.log('promise4 resolved'));\nPromise.resolve().then(() => console.log('promise5 resolved'));\nsetImmediate(() => console.log('set immediate1'));\nsetImmediate(() => console.log('set immediate2'));\n\nprocess.nextTick(() => console.log('next tick1'));\nprocess.nextTick(() => console.log('next tick2'));\nprocess.nextTick(() => console.log('next tick3'));\n\nsetTimeout(() => console.log('set timeout'), 0);\nsetImmediate(() => console.log('set immediate3'));\nsetImmediate(() => console.log('set immediate4'));\n```\nDo not be startled! Lets do what we always do in software engineering - break it down\n  - Promise.resolve - native implementation and on js land, it will run last after `nextTickQueue`\n  - setImmediate runs after poll phase\n  - setTimeout runs on timers phase\n  - process.nextTick must be exhausted before continuing to next tick\n\nNow, `nextTick` is run on current tick and must be exhausted like we said, so it has to go first, because it runs on JS land regardless of where we are on the event loop!\nAfter the `nextTick` we have the `microTaskQueue` which like we said previously, is run last after `nextTickQueue` so it runs.\nWe have a `process.nextTick` inside the callback of a micro tick. That one we did not cover on purpose! What do you think will happen? Like we said, the `nextTickQueue` must be exhasted on each iteration, and we added a callback to the queue, so it wraps back to `nextTickQueue` and runs the callbacks again.\nAfter all those steps we finally can start a new tick and by this time our timer has elapsed, so our setTimeout gets executed, our setImmediate is last and the result is:\n```javascript\nnext tick1\nnext tick2\nnext tick3\npromise1 resolved\npromise2 resolved\npromise3 resolved\npromise4 resolved\npromise5 resolved\nnext tick inside promise resolve handler\nset timeout\nset immediate1\nset immediate2\nset immediate3\nset immediate4\n``` \n\n## Summary\nWe started by asking a few basic questions in Node.js, like: how does its internals look like and how does it operate? Later on, we tried to answer each of those questions as deep as possible. We learned that after all the abstractions, it is a (not so simple) `while` loop which enables us to build advanced systems and build web servers without worrying about concurrency control or multi threading. Finally, we saw some examples that seem trivial at first, but after our dive to Node core, we were able to answer them.\n","slug":"The-Javascript-Event-Loop","published":1,"updated":"2021-01-22T11:07:55.951Z","_id":"ckravj1o2003k78ta3dvkbupq","comments":1,"layout":"post","photos":[],"link":"","content":"<p>After writing in Node.js for 3 years, I felt that the majority of the posts about it were lacking deeper knowledge, especially about the event loops internals, so, I decided to dig deep and give you my insights. Node.js seems like a simple beast to handle but in reality, there are a lot of layers of abstraction behind it. From one perspective, this abstraction is great, but, like everything else in software, abstraction comes at a cost.<br>The purpose of this post is to show you a broader picture of how the Node core handles the event loop, what it really is and how it coexists with the JS runtime.</p>\n<p> Lets start with asking a few simple questions and then answer them with detailed examples.</p>\n<ol>\n<li>What is the event loop?</li>\n<li>What are the phases of the event loop?</li>\n<li>What are the differences between the phases of the event loop and Node.js?</li>\n<li>How is it implemented in practice?</li>\n<li>Is Node.js really single threaded?</li>\n<li>Why do we have a thread pool if we already have the event loop that does all the async operations?</li>\n</ol>\n<h2 id=\"What-is-the-event-loop\"><a href=\"#What-is-the-event-loop\" class=\"headerlink\" title=\"What is the event loop?\"></a>What is the event loop?</h2><p>From the Node.js website, summarized:</p>\n<blockquote>\n<p>Node.js is an event-based platform. This means that everything that happens in Node is the reaction to an event. Abstracted away from the developer, the reactions to events are all handled by a library called <strong>libuv</strong>.</p>\n</blockquote>\n<blockquote>\n<p><strong>libuv</strong> is cross-platform support library which was originally written for Node.js. It is designed around the event-driven asynchronous I/O model.</p>\n</blockquote>\n<blockquote>\n<p><strong>libuv</strong> provides 2 mechanisms. One is a called an <strong>event loop</strong>, which runs on one thread and the other mechanism is called a <strong>thread pool</strong>.</p>\n</blockquote>\n<p>It is important to note that the <strong>event loop</strong> and the JS runtime run on the <strong>same</strong> thread and the <strong>thread pool</strong> is initiated with <strong>4</strong> threads by default. Also, <strong>libuv</strong> can be used not only in Node.js, that is why I will show the differences between the event loop itself and the event loop in Node.js context.</p>\n<h2 id=\"What-are-the-phases-in-libuv\"><a href=\"#What-are-the-phases-in-libuv\" class=\"headerlink\" title=\"What are the phases in libuv?\"></a>What are the phases in libuv?</h2><p>The phases of <strong>libuv</strong> are:</p>\n<ul>\n<li>update loop time - it is the starting point to know time from now on</li>\n<li>check loop alive - Loop is considered alive if it has active and ref’d handles, active requests or closing handles.</li>\n<li>Run due timers - the timers we pass to <strong>libuv</strong>, that are past the definition of <strong>now</strong>, we defined in the first phase, are getting called. The timers are held in a min heap data structure, for efficiency. If the first timer is not expired than we know that all others below it were created later in time.</li>\n<li>Call pending callbacks - There are cases in which the callbacks are deffered to next iteration, this is where they are called.</li>\n<li>Run idle handles - internal</li>\n<li>Run prepare handles - internal</li>\n<li>Poll for IO - this is where the loop handles any incoming TCP connections. The time for how long the loop is waiting in each iteration will be explained later on.</li>\n<li>Run check handles - All check handles are run here, for example <code>setImmediate</code> if we are in the context of Node.js</li>\n<li>Run close callbacks - all <code>.on(&#39;close&#39;)</code> events are called here, if something happened we want that the timers+poll+check callbacks will complete and afterwards the close callbacks are called, for example, the <code>socket.destroy()</code> in Node.js.</li>\n<li>Repeat</li>\n</ul>\n<p>The visual diagram of the phases looks like this, do not worry if you still do not get the full picture, we still have things to cover!</p>\n<p><img src=\"/2019/06/09/The-Javascript-Event-Loop/loop_iteration.png\" alt></p>\n<h2 id=\"What-are-the-differences-between-the-phases-of-libuv-and-Node-js\"><a href=\"#What-are-the-differences-between-the-phases-of-libuv-and-Node-js\" class=\"headerlink\" title=\"What are the differences between the phases of libuv and Node.js\"></a>What are the differences between the phases of libuv and Node.js</h2><p>Node.js uses all of the above mentioned phases and adds 2 more: the <code>process.nextTick</code> and <code>microTaskQueue</code>.\n the differences in Node.js are:</p>\n<ul>\n<li><p>Process.nextTick() is not technically part of the event loop. Instead, the nextTickQueue will be processed after the current operation is completed, regardless of the current phase of the event loop. Here, an operation is defined as a transition from the underlying C/C++ handler, and handling the JavaScript that needs to be executed.<br>Any time you call process.nextTick() in a given phase, all callbacks passed to process.nextTick() will be resolved before the event loop continues. This can create some bad situations because it allows you to “starve” your I/O by making recursive process.nextTick() calls, which prevents the event loop from reaching the poll phase.</p>\n</li>\n<li><p>In the context of native promises, a promise callback is considered as a microtask and queued in a microtask queue which will be processed right after the next tick queue. It is also dangerous as recursive calls to promises in theory will never reach the next tick.</p>\n</li>\n<li><p>When the event loop enters the poll phase and there are no timers scheduled, one of two things will happen:<br>If the poll queue is not empty, the event loop will iterate through its queue of callbacks executing them synchronously until either the queue has been exhausted, or the system-dependent hard limit is reached.<br>If the poll queue is empty, one of two more things will happen:<br>If scripts have been scheduled by setImmediate(), the event loop will end the poll phase and continue to the check phase to execute those scheduled scripts.<br>If scripts have not been scheduled by setImmediate(), the event loop will wait for callbacks to be added to the queue, then execute them immediately.<br>Once the poll queue is empty the event loop will check for timers whose time thresholds have been reached. If one or more timers are ready, the event loop will wrap back to the timers phase to execute those timers’ callbacks</p>\n</li>\n</ul>\n<p>Before we continue, it is important to note that all phases we mentioned(timers, pending, poll, close) always call <strong>1</strong> callback which is a macro operation that is sent to JS land and afterwards the <code>nextTickQueue</code> + <code>microTaskQueue</code> are run, no matter where we are in the event loop. <strong>Each macro operation combined with the <code>nextTickQueue</code> and <code>microTaskQueue</code> is called an event loop tick.</strong> </p>\n<p>Here is the diagram for Node.js event loop, notice there is not much difference except the 2 queues we talked about(nextTickQueue and microTaskQueue).</p>\n<p><img src=\"/2019/06/09/The-Javascript-Event-Loop/nodejs-event-loop-workflow.png\" alt></p>\n<p>Did you notice something interesting we learned about the callback queue<strong>s</strong>? Every one talks about <strong>a callback queue</strong> but in reality <strong>each phase has its own callback queue</strong>.</p>\n<h2 id=\"How-is-the-event-loop-implemented-in-practice\"><a href=\"#How-is-the-event-loop-implemented-in-practice\" class=\"headerlink\" title=\"How is the event loop implemented in practice?\"></a>How is the event loop implemented in practice?</h2><p>Here is the c++ code from the libuv github, I am sure you can figure the phases out by yourself and if you look carefully, you will see that the timeout for the poll phase is calculated. Also, we have a special mode of RUN_ONCE which dictates that if no callbacks were called in current poll phase, it means we have no work to do except the timers, so just update time and run timers phase before exiting.</p>\n<figure class=\"highlight c++ hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">uv_run</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">int</span> timeout;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">int</span> r;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">int</span> ran_pending;</span><br><span class=\"line\"></span><br><span class=\"line\">  r = <span class=\"hljs-built_in\">uv__loop_alive</span>(loop);</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!r)</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">while</span> (r != <span class=\"hljs-number\">0</span> &amp;&amp; loop-&gt;stop_flag == <span class=\"hljs-number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__run_timers</span>(loop);</span><br><span class=\"line\">    ran_pending = <span class=\"hljs-built_in\">uv__run_pending</span>(loop);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__run_idle</span>(loop);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__run_prepare</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    timeout = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class=\"line\">      timeout = <span class=\"hljs-built_in\">uv_backend_timeout</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__io_poll</span>(loop, timeout);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__run_check</span>(loop);</span><br><span class=\"line\">    <span class=\"hljs-built_in\">uv__run_closing_handles</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class=\"line\">      <span class=\"hljs-comment\">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       *</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#x27;s omitted from</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       * the check.</span></span><br><span class=\"line\"><span class=\"hljs-comment\">       */</span></span><br><span class=\"line\">      <span class=\"hljs-built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\">      <span class=\"hljs-built_in\">uv__run_timers</span>(loop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = <span class=\"hljs-built_in\">uv__loop_alive</span>(loop);</span><br><span class=\"line\">    <span class=\"hljs-keyword\">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class=\"line\">      <span class=\"hljs-keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-comment\">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   * dirtying a cache line.</span></span><br><span class=\"line\"><span class=\"hljs-comment\">   */</span></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (loop-&gt;stop_flag != <span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">    loop-&gt;stop_flag = <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s see how the timeout for the poll phase(waiting on TCP connections) is calculated.<br>To break it down for you it goes like this:</p>\n<ul>\n<li>If the stop flag is not 0, return 0</li>\n<li>If we dont have active handles or requests, return 0</li>\n<li>If the idle and pending queues are not empty return 0</li>\n<li>If we have closing handles return 0</li>\n<li>Otherwise return the next timeout from the loop</li>\n</ul>\n<p>What this means is that the loop will not wait in poll phase if not neccessary, but if we have a timer, then it will wait in poll phase for the time of that timer in order to wrap to the timers phase instead of just doing meaningless iterations.</p>\n<figure class=\"highlight c++ hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">int</span> <span class=\"hljs-title\">uv_backend_timeout</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">const</span> <span class=\"hljs-keyword\">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (loop-&gt;stop_flag != <span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">uv__has_active_handles</span>(loop) &amp;&amp; !<span class=\"hljs-built_in\">uv__has_active_reqs</span>(loop))</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">QUEUE_EMPTY</span>(&amp;loop-&gt;idle_handles))</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">QUEUE_EMPTY</span>(&amp;loop-&gt;pending_queue))</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">if</span> (loop-&gt;closing_handles)</span><br><span class=\"line\">    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">uv__next_timeout</span>(loop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Is-Node-js-single-threaded\"><a href=\"#Is-Node-js-single-threaded\" class=\"headerlink\" title=\"Is Node.js single threaded?\"></a>Is Node.js single threaded?</h2><p>Well, as we said previously, the event loop runs on the same thread as the JS runtime, which means, that we have one execution thread, so by definition, <strong>Node.js is single threaded</strong>.</p>\n<p>Essentially, when the JS stack is empty of user code(all sync code we defined in our scripts), the event loop runs a tick. Important thing to note - slow sync code can halt the system to the ground at scale, due to the shared thread of the JS runtime with the event loop. More concrete, the context switch to c++ land cannot happen until the JS stack is empty.</p>\n<p>If you try to do recursive operations in different queues(different stages of the event loop), even the <code>setImmediate</code>, it will always run on later ticks, remember the 1 macro per tick we talked about? This is it. But, <code>microTaskQueue</code> and <code>nextTickQueue</code> that are defined in JS land, will run recursively on the same tick, because we learned that the event loop will only run when all JS code is executed and the 2 queues above are simply javascript.</p>\n<h2 id=\"Why-do-we-have-a-thread-pool-if-we-already-have-the-event-loop-that-does-all-the-async-operations\"><a href=\"#Why-do-we-have-a-thread-pool-if-we-already-have-the-event-loop-that-does-all-the-async-operations\" class=\"headerlink\" title=\"Why do we have a thread pool if we already have the event loop that does all the async operations?\"></a>Why do we have a thread pool if we already have the event loop that does all the async operations?</h2><p>This is an interesting part of Node.js land, because it is single threaded, like we already answered, but its also not! It all depends from what perspective you look at it. We do have one execution thread, but we also have the thread pool that comes along with the event loop.</p>\n<p>Taken from the libuv website:</p>\n<blockquote>\n<p>Whenever possible, libuv will use asynchronous interfaces provided by the OS, avoiding usage of the thread pool. The same applies to third party subsystems like databases. The event loop follows the rather usual single threaded asynchronous I/O approach: all (network) I/O is performed on non-blocking sockets which are polled using the best mechanism available on the given platform: epoll on Linux, kqueue on OSX and other BSDs, event ports on SunOS and IOCP on Windows.</p>\n</blockquote>\n<p>What this basically means is that all operating systems have some sort of non-blocking IO handling we can leverage. We can subscribe to all events regarding new TCP connections, incoming data from TCP connection and etc. But what about crypto stuff, DNS resolving, file system operations? They are supposed to be non blocking as well, right?</p>\n<blockquote>\n<p>Well, Not all the types of I/O can be performed using async implementations. Even on the same OS platform, there are complexities in supporting different types of I/O. Typically, network I/O can be performed in a non-blocking way using epoll, kqueue, event ports and IOCP, but the file I/O is much more complex. Certain systems, such as Linux does not support complete asynchrony for file system access. And there are limitations in file system event notifications/signaling with kqueue in MacOS.</p>\n</blockquote>\n<p>Ok, we figured out that fs operations are problematic and must be done sync, but why DNS resolving must be sync too? To resolve DNS you must <strong>read</strong> the hosts file first on the host machine. We must use the fs for that and you get it by now…<br>Regarding the crypto, Cryptography on the most basic level is performing calculations, and there is no way to to calculations asynchronously on the same thread. For all the reasons above, we have a thread pool. When you send an async fs operation or an async crypto/dns resolve callbacks to the event loop, it gets picked up by the thread pool and resolved on a different thread <strong>synchronously</strong>.</p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Now, after we answered all the questions, lets look at some examples:<br>We will call the crypto.pbkdf2 async implementation.</p>\n<p>I added a comment of how the results look in the previous example with default 4 threads that took 9xx ms completion time</p>\n<h3 id=\"UV-THREADPOOL-SIZE\"><a href=\"#UV-THREADPOOL-SIZE\" class=\"headerlink\" title=\"UV_THREADPOOL_SIZE\"></a>UV_THREADPOOL_SIZE</h3><figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; pbkdf2 &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> doExpensiveHashing = <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  pbkdf2(<span class=\"hljs-string\">&#x27;pwd&#x27;</span>, <span class=\"hljs-string\">&#x27;salt&#x27;</span>, <span class=\"hljs-number\">100000</span>, <span class=\"hljs-number\">512</span>, <span class=\"hljs-string\">&#x27;sha512&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Done in <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now() - start&#125;</span>ms`</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 937ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 942ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 943ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 943ms</span></span><br></pre></td></tr></table></figure>\n<p>now set the environment variable <code>UV_THREADPOOL_SIZE=1</code> and run the code again, </p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> &#123; pbkdf2 &#125; = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> doExpensiveHashing = <span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  pbkdf2(<span class=\"hljs-string\">&#x27;pwd&#x27;</span>, <span class=\"hljs-string\">&#x27;salt&#x27;</span>, <span class=\"hljs-number\">100000</span>, <span class=\"hljs-number\">512</span>, <span class=\"hljs-string\">&#x27;sha512&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`Done in <span class=\"hljs-subst\">$&#123;<span class=\"hljs-built_in\">Date</span>.now() - start&#125;</span>ms`</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 658ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 1321ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 1982ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"hljs-comment\">// Done in 2637ms</span></span><br></pre></td></tr></table></figure>\n\n<p>We saw that we get sequential execution because we have only 1 thread. If you try the sync implementation we will simply block our thread, but the thread pool allows us to do all the non trivial crypto work on another thread and keep our business rolling! Isn’t that cool?</p>\n<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h3><p>Before we start, important note, if we set <code>setTimeout</code> to 0, it will be 1ms.</p>\n<p>Who will execute first? According to what we saw, it will be setImmediate because the timer has not expired yet, but try and run it several times:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;setTimeout&#x27;</span>),<span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">setImmediate(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;setImmediate&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>First time:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate</span><br><span class=\"line\"><span class=\"hljs-built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>Second time:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">setTimeout</span></span><br><span class=\"line\">setImmediate</span><br></pre></td></tr></table></figure>\n\n<p>The interesting part here is that we know that when the event loop runs, it checks if the timer expired, which in our case is 1ms, which is a long time for a cpu, and the <code>setImmediate</code> will run only on next tick after we defined it and only after poll phase!. If the timer expired on start of next tick it will be called first, if not, the <code>setImmediate</code> will be called first and <code>setTimeout</code> afterwards.</p>\n<h3 id=\"Timers-IO\"><a href=\"#Timers-IO\" class=\"headerlink\" title=\"Timers + IO\"></a>Timers + IO</h3><p>Now, lets add an IO cycle</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"hljs-string\">&#x27;test.txt&#x27;</span>, <span class=\"hljs-function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;setTimeout&#x27;</span>),<span class=\"hljs-number\">0</span>)</span><br><span class=\"line\">  setImmediate(<span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;setImmediate&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The fs sends the readFile to our thread pool, when the operation finishes in poll phase, it registers the setTimeout and setImmediate and as we saw, the check phase always comes after the poll phase, so our <code>setImmediate</code> is guaranteed to execute first.</p>\n<h3 id=\"Recursion-Timers\"><a href=\"#Recursion-Timers\" class=\"headerlink\" title=\"Recursion + Timers\"></a>Recursion + Timers</h3><p>Recursive operations in the event loop:</p>\n<p>take this example:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.json(<span class=\"hljs-string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compute</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">1e3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`computing i=<span class=\"hljs-subst\">$&#123;i&#125;</span>...`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setImmediate(compute)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// Promise.resolve().then(compute)</span></span><br><span class=\"line\">  <span class=\"hljs-comment\">// process.nextTick(compute)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listening on port 3000&#x27;</span>))</span><br><span class=\"line\">compute()</span><br></pre></td></tr></table></figure>\n\n<p>Will our web server answer our requests?<br>Remember we said that recursive operations are dangerous on <code>microTaskQueue</code> and <code>nextTickQueue</code> in JS land? Well, thats true, which means, that a recursive call to <code>setImmediate</code> will not be immediate(1 macro per tick, remember?), but split to next tick after each invocation and that means that we pass iterations through poll phase which is responsible for our IO. To answer the question - Yes, we will answer the web requests!</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><p>Now, lets see with <code>Promise.resolve().then(compute)</code></p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"hljs-keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"hljs-function\">(<span class=\"hljs-params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.json(<span class=\"hljs-string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compute</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">1e3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`computing i=<span class=\"hljs-subst\">$&#123;i&#125;</span>...`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"hljs-comment\">// setImmediate(compute)</span></span><br><span class=\"line\">  <span class=\"hljs-built_in\">Promise</span>.resolve().then(compute)</span><br><span class=\"line\">  <span class=\"hljs-comment\">// process.nextTick(compute)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"hljs-number\">3000</span>, <span class=\"hljs-function\">()=&gt;</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;listening on port 3000&#x27;</span>))</span><br><span class=\"line\">compute()</span><br></pre></td></tr></table></figure>\n<p>The native implementation of promises work with the <code>microTaskQueue</code>, which will run in recursion indefinitely and our web server will never answer!</p>\n<p>Fun fact - With native promises we could implement long running promises that do recursions, and would never continue to next ticks - so fs operations and other network IO and phases from c++ land will never get execution time! For these reasons, <code>Bluebird</code> and other promise libraries implemented the <code>resolve</code> and <code>reject</code> to be in <code>setImmediate</code> which will never starve the IO! </p>\n<p>The <code>process.nextTick</code> should be obvious by now.</p>\n<h3 id=\"Promise-resolve-nextTick-Timers\"><a href=\"#Promise-resolve-nextTick-Timers\" class=\"headerlink\" title=\"Promise.resolve + nextTick + Timers\"></a>Promise.resolve + nextTick + Timers</h3><p>Last one before we wrap up:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;promise1 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;promise2 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;promise3 resolved&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next tick inside promise resolve handler&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;promise4 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"hljs-built_in\">Promise</span>.resolve().then(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;promise5 resolved&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;set immediate1&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;set immediate2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next tick1&#x27;</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next tick2&#x27;</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;next tick3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;set timeout&#x27;</span>), <span class=\"hljs-number\">0</span>);</span><br><span class=\"line\">setImmediate(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;set immediate3&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;set immediate4&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p>Do not be startled! Lets do what we always do in software engineering - break it down</p>\n<ul>\n<li>Promise.resolve - native implementation and on js land, it will run last after <code>nextTickQueue</code></li>\n<li>setImmediate runs after poll phase</li>\n<li>setTimeout runs on timers phase</li>\n<li>process.nextTick must be exhausted before continuing to next tick</li>\n</ul>\n<p>Now, <code>nextTick</code> is run on current tick and must be exhausted like we said, so it has to go first, because it runs on JS land regardless of where we are on the event loop!\nAfter the <code>nextTick</code> we have the <code>microTaskQueue</code> which like we said previously, is run last after <code>nextTickQueue</code> so it runs.<br>We have a <code>process.nextTick</code> inside the callback of a micro tick. That one we did not cover on purpose! What do you think will happen? Like we said, the <code>nextTickQueue</code> must be exhasted on each iteration, and we added a callback to the queue, so it wraps back to <code>nextTickQueue</code> and runs the callbacks again.<br>After all those steps we finally can start a new tick and by this time our timer has elapsed, so our setTimeout gets executed, our setImmediate is last and the result is:</p>\n<figure class=\"highlight javascript hljs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next tick1</span><br><span class=\"line\">next tick2</span><br><span class=\"line\">next tick3</span><br><span class=\"line\">promise1 resolved</span><br><span class=\"line\">promise2 resolved</span><br><span class=\"line\">promise3 resolved</span><br><span class=\"line\">promise4 resolved</span><br><span class=\"line\">promise5 resolved</span><br><span class=\"line\">next tick inside promise resolve handler</span><br><span class=\"line\">set timeout</span><br><span class=\"line\">set immediate1</span><br><span class=\"line\">set immediate2</span><br><span class=\"line\">set immediate3</span><br><span class=\"line\">set immediate4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We started by asking a few basic questions in Node.js, like: how does its internals look like and how does it operate? Later on, we tried to answer each of those questions as deep as possible. We learned that after all the abstractions, it is a (not so simple) <code>while</code> loop which enables us to build advanced systems and build web servers without worrying about concurrency control or multi threading. Finally, we saw some examples that seem trivial at first, but after our dive to Node core, we were able to answer them.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>After writing in Node.js for 3 years, I felt that the majority of the posts about it were lacking deeper knowledge, especially about the event loops internals, so, I decided to dig deep and give you my insights. Node.js seems like a simple beast to handle but in reality, there are a lot of layers of abstraction behind it. From one perspective, this abstraction is great, but, like everything else in software, abstraction comes at a cost.<br>The purpose of this post is to show you a broader picture of how the Node core handles the event loop, what it really is and how it coexists with the JS runtime.</p>\n<p> Lets start with asking a few simple questions and then answer them with detailed examples.</p>\n<ol>\n<li>What is the event loop?</li>\n<li>What are the phases of the event loop?</li>\n<li>What are the differences between the phases of the event loop and Node.js?</li>\n<li>How is it implemented in practice?</li>\n<li>Is Node.js really single threaded?</li>\n<li>Why do we have a thread pool if we already have the event loop that does all the async operations?</li>\n</ol>\n<h2 id=\"What-is-the-event-loop\"><a href=\"#What-is-the-event-loop\" class=\"headerlink\" title=\"What is the event loop?\"></a>What is the event loop?</h2><p>From the Node.js website, summarized:</p>\n<blockquote>\n<p>Node.js is an event-based platform. This means that everything that happens in Node is the reaction to an event. Abstracted away from the developer, the reactions to events are all handled by a library called <strong>libuv</strong>.</p>\n</blockquote>\n<blockquote>\n<p><strong>libuv</strong> is cross-platform support library which was originally written for Node.js. It is designed around the event-driven asynchronous I/O model.</p>\n</blockquote>\n<blockquote>\n<p><strong>libuv</strong> provides 2 mechanisms. One is a called an <strong>event loop</strong>, which runs on one thread and the other mechanism is called a <strong>thread pool</strong>.</p>\n</blockquote>\n<p>It is important to note that the <strong>event loop</strong> and the JS runtime run on the <strong>same</strong> thread and the <strong>thread pool</strong> is initiated with <strong>4</strong> threads by default. Also, <strong>libuv</strong> can be used not only in Node.js, that is why I will show the differences between the event loop itself and the event loop in Node.js context.</p>\n<h2 id=\"What-are-the-phases-in-libuv\"><a href=\"#What-are-the-phases-in-libuv\" class=\"headerlink\" title=\"What are the phases in libuv?\"></a>What are the phases in libuv?</h2><p>The phases of <strong>libuv</strong> are:</p>\n<ul>\n<li>update loop time - it is the starting point to know time from now on</li>\n<li>check loop alive - Loop is considered alive if it has active and ref’d handles, active requests or closing handles.</li>\n<li>Run due timers - the timers we pass to <strong>libuv</strong>, that are past the definition of <strong>now</strong>, we defined in the first phase, are getting called. The timers are held in a min heap data structure, for efficiency. If the first timer is not expired than we know that all others below it were created later in time.</li>\n<li>Call pending callbacks - There are cases in which the callbacks are deffered to next iteration, this is where they are called.</li>\n<li>Run idle handles - internal</li>\n<li>Run prepare handles - internal</li>\n<li>Poll for IO - this is where the loop handles any incoming TCP connections. The time for how long the loop is waiting in each iteration will be explained later on.</li>\n<li>Run check handles - All check handles are run here, for example <code>setImmediate</code> if we are in the context of Node.js</li>\n<li>Run close callbacks - all <code>.on(&#39;close&#39;)</code> events are called here, if something happened we want that the timers+poll+check callbacks will complete and afterwards the close callbacks are called, for example, the <code>socket.destroy()</code> in Node.js.</li>\n<li>Repeat</li>\n</ul>\n<p>The visual diagram of the phases looks like this, do not worry if you still do not get the full picture, we still have things to cover!</p>\n<p><img src=\"/2019/06/09/The-Javascript-Event-Loop/loop_iteration.png\" alt></p>\n<h2 id=\"What-are-the-differences-between-the-phases-of-libuv-and-Node-js\"><a href=\"#What-are-the-differences-between-the-phases-of-libuv-and-Node-js\" class=\"headerlink\" title=\"What are the differences between the phases of libuv and Node.js\"></a>What are the differences between the phases of libuv and Node.js</h2><p>Node.js uses all of the above mentioned phases and adds 2 more: the <code>process.nextTick</code> and <code>microTaskQueue</code>.\n the differences in Node.js are:</p>\n<ul>\n<li><p>Process.nextTick() is not technically part of the event loop. Instead, the nextTickQueue will be processed after the current operation is completed, regardless of the current phase of the event loop. Here, an operation is defined as a transition from the underlying C/C++ handler, and handling the JavaScript that needs to be executed.<br>Any time you call process.nextTick() in a given phase, all callbacks passed to process.nextTick() will be resolved before the event loop continues. This can create some bad situations because it allows you to “starve” your I/O by making recursive process.nextTick() calls, which prevents the event loop from reaching the poll phase.</p>\n</li>\n<li><p>In the context of native promises, a promise callback is considered as a microtask and queued in a microtask queue which will be processed right after the next tick queue. It is also dangerous as recursive calls to promises in theory will never reach the next tick.</p>\n</li>\n<li><p>When the event loop enters the poll phase and there are no timers scheduled, one of two things will happen:<br>If the poll queue is not empty, the event loop will iterate through its queue of callbacks executing them synchronously until either the queue has been exhausted, or the system-dependent hard limit is reached.<br>If the poll queue is empty, one of two more things will happen:<br>If scripts have been scheduled by setImmediate(), the event loop will end the poll phase and continue to the check phase to execute those scheduled scripts.<br>If scripts have not been scheduled by setImmediate(), the event loop will wait for callbacks to be added to the queue, then execute them immediately.<br>Once the poll queue is empty the event loop will check for timers whose time thresholds have been reached. If one or more timers are ready, the event loop will wrap back to the timers phase to execute those timers’ callbacks</p>\n</li>\n</ul>\n<p>Before we continue, it is important to note that all phases we mentioned(timers, pending, poll, close) always call <strong>1</strong> callback which is a macro operation that is sent to JS land and afterwards the <code>nextTickQueue</code> + <code>microTaskQueue</code> are run, no matter where we are in the event loop. <strong>Each macro operation combined with the <code>nextTickQueue</code> and <code>microTaskQueue</code> is called an event loop tick.</strong> </p>\n<p>Here is the diagram for Node.js event loop, notice there is not much difference except the 2 queues we talked about(nextTickQueue and microTaskQueue).</p>\n<p><img src=\"/2019/06/09/The-Javascript-Event-Loop/nodejs-event-loop-workflow.png\" alt></p>\n<p>Did you notice something interesting we learned about the callback queue<strong>s</strong>? Every one talks about <strong>a callback queue</strong> but in reality <strong>each phase has its own callback queue</strong>.</p>\n<h2 id=\"How-is-the-event-loop-implemented-in-practice\"><a href=\"#How-is-the-event-loop-implemented-in-practice\" class=\"headerlink\" title=\"How is the event loop implemented in practice?\"></a>How is the event loop implemented in practice?</h2><p>Here is the c++ code from the libuv github, I am sure you can figure the phases out by yourself and if you look carefully, you will see that the timeout for the poll phase is calculated. Also, we have a special mode of RUN_ONCE which dictates that if no callbacks were called in current poll phase, it means we have no work to do except the timers, so just update time and run timers phase before exiting.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uv_run</span><span class=\"params\">(<span class=\"keyword\">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> timeout;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> r;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> ran_pending;</span><br><span class=\"line\"></span><br><span class=\"line\">  r = <span class=\"built_in\">uv__loop_alive</span>(loop);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!r)</span><br><span class=\"line\">    <span class=\"built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (r != <span class=\"number\">0</span> &amp;&amp; loop-&gt;stop_flag == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\">    <span class=\"built_in\">uv__run_timers</span>(loop);</span><br><span class=\"line\">    ran_pending = <span class=\"built_in\">uv__run_pending</span>(loop);</span><br><span class=\"line\">    <span class=\"built_in\">uv__run_idle</span>(loop);</span><br><span class=\"line\">    <span class=\"built_in\">uv__run_prepare</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    timeout = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class=\"line\">      timeout = <span class=\"built_in\">uv_backend_timeout</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">uv__io_poll</span>(loop, timeout);</span><br><span class=\"line\">    <span class=\"built_in\">uv__run_check</span>(loop);</span><br><span class=\"line\">    <span class=\"built_in\">uv__run_closing_handles</span>(loop);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* UV_RUN_ONCE implies forward progress: at least one callback must have</span></span><br><span class=\"line\"><span class=\"comment\">       * been invoked when it returns. uv__io_poll() can return without doing</span></span><br><span class=\"line\"><span class=\"comment\">       * I/O (meaning: no callbacks) when its timeout expires - which means we</span></span><br><span class=\"line\"><span class=\"comment\">       * have pending timers that satisfy the forward progress constraint.</span></span><br><span class=\"line\"><span class=\"comment\">       *</span></span><br><span class=\"line\"><span class=\"comment\">       * UV_RUN_NOWAIT makes no guarantees about progress so it&#x27;s omitted from</span></span><br><span class=\"line\"><span class=\"comment\">       * the check.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"built_in\">uv__update_time</span>(loop);</span><br><span class=\"line\">      <span class=\"built_in\">uv__run_timers</span>(loop);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    r = <span class=\"built_in\">uv__loop_alive</span>(loop);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class=\"line\"><span class=\"comment\">   * dirtying a cache line.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loop-&gt;stop_flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">    loop-&gt;stop_flag = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Let’s see how the timeout for the poll phase(waiting on TCP connections) is calculated.<br>To break it down for you it goes like this:</p>\n<ul>\n<li>If the stop flag is not 0, return 0</li>\n<li>If we dont have active handles or requests, return 0</li>\n<li>If the idle and pending queues are not empty return 0</li>\n<li>If we have closing handles return 0</li>\n<li>Otherwise return the next timeout from the loop</li>\n</ul>\n<p>What this means is that the loop will not wait in poll phase if not neccessary, but if we have a timer, then it will wait in poll phase for the time of that timer in order to wrap to the timers phase instead of just doing meaningless iterations.</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">uv_backend_timeout</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loop-&gt;stop_flag != <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">uv__has_active_handles</span>(loop) &amp;&amp; !<span class=\"built_in\">uv__has_active_reqs</span>(loop))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">QUEUE_EMPTY</span>(&amp;loop-&gt;idle_handles))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!<span class=\"built_in\">QUEUE_EMPTY</span>(&amp;loop-&gt;pending_queue))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (loop-&gt;closing_handles)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">uv__next_timeout</span>(loop);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Is-Node-js-single-threaded\"><a href=\"#Is-Node-js-single-threaded\" class=\"headerlink\" title=\"Is Node.js single threaded?\"></a>Is Node.js single threaded?</h2><p>Well, as we said previously, the event loop runs on the same thread as the JS runtime, which means, that we have one execution thread, so by definition, <strong>Node.js is single threaded</strong>.</p>\n<p>Essentially, when the JS stack is empty of user code(all sync code we defined in our scripts), the event loop runs a tick. Important thing to note - slow sync code can halt the system to the ground at scale, due to the shared thread of the JS runtime with the event loop. More concrete, the context switch to c++ land cannot happen until the JS stack is empty.</p>\n<p>If you try to do recursive operations in different queues(different stages of the event loop), even the <code>setImmediate</code>, it will always run on later ticks, remember the 1 macro per tick we talked about? This is it. But, <code>microTaskQueue</code> and <code>nextTickQueue</code> that are defined in JS land, will run recursively on the same tick, because we learned that the event loop will only run when all JS code is executed and the 2 queues above are simply javascript.</p>\n<h2 id=\"Why-do-we-have-a-thread-pool-if-we-already-have-the-event-loop-that-does-all-the-async-operations\"><a href=\"#Why-do-we-have-a-thread-pool-if-we-already-have-the-event-loop-that-does-all-the-async-operations\" class=\"headerlink\" title=\"Why do we have a thread pool if we already have the event loop that does all the async operations?\"></a>Why do we have a thread pool if we already have the event loop that does all the async operations?</h2><p>This is an interesting part of Node.js land, because it is single threaded, like we already answered, but its also not! It all depends from what perspective you look at it. We do have one execution thread, but we also have the thread pool that comes along with the event loop.</p>\n<p>Taken from the libuv website:</p>\n<blockquote>\n<p>Whenever possible, libuv will use asynchronous interfaces provided by the OS, avoiding usage of the thread pool. The same applies to third party subsystems like databases. The event loop follows the rather usual single threaded asynchronous I/O approach: all (network) I/O is performed on non-blocking sockets which are polled using the best mechanism available on the given platform: epoll on Linux, kqueue on OSX and other BSDs, event ports on SunOS and IOCP on Windows.</p>\n</blockquote>\n<p>What this basically means is that all operating systems have some sort of non-blocking IO handling we can leverage. We can subscribe to all events regarding new TCP connections, incoming data from TCP connection and etc. But what about crypto stuff, DNS resolving, file system operations? They are supposed to be non blocking as well, right?</p>\n<blockquote>\n<p>Well, Not all the types of I/O can be performed using async implementations. Even on the same OS platform, there are complexities in supporting different types of I/O. Typically, network I/O can be performed in a non-blocking way using epoll, kqueue, event ports and IOCP, but the file I/O is much more complex. Certain systems, such as Linux does not support complete asynchrony for file system access. And there are limitations in file system event notifications/signaling with kqueue in MacOS.</p>\n</blockquote>\n<p>Ok, we figured out that fs operations are problematic and must be done sync, but why DNS resolving must be sync too? To resolve DNS you must <strong>read</strong> the hosts file first on the host machine. We must use the fs for that and you get it by now…<br>Regarding the crypto, Cryptography on the most basic level is performing calculations, and there is no way to to calculations asynchronously on the same thread. For all the reasons above, we have a thread pool. When you send an async fs operation or an async crypto/dns resolve callbacks to the event loop, it gets picked up by the thread pool and resolved on a different thread <strong>synchronously</strong>.</p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Now, after we answered all the questions, lets look at some examples:<br>We will call the crypto.pbkdf2 async implementation.</p>\n<p>I added a comment of how the results look in the previous example with default 4 threads that took 9xx ms completion time</p>\n<h3 id=\"UV-THREADPOOL-SIZE\"><a href=\"#UV-THREADPOOL-SIZE\" class=\"headerlink\" title=\"UV_THREADPOOL_SIZE\"></a>UV_THREADPOOL_SIZE</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; pbkdf2 &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"keyword\">const</span> doExpensiveHashing = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  pbkdf2(<span class=\"string\">&#x27;pwd&#x27;</span>, <span class=\"string\">&#x27;salt&#x27;</span>, <span class=\"number\">100000</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;sha512&#x27;</span>, <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Done in <span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now() - start&#125;</span>ms`</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 937ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 942ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 943ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 943ms</span></span><br></pre></td></tr></table></figure>\n<p>now set the environment variable <code>UV_THREADPOOL_SIZE=1</code> and run the code again, </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; pbkdf2 &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;crypto&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> start = <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"><span class=\"keyword\">const</span> doExpensiveHashing = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  pbkdf2(<span class=\"string\">&#x27;pwd&#x27;</span>, <span class=\"string\">&#x27;salt&#x27;</span>, <span class=\"number\">100000</span>, <span class=\"number\">512</span>, <span class=\"string\">&#x27;sha512&#x27;</span>, <span class=\"function\">() =&gt;</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`Done in <span class=\"subst\">$&#123;<span class=\"built_in\">Date</span>.now() - start&#125;</span>ms`</span>)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 658ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 1321ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 1982ms</span></span><br><span class=\"line\">doExpensiveHashing(); <span class=\"comment\">// Done in 2637ms</span></span><br></pre></td></tr></table></figure>\n\n<p>We saw that we get sequential execution because we have only 1 thread. If you try the sync implementation we will simply block our thread, but the thread pool allows us to do all the non trivial crypto work on another thread and keep our business rolling! Isn’t that cool?</p>\n<h3 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h3><p>Before we start, important note, if we set <code>setTimeout</code> to 0, it will be 1ms.</p>\n<p>Who will execute first? According to what we saw, it will be setImmediate because the timer has not expired yet, but try and run it several times:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>),<span class=\"number\">0</span>)</span><br><span class=\"line\">setImmediate(<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setImmediate&#x27;</span>))</span><br></pre></td></tr></table></figure>\n\n<p>First time:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setImmediate</span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br></pre></td></tr></table></figure>\n\n<p>Second time:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span></span><br><span class=\"line\">setImmediate</span><br></pre></td></tr></table></figure>\n\n<p>The interesting part here is that we know that when the event loop runs, it checks if the timer expired, which in our case is 1ms, which is a long time for a cpu, and the <code>setImmediate</code> will run only on next tick after we defined it and only after poll phase!. If the timer expired on start of next tick it will be called first, if not, the <code>setImmediate</code> will be called first and <code>setTimeout</code> afterwards.</p>\n<h3 id=\"Timers-IO\"><a href=\"#Timers-IO\" class=\"headerlink\" title=\"Timers + IO\"></a>Timers + IO</h3><p>Now, lets add an IO cycle</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">fs.readFile(<span class=\"string\">&#x27;test.txt&#x27;</span>, <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setTimeout&#x27;</span>),<span class=\"number\">0</span>)</span><br><span class=\"line\">  setImmediate(<span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;setImmediate&#x27;</span>))</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>The fs sends the readFile to our thread pool, when the operation finishes in poll phase, it registers the setTimeout and setImmediate and as we saw, the check phase always comes after the poll phase, so our <code>setImmediate</code> is guaranteed to execute first.</p>\n<h3 id=\"Recursion-Timers\"><a href=\"#Recursion-Timers\" class=\"headerlink\" title=\"Recursion + Timers\"></a>Recursion + Timers</h3><p>Recursive operations in the event loop:</p>\n<p>take this example:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.json(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1e3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`computing i=<span class=\"subst\">$&#123;i&#125;</span>...`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  setImmediate(compute)</span><br><span class=\"line\">  <span class=\"comment\">// Promise.resolve().then(compute)</span></span><br><span class=\"line\">  <span class=\"comment\">// process.nextTick(compute)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;listening on port 3000&#x27;</span>))</span><br><span class=\"line\">compute()</span><br></pre></td></tr></table></figure>\n\n<p>Will our web server answer our requests?<br>Remember we said that recursive operations are dangerous on <code>microTaskQueue</code> and <code>nextTickQueue</code> in JS land? Well, thats true, which means, that a recursive call to <code>setImmediate</code> will not be immediate(1 macro per tick, remember?), but split to next tick after each invocation and that means that we pass iterations through poll phase which is responsible for our IO. To answer the question - Yes, we will answer the web requests!</p>\n<h3 id=\"Promise-resolve\"><a href=\"#Promise-resolve\" class=\"headerlink\" title=\"Promise.resolve\"></a>Promise.resolve</h3><p>Now, lets see with <code>Promise.resolve().then(compute)</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;express&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> app = express()</span><br><span class=\"line\"></span><br><span class=\"line\">app.use(<span class=\"function\">(<span class=\"params\">req,res,next</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  res.json(<span class=\"string\">&#x27;ok&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">compute</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">1e3</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`computing i=<span class=\"subst\">$&#123;i&#125;</span>...`</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// setImmediate(compute)</span></span><br><span class=\"line\">  <span class=\"built_in\">Promise</span>.resolve().then(compute)</span><br><span class=\"line\">  <span class=\"comment\">// process.nextTick(compute)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(<span class=\"number\">3000</span>, <span class=\"function\">()=&gt;</span><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;listening on port 3000&#x27;</span>))</span><br><span class=\"line\">compute()</span><br></pre></td></tr></table></figure>\n<p>The native implementation of promises work with the <code>microTaskQueue</code>, which will run in recursion indefinitely and our web server will never answer!</p>\n<p>Fun fact - With native promises we could implement long running promises that do recursions, and would never continue to next ticks - so fs operations and other network IO and phases from c++ land will never get execution time! For these reasons, <code>Bluebird</code> and other promise libraries implemented the <code>resolve</code> and <code>reject</code> to be in <code>setImmediate</code> which will never starve the IO! </p>\n<p>The <code>process.nextTick</code> should be obvious by now.</p>\n<h3 id=\"Promise-resolve-nextTick-Timers\"><a href=\"#Promise-resolve-nextTick-Timers\" class=\"headerlink\" title=\"Promise.resolve + nextTick + Timers\"></a>Promise.resolve + nextTick + Timers</h3><p>Last one before we wrap up:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise1 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise2 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise3 resolved&#x27;</span>);</span><br><span class=\"line\">    process.nextTick(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;next tick inside promise resolve handler&#x27;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise4 resolved&#x27;</span>));</span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.resolve().then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;promise5 resolved&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set immediate1&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set immediate2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">process.nextTick(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;next tick1&#x27;</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;next tick2&#x27;</span>));</span><br><span class=\"line\">process.nextTick(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;next tick3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set timeout&#x27;</span>), <span class=\"number\">0</span>);</span><br><span class=\"line\">setImmediate(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set immediate3&#x27;</span>));</span><br><span class=\"line\">setImmediate(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;set immediate4&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p>Do not be startled! Lets do what we always do in software engineering - break it down</p>\n<ul>\n<li>Promise.resolve - native implementation and on js land, it will run last after <code>nextTickQueue</code></li>\n<li>setImmediate runs after poll phase</li>\n<li>setTimeout runs on timers phase</li>\n<li>process.nextTick must be exhausted before continuing to next tick</li>\n</ul>\n<p>Now, <code>nextTick</code> is run on current tick and must be exhausted like we said, so it has to go first, because it runs on JS land regardless of where we are on the event loop!\nAfter the <code>nextTick</code> we have the <code>microTaskQueue</code> which like we said previously, is run last after <code>nextTickQueue</code> so it runs.<br>We have a <code>process.nextTick</code> inside the callback of a micro tick. That one we did not cover on purpose! What do you think will happen? Like we said, the <code>nextTickQueue</code> must be exhasted on each iteration, and we added a callback to the queue, so it wraps back to <code>nextTickQueue</code> and runs the callbacks again.<br>After all those steps we finally can start a new tick and by this time our timer has elapsed, so our setTimeout gets executed, our setImmediate is last and the result is:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">next tick1</span><br><span class=\"line\">next tick2</span><br><span class=\"line\">next tick3</span><br><span class=\"line\">promise1 resolved</span><br><span class=\"line\">promise2 resolved</span><br><span class=\"line\">promise3 resolved</span><br><span class=\"line\">promise4 resolved</span><br><span class=\"line\">promise5 resolved</span><br><span class=\"line\">next tick inside promise resolve handler</span><br><span class=\"line\">set timeout</span><br><span class=\"line\">set immediate1</span><br><span class=\"line\">set immediate2</span><br><span class=\"line\">set immediate3</span><br><span class=\"line\">set immediate4</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p>We started by asking a few basic questions in Node.js, like: how does its internals look like and how does it operate? Later on, we tried to answer each of those questions as deep as possible. We learned that after all the abstractions, it is a (not so simple) <code>while</code> loop which enables us to build advanced systems and build web servers without worrying about concurrency control or multi threading. Finally, we saw some examples that seem trivial at first, but after our dive to Node core, we were able to answer them.</p>\n"}],"PostAsset":[{"_id":"source/_posts/Collecting-Docker-Logs-With-Loki/adding-loki.png","post":"ckravj1my000q78taevyi00zi","slug":"adding-loki.png","modified":1,"renderable":1},{"_id":"source/_posts/Collecting-Docker-Logs-With-Loki/grafana-loki.png","post":"ckravj1my000q78taevyi00zi","slug":"grafana-loki.png","modified":1,"renderable":1},{"_id":"source/_posts/Context-Maps-In-Domain-Driven-Design/sddd.jpg","post":"ckravj1mx000p78ta2b84fn12","slug":"sddd.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/goroutines.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"goroutines.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/leak.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"leak.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/malg.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"malg.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/malg2.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"malg2.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/malg3.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"malg3.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/pprof_alloc_space.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"pprof_alloc_space.png","modified":1,"renderable":1},{"_id":"source/_posts/Golang-Memory-Leaks/pprof_inuse_space.png","post":"ckravj1my000r78ta4hqlaxf8","slug":"pprof_inuse_space.png","modified":1,"renderable":1},{"_id":"source/_posts/what-are-microservices/api-composer.png","post":"ckravj1n2001078tafqybakyv","slug":"api-composer.png","modified":1,"renderable":1},{"_id":"source/_posts/what-are-microservices/bff.png","post":"ckravj1n2001078tafqybakyv","slug":"bff.png","modified":1,"renderable":1},{"_id":"source/_posts/what-are-microservices/gateway.png","post":"ckravj1n2001078tafqybakyv","slug":"gateway.png","modified":1,"renderable":1},{"_id":"source/_posts/what-are-microservices/side-car.png","post":"ckravj1n2001078tafqybakyv","slug":"side-car.png","modified":1,"renderable":1},{"_id":"source/_posts/Implementing-Ports-and-Adapters/goland.png","post":"ckravj1n5001578ta69oihplm","slug":"goland.png","modified":1,"renderable":1},{"_id":"source/_posts/Implementing-Clean-Architecture/CleanArchitecture.jpg","post":"ckravj1o1003j78ta8v5c1944","slug":"CleanArchitecture.jpg","modified":1,"renderable":1},{"_id":"source/_posts/The-Javascript-Event-Loop/loop_iteration.png","post":"ckravj1o2003k78ta3dvkbupq","slug":"loop_iteration.png","modified":1,"renderable":1},{"_id":"source/_posts/The-Javascript-Event-Loop/nodejs-event-loop-workflow.png","post":"ckravj1o2003k78ta3dvkbupq","slug":"nodejs-event-loop-workflow.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ckravj1ml000878ta5ymxb0z1","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1mp000c78taept96jio"},{"post_id":"ckravj1mx000p78ta2b84fn12","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1n0000v78ta4jlu676j"},{"post_id":"ckravj1mv000l78tagwd3h2ep","category_id":"ckravj1mx000n78ta9web59e5","_id":"ckravj1n1000x78tafk5b1j2a"},{"post_id":"ckravj1my000r78ta4hqlaxf8","category_id":"ckravj1mx000n78ta9web59e5","_id":"ckravj1n2001178ta7ssf0sqd"},{"post_id":"ckravj1mz000u78taes2ldcuq","category_id":"ckravj1mx000n78ta9web59e5","_id":"ckravj1n4001378tahph9676y"},{"post_id":"ckravj1mw000m78tahrfxgg60","category_id":"ckravj1my000s78ta8wwk59xi","_id":"ckravj1n8001678ta07sy8vwt"},{"post_id":"ckravj1n1000w78ta8x0d65u8","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1nc001778tadcs8ci7n"},{"post_id":"ckravj1n2001078tafqybakyv","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1nd001978tacog804hf"},{"post_id":"ckravj1my000q78taevyi00zi","category_id":"ckravj1n1000y78ta5q0v9w43","_id":"ckravj1nd001a78ta5wix5q6f"},{"post_id":"ckravj1n4001278taflnuhkrg","category_id":"ckravj1mx000n78ta9web59e5","_id":"ckravj1nd001b78ta7jhp2mcf"},{"post_id":"ckravj1n5001578ta69oihplm","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1nf001e78ta9yne4308"},{"post_id":"ckravj1o1003j78ta8v5c1944","category_id":"ckravj1mm000978ta1uuud5uu","_id":"ckravj1o3003m78ta4xq0arq6"},{"post_id":"ckravj1o2003k78ta3dvkbupq","category_id":"ckravj1mx000n78ta9web59e5","_id":"ckravj1o3003n78ta8fjb58o0"},{"post_id":"ckravj1mc000178ta0gui1c4r","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1ox004b78ta57kl94mj"},{"post_id":"ckravj1mc000178ta0gui1c4r","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1ox004c78tagpg887lr"},{"post_id":"ckravj1mh000378ta4wji3kou","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1oy004e78tabm281lal"},{"post_id":"ckravj1mh000378ta4wji3kou","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1oy004f78ta3wojfl9m"},{"post_id":"ckravj1mf000278tabespb9l6","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1oy004g78tagnxff3gn"},{"post_id":"ckravj1mf000278tabespb9l6","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1oz004h78ta81769nb3"},{"post_id":"ckravj1mj000678ta5213ezrf","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1oz004i78ta92812tp6"},{"post_id":"ckravj1mj000678ta5213ezrf","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1oz004j78tacwqkgken"},{"post_id":"ckravj1mi000478ta6mwb4bay","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1pd004k78ta5pomfv78"},{"post_id":"ckravj1mi000478ta6mwb4bay","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1pf004l78ta13qm6mdn"},{"post_id":"ckravj1mk000778tae7cvgeeq","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1pf004m78ta4opc8mkb"},{"post_id":"ckravj1mk000778tae7cvgeeq","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1pg004n78ta6dgqf8tz"},{"post_id":"ckravj1mi000578tadwk56d69","category_id":"ckravj1or004478ta4a9k2d7p","_id":"ckravj1pg004o78taao8y8iw3"},{"post_id":"ckravj1mi000578tadwk56d69","category_id":"ckravj1ov004878ta94yjgfvw","_id":"ckravj1pg004p78ta358b8m6k"}],"PostTag":[{"post_id":"ckravj1ml000878ta5ymxb0z1","tag_id":"ckravj1mo000a78ta04b94ok2","_id":"ckravj1mq000g78tac4gy38x9"},{"post_id":"ckravj1ml000878ta5ymxb0z1","tag_id":"ckravj1mp000b78ta4xz5477l","_id":"ckravj1mq000h78ta91m584op"},{"post_id":"ckravj1ml000878ta5ymxb0z1","tag_id":"ckravj1mp000d78ta4zxe4bww","_id":"ckravj1mq000i78ta1hs71dwj"},{"post_id":"ckravj1ml000878ta5ymxb0z1","tag_id":"ckravj1mp000e78ta11xohpxo","_id":"ckravj1mq000j78ta1b7caza4"},{"post_id":"ckravj1ml000878ta5ymxb0z1","tag_id":"ckravj1mp000f78ta4pg98vni","_id":"ckravj1mq000k78ta28sq6gfm"},{"post_id":"ckravj1mv000l78tagwd3h2ep","tag_id":"ckravj1mx000o78ta8gqqhglr","_id":"ckravj1nf001d78ta3v0yd02m"},{"post_id":"ckravj1mv000l78tagwd3h2ep","tag_id":"ckravj1mz000t78ta0lyb5p93","_id":"ckravj1nf001f78ta6nmgg4fe"},{"post_id":"ckravj1mv000l78tagwd3h2ep","tag_id":"ckravj1n1000z78tacpn8djvf","_id":"ckravj1nh001h78tab1eke08n"},{"post_id":"ckravj1mv000l78tagwd3h2ep","tag_id":"ckravj1n5001478ta67a97tnj","_id":"ckravj1ni001i78tafydj8qct"},{"post_id":"ckravj1mv000l78tagwd3h2ep","tag_id":"ckravj1nc001878ta8x5ec5vy","_id":"ckravj1nj001k78taax6ecaco"},{"post_id":"ckravj1mw000m78tahrfxgg60","tag_id":"ckravj1nd001c78ta8wgkgq7q","_id":"ckravj1nj001l78ta8wrw6hax"},{"post_id":"ckravj1mw000m78tahrfxgg60","tag_id":"ckravj1mz000t78ta0lyb5p93","_id":"ckravj1nk001n78ta1isj72j8"},{"post_id":"ckravj1mx000p78ta2b84fn12","tag_id":"ckravj1ni001j78ta96xv5h5n","_id":"ckravj1nk001p78tacz6d4np9"},{"post_id":"ckravj1mx000p78ta2b84fn12","tag_id":"ckravj1mo000a78ta04b94ok2","_id":"ckravj1nk001q78ta0m8z7trq"},{"post_id":"ckravj1mx000p78ta2b84fn12","tag_id":"ckravj1nj001m78ta1nc9hncy","_id":"ckravj1nk001s78ta4z028yyl"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1nk001o78tabgd3am0i","_id":"ckravj1nm001y78ta7l5z4pc4"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1nk001r78ta2owredld","_id":"ckravj1nm001z78ta6j028jf3"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1nk001t78ta0qbq9vg0","_id":"ckravj1nm002178ta304phisa"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1nk001u78ta2u7cd3pg","_id":"ckravj1nm002278ta1tr50vqi"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1nk001v78tacvjhelyr","_id":"ckravj1nn002478tacllggys6"},{"post_id":"ckravj1my000q78taevyi00zi","tag_id":"ckravj1n1000z78tacpn8djvf","_id":"ckravj1nn002578ta4ad3cyuq"},{"post_id":"ckravj1my000r78ta4hqlaxf8","tag_id":"ckravj1mp000f78ta4pg98vni","_id":"ckravj1no002878tagz6s89j9"},{"post_id":"ckravj1my000r78ta4hqlaxf8","tag_id":"ckravj1nl001x78ta5sfabase","_id":"ckravj1no002978ta2lku7ucw"},{"post_id":"ckravj1my000r78ta4hqlaxf8","tag_id":"ckravj1nm002078ta0qum5gb3","_id":"ckravj1no002b78ta2lg48qpo"},{"post_id":"ckravj1my000r78ta4hqlaxf8","tag_id":"ckravj1nm002378ta7b8j9h24","_id":"ckravj1np002c78taagab18ul"},{"post_id":"ckravj1my000r78ta4hqlaxf8","tag_id":"ckravj1nn002678ta4gd4771m","_id":"ckravj1nq002e78ta0abi8vga"},{"post_id":"ckravj1mz000u78taes2ldcuq","tag_id":"ckravj1mx000o78ta8gqqhglr","_id":"ckravj1nq002f78tagavd55a4"},{"post_id":"ckravj1mz000u78taes2ldcuq","tag_id":"ckravj1nn002778tads0wcvza","_id":"ckravj1ns002h78tacdxwc94u"},{"post_id":"ckravj1mz000u78taes2ldcuq","tag_id":"ckravj1mz000t78ta0lyb5p93","_id":"ckravj1ns002i78ta5jzwg1nv"},{"post_id":"ckravj1mz000u78taes2ldcuq","tag_id":"ckravj1no002a78taf56lgjjs","_id":"ckravj1ns002k78ta45jj3y99"},{"post_id":"ckravj1n1000w78ta8x0d65u8","tag_id":"ckravj1mp000b78ta4xz5477l","_id":"ckravj1ns002l78tac9kcglq7"},{"post_id":"ckravj1n1000w78ta8x0d65u8","tag_id":"ckravj1ni001j78ta96xv5h5n","_id":"ckravj1ns002m78tacfx6beys"},{"post_id":"ckravj1n1000w78ta8x0d65u8","tag_id":"ckravj1nq002g78ta71lb6j9b","_id":"ckravj1ns002o78ta25b4gf9m"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1mp000b78ta4xz5477l","_id":"ckravj1nt002t78ta1c73dvuw"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1ns002j78ta0pjl4akv","_id":"ckravj1nt002u78ta3r7b2ltk"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1no002a78taf56lgjjs","_id":"ckravj1nt002w78ta69gva01u"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1nt002p78ta27kb9cjg","_id":"ckravj1nt002x78ta0irqb1hc"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1nt002q78ta3yajajq4","_id":"ckravj1nu002z78ta4iuxdofr"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1nt002r78ta9bhr3fyv","_id":"ckravj1nu003078ta8e6z5wp7"},{"post_id":"ckravj1n2001078tafqybakyv","tag_id":"ckravj1mo000a78ta04b94ok2","_id":"ckravj1nu003278ta8hjtdf4t"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nt002s78tabvthfc96","_id":"ckravj1nx003778ta9sk98ghp"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nt002v78ta325scbsc","_id":"ckravj1nx003878tabpru4itm"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nt002y78ta99oa7p52","_id":"ckravj1nx003a78ta3tof8wki"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nu003178taagrk1wk5","_id":"ckravj1nx003b78tagbnidvy9"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nm002078ta0qum5gb3","_id":"ckravj1nx003c78ta40ib1wrp"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nu003478ta1z7x1shx","_id":"ckravj1nx003d78taa7wv4a3h"},{"post_id":"ckravj1n4001278taflnuhkrg","tag_id":"ckravj1nu003578ta00i30956","_id":"ckravj1nx003e78tadrlpg50i"},{"post_id":"ckravj1n5001578ta69oihplm","tag_id":"ckravj1nv003678ta7djs7say","_id":"ckravj1nx003f78tahvv9hbv5"},{"post_id":"ckravj1n5001578ta69oihplm","tag_id":"ckravj1mp000f78ta4pg98vni","_id":"ckravj1nx003g78ta9oujcy4k"},{"post_id":"ckravj1n5001578ta69oihplm","tag_id":"ckravj1nx003978tah4e57820","_id":"ckravj1nx003h78ta0kiv0mx1"},{"post_id":"ckravj1n5001578ta69oihplm","tag_id":"ckravj1mo000a78ta04b94ok2","_id":"ckravj1nx003i78tabhb80b2z"},{"post_id":"ckravj1o1003j78ta8v5c1944","tag_id":"ckravj1no002a78taf56lgjjs","_id":"ckravj1o4003r78ta0zg31590"},{"post_id":"ckravj1o1003j78ta8v5c1944","tag_id":"ckravj1o3003l78tabzjv3oiy","_id":"ckravj1o4003s78ta6tyibpm1"},{"post_id":"ckravj1o1003j78ta8v5c1944","tag_id":"ckravj1mo000a78ta04b94ok2","_id":"ckravj1o4003u78ta2z5veugh"},{"post_id":"ckravj1o1003j78ta8v5c1944","tag_id":"ckravj1o3003o78ta8l470irh","_id":"ckravj1o4003v78ta1ob59g3j"},{"post_id":"ckravj1o1003j78ta8v5c1944","tag_id":"ckravj1o3003p78tabqud5345","_id":"ckravj1o7003x78tah1ja0man"},{"post_id":"ckravj1o2003k78ta3dvkbupq","tag_id":"ckravj1no002a78taf56lgjjs","_id":"ckravj1o7003z78tafkrjdlz0"},{"post_id":"ckravj1o2003k78ta3dvkbupq","tag_id":"ckravj1o3003q78ta1385gsoc","_id":"ckravj1o7004078ta09bw7nw6"},{"post_id":"ckravj1o2003k78ta3dvkbupq","tag_id":"ckravj1o4003t78tab4puba5c","_id":"ckravj1o7004178ta81foe4ru"},{"post_id":"ckravj1o2003k78ta3dvkbupq","tag_id":"ckravj1o6003w78ta0pm2f7o3","_id":"ckravj1o7004278ta8iq277s8"},{"post_id":"ckravj1o2003k78ta3dvkbupq","tag_id":"ckravj1o7003y78ta28szhgq4","_id":"ckravj1o7004378tadjei42re"}],"Tag":[{"name":"Software Architecture","_id":"ckravj1mo000a78ta04b94ok2"},{"name":"Microservices","_id":"ckravj1mp000b78ta4xz5477l"},{"name":"Auditing","_id":"ckravj1mp000d78ta4zxe4bww"},{"name":"Event Sourcing","_id":"ckravj1mp000e78ta11xohpxo"},{"name":"Golang","_id":"ckravj1mp000f78ta4pg98vni"},{"name":"Elixir","_id":"ckravj1mx000o78ta8gqqhglr"},{"name":"Functional","_id":"ckravj1mz000t78ta0lyb5p93"},{"name":"Tutorial","_id":"ckravj1n1000z78tacpn8djvf"},{"name":"Authentication","_id":"ckravj1n5001478ta67a97tnj"},{"name":"Middleware","_id":"ckravj1nc001878ta8x5ec5vy"},{"name":"Programming Paradigms","_id":"ckravj1nd001c78ta8wgkgq7q"},{"name":"DDD","_id":"ckravj1ni001j78ta96xv5h5n"},{"name":"Context Maps","_id":"ckravj1nj001m78ta1nc9hncy"},{"name":"Docker","_id":"ckravj1nk001o78tabgd3am0i"},{"name":"Logging","_id":"ckravj1nk001r78ta2owredld"},{"name":"Loki","_id":"ckravj1nk001t78ta0qbq9vg0"},{"name":"Development","_id":"ckravj1nk001u78ta2u7cd3pg"},{"name":"Containers","_id":"ckravj1nk001v78tacvjhelyr"},{"name":"Memory Leak","_id":"ckravj1nl001x78ta5sfabase"},{"name":"Green Threads","_id":"ckravj1nm002078ta0qum5gb3"},{"name":"Investigation","_id":"ckravj1nm002378ta7b8j9h24"},{"name":"Profiling","_id":"ckravj1nn002678ta4gd4771m"},{"name":"Actor Model","_id":"ckravj1nn002778tads0wcvza"},{"name":"Node.js","_id":"ckravj1no002a78taf56lgjjs"},{"name":"Maybe a rant","_id":"ckravj1nq002g78ta71lb6j9b"},{"name":"Design","_id":"ckravj1ns002j78ta0pjl4akv"},{"name":"Backend For Frontend","_id":"ckravj1nt002p78ta27kb9cjg"},{"name":"API Gateway","_id":"ckravj1nt002q78ta3yajajq4"},{"name":"Sidecar Pattern","_id":"ckravj1nt002r78ta9bhr3fyv"},{"name":"Concurrency","_id":"ckravj1nt002s78tabvthfc96"},{"name":"Parallelism","_id":"ckravj1nt002v78ta325scbsc"},{"name":"Threads","_id":"ckravj1nt002y78ta99oa7p52"},{"name":"Scheduler","_id":"ckravj1nu003178taagrk1wk5"},{"name":"Kernel Threads","_id":"ckravj1nu003478ta1z7x1shx"},{"name":"Threading Models","_id":"ckravj1nu003578ta00i30956"},{"name":"Ports and Adapters","_id":"ckravj1nv003678ta7djs7say"},{"name":"Hexagonal","_id":"ckravj1nx003978tah4e57820"},{"name":"Typescript","_id":"ckravj1o3003l78tabzjv3oiy"},{"name":"Clean Architecture","_id":"ckravj1o3003o78ta8l470irh"},{"name":"Uncle Bob","_id":"ckravj1o3003p78tabqud5345"},{"name":"Node js","_id":"ckravj1o3003q78ta1385gsoc"},{"name":"Javascript","_id":"ckravj1o4003t78tab4puba5c"},{"name":"Event Loop","_id":"ckravj1o6003w78ta0pm2f7o3"},{"name":"libuv","_id":"ckravj1o7003y78ta28szhgq4"}]}}